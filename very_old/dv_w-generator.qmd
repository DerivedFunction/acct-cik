```{python}
import random
import pandas as pd
from openpyxl import load_workbook
import re
import string
from concurrent.futures import ThreadPoolExecutor, as_completed
from tqdm import tqdm
```

# Init
```{python}
output_file = "./training_data.xlsx"
company_name_file = "./names.xlsx"
parquet_file = "./training_data.parquet"
# Precompile regex patterns
pattern_we_s = re.compile(r"We's", flags=re.IGNORECASE)
pattern_we_is = re.compile(r"We is", flags=re.IGNORECASE)
pattern_nil = re.compile(r" (0|0.0) (thousand|million|billion)", flags=re.IGNORECASE)
pattern_notional = re.compile(f"notional", flags=re.IGNORECASE)
pattern_spaces = re.compile(r"\s+")
pattern_dots = re.compile(r"\.\.")
```

# Common Variables
```{python}
money_unit_list = ["thousand", "million", "billion"]
months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec",
]

quarters = ["first", "second", "third", "fourth", "last", "1st", "2nd", "3rd", "4th"]
# Currency codes for international flavor
currency_codes = [
    "$",
    "USD ",
    "€",
    "EUR ",
    "£",
    "GBP ",
    "¥",
    "JPY ",
    "CHF ",  # Swiss Franc
    "CNY ",  # Chinese Yuan
    "HKD ",  # Hong Kong Dollar
    "SGD ",  # Singapore Dollar
    "CAD ",  # Canadian Dollar
    "AUD ",  # Australian Dollar
    "NZD ",  # New Zealand Dollar
    "SEK ",  # Swedish Krona
    "NOK ",  # Norwegian Krone
    "DKK ",  # Danish Krone
    "ZAR ",  # South African Rand
    "BRL ",  # Brazilian Real
    "MXN ",  # Mexican Peso
    "INR ",  # Indian Rupee
    "KRW ",  # South Korean Won
    "TRY ",  # Turkish Lira
]
currency_pairs = [
    # Major USD crosses
    "EUR/USD",
    "GBP/USD",
    "USD/JPY",
    "USD/CHF",
    "USD/CAD",
    "AUD/USD",
    "NZD/USD",
    "USD/CNY",
    "USD/HKD",
    "USD/SGD",
    "USD/INR",
    "USD/KRW",
    "USD/MXN",
    "USD/BRL",
    "USD/TRY",
    "USD/ZAR",
    # Euro crosses
    "EUR/GBP",
    "EUR/JPY",
    "EUR/CHF",
    "EUR/CAD",
    "EUR/AUD",
    "EUR/NZD",
    "EUR/SEK",
    "EUR/NOK",
    "EUR/DKK",
    "EUR/PLN",
    "EUR/HUF",
    "EUR/CZK",
    # Asia-Pacific crosses
    "AUD/JPY",
    "AUD/NZD",
    "AUD/CAD",
    "NZD/JPY",
    "SGD/JPY",
    "CNY/JPY",
    # Pound crosses
    "GBP/JPY",
    "GBP/CHF",
    "GBP/CAD",
    "GBP/AUD",
    "GBP/NZD",
]


major_currencies = [
    "the Euro",
    "the British pound",
    "the Swiss franc",
    "the Japanese yen",
    "the Canadian dollar",
    "the Australian dollar",
    "the Chinese yuan",
    "the U.S. Dollar",
]

european_currencies = [
    "the Euro",
    "the British pound",
    "the Swiss franc",
    "the Norwegian krone",
    "the Swedish krona",
    "the Polish zloty",
    "the Czech koruna",
    "the Hungarian forint",
]

asian_currencies = [
    "the Japanese yen",
    "the Chinese yuan",
    "the Indian rupee",
    "the South Korean won",
    "the Singapore dollar",
    "the Thai baht",
    "the Malaysian ringgit",
]

americas_currencies = [
    "the Canadian dollar",
    "the Mexican peso",
    "the Brazilian real",
    "the Argentine peso",
    "the Chilean peso",
    "the Colombian peso",
]
all_currencies = (
    set(major_currencies)
    | set(european_currencies)
    | set(asian_currencies)
    | set(americas_currencies)
)
all_currencies = list(all_currencies)
frequencies = [
    "quarterly",
    "on a regular basis",
    "at least quarterly",
    "monthly",
    "periodically",
]
volume_units = [
    "barrels",
    "MMBtu",
    "MWh",
    "metric tons",
    "bushels",
    "gallons",
    "ton",
    "pound",
    "bushel",
    "board foot",
]
assessment_verbs = [
    "assessed",
    "evaluated",
    "tested",
    "measured",
    "analyzed",
    "conducted",
    "performed",
]
balance_sheet_locations = [
    "other income (expense), net",
    "change in fair value of derivative liabilities",
    "other comprehensive income",
    "earnings",
    "the consolidated statements of operations",
    "statement of operations",
]
```

# Common templates
```{python}
# ========== SHARED / GENERIC ==========
shared_issuers = [
    "FASB",
    "Financial Accounting Standards Board",
    "SEC",
    "IASB",
    "International Accounting Standards Board",
    "PCAOB",
    "FASB's Emerging Issues Task Force",
]

shared_topics = [
    "revenue recognition",
    "lease accounting",
    "credit losses",
    "financial instruments",
    "business combinations",
    "stock compensation",
    "fair value measurements",
    "income taxes",
    "segment reporting",
    "consolidation",
    "intangible assets",
    "debt modifications",
    "defined benefit plans",
    "collaborative arrangements",
    "insurance contracts",
]

other_standard_names = [
    "ASU 2016-02",  # Leases (ASC 842)
    "ASU 2014-09",  # Revenue Recognition (ASC 606)
    "ASU 2016-13",  # Credit Losses (ASC 326)
    "ASC 842",  # Leases
    "ASC 606",  # Revenue
    "ASC 326",  # Credit Losses
    "ASC 718",  # Stock Compensationg
    "ASC 805",  # Business Combinations
    "ASC 740",  # Income Taxes
    "ASC 820",  # Fair Value Measurement
    "Topic 842",  # Leases
    "Topic 606",  # Revenue Recognition
]

shared_purposes = [
    "improve financial reporting and provide additional disclosures",
    "align accounting practices with economic substance",
    "enhance transparency and comparability",
    "simplify the accounting model",
    "provide clarification on implementation issues",
    "expand presentation and disclosure requirements",
    "address practice diversity and implementation questions",
    "converge U.S. GAAP with international standards",
    "expand the related presentation and disclosure requirements",
    "change how companies assess effectiveness",
    "eliminate the separate measurement and reporting of hedge ineffectiveness",
]

shared_additional_features_templates = [
    "The guidance also {additional_feature}",
    "Additionally, the standard {additional_feature}",
    "The new guidance {additional_feature}",
    "The update also {additional_feature}",
]

shared_effective_date_templates = [
    "The guidance is effective in fiscal year {year}, with early adoption permitted",
    "The standard is effective for fiscal years beginning after {month} {day}, {year}",
    "This guidance becomes effective for annual periods beginning after {month} {end_day}, {year}, with early application permitted",
    "The amendments are effective for fiscal years, and interim periods within those years, beginning after {month} {end_day}, {year}",
    "Effective date is for annual reporting periods beginning after {month} {end_day}, {year}",
    "{company} must adopt this guidance no later than fiscal year {year}",
]

shared_adoption_status_templates = [
    "{company} adopted this guidance on {month} {day}, {year} using the {method}",
    "{company} adopted {standard} effective {month} {day}, {year}",
    "{company} early adopted the standard in {year}",
    "{company} will adopt the guidance in fiscal year {year}",
    "{company} is currently evaluating the impact of adopting this guidance",
    "{company} does not expect the adoption of this standard to have a material impact on its consolidated financial statements",
    "{company} adopted the new guidance prospectively",
    "The standard was adopted retrospectively with a cumulative-effect adjustment to retained earnings",
]

shared_adoption_methods = [
    "modified retrospective approach",
    "full retrospective method",
    "prospective method",
    "cumulative-effect adjustment",
    "practical expedient package",
    "modified retrospective transition method",
]

shared_adoption_impact_templates = [
    "The adoption resulted in {impact}",
    "Upon adoption, {company} recognized {impact}",
    "The cumulative effect of adoption was {impact}",
    "Implementation of the standard resulted in {impact}",
    "As a result of adoption, {impact}",
]

shared_evaluation_templates = [
    "{company} is currently evaluating the potential impact of this guidance on its consolidated financial statements and related disclosures",
    "{company} has not yet completed its assessment of the impact of adopting this standard",
    "{company} is analyzing the effects of the new guidance on its accounting policies and internal controls",
    "Management is in the process of evaluating the provisions of the standard to determine its impact",
    "{company} has established an implementation team to assess the requirements and impacts of the new guidance",
    "{company} does not expect this guidance to have a material effect on its financial position or results of operations",
]

shared_transition_templates = [
    "{company} will apply the {method} upon adoption",
    "{company} elected to apply the practical expedients available under the transition guidance",
    "{company} intends to adopt the standard using the {method} with {feature}",
    "{company} selected the {method} for transition purposes",
]

shared_transition_features = [
    "the option to not restate comparative periods",
    "application of hindsight",
    "certain relief provisions",
    "portfolio-level application where appropriate",
    "use of transition practical expedients",
]

shared_disclosure_change_templates = [
    "The new standard requires additional disclosures regarding {disclosure_topic}",
    "Enhanced disclosures are required for {disclosure_topic}",
    "The guidance eliminates disclosure of {disclosure_topic} while adding requirements for {disclosure_topic2}",
    "New qualitative and quantitative disclosure requirements focus on {disclosure_topic}",
    "{company} will provide expanded disclosures about {disclosure_topic} beginning in fiscal year {year}",
]

shared_practical_expedient_templates = [
    "{company} elected to apply the practical expedient to {expedient_description}",
    "{company} utilized practical expedients available under the transition guidance, including {expedient_description}",
    "{company} did not elect the practical expedient related to {expedient_description}",
    "Available practical expedients include the option to {expedient_description}",
]

shared_recent_pronouncement_templates = [
    "Recently issued accounting pronouncements not yet adopted include {standard}, which addresses {topic}",
    "In {month} {year}, the {issuer} issued {standard} related to {topic}, which {company} will adopt in {adoption_year}",
    "Management continues to monitor new accounting pronouncements issued by the {issuer} for potential impact",
    "Other new accounting guidance issued but not yet effective is not expected to have a material impact on the consolidated financial statements",
    "{company} reviews all recently issued accounting standards to determine their applicability and impact",
]

shared_standards_templates = [
    "In {month} {year}, the {issuer} issued guidance on {topic} to {purpose}",
    "The {issuer} issued {standard} in {year}, which {description}",
    "New accounting guidance issued by the {issuer} in {month} {year} addresses {topic}",
    "{standard} was issued in {year} to {purpose}",
    "During {year}, the {issuer} released updated guidance on {topic}",
]

# ========== HEDGING / DERIVATIVE POLICY ==========
hedging_descriptions = [
    "expand presentation and disclosure requirements, change how companies assess hedge effectiveness, and eliminate separate measurement of hedge ineffectiveness",
    "improves alignment of hedge accounting with risk management strategies",
    "modifies the treatment of fair value and cash flow hedges to reflect underlying economics",
]

hedging_additional_features = [
    "enables more financial and nonfinancial hedging strategies to become eligible for hedge accounting",
    "aligns accounting treatment with risk management activities",
    "simplifies the application of hedge accounting",
    "allows designation of component risks in nonfinancial hedges",
    "permits hedging of contractually specified components in cash flow exposures",
]

hedge_change_policy_templates = [
    "In {month} {year}, the {issuer} issued {standard} related to hedging activities. The guidance {description}. Additionally, it {additional_feature}",
    "The {issuer} issued {standard} to address {topic}. This update {description}. The new guidance {additional_feature}",
    "Hedging Activities: In {month} {year}, {issuer} released guidance on {topic}. It {description} and {additional_feature}",
    "The amendment to Topic 815 {description} and {additional_feature}. Effective for fiscal years beginning after {month} {eff_day}, {year}",
]

# ========== GENERAL ACCOUNTING POLICY ==========
general_descriptions = [
    "requires recognition of lease assets and liabilities for operating leases",
    "changes the impairment model for financial instruments to an expected credit loss model",
    "establishes a revenue recognition framework based on transfer of control",
    "updates classification and measurement guidance for financial instruments",
    "updates accounting for share-based payments",
    "clarifies business combination definition and asset vs business acquisition criteria",
    "simplifies goodwill impairment testing",
    "updates income tax recognition for intra-entity asset transfers",
]

general_additional_features = [
    "simplifies certain aspects of accounting application",
    "provides transition relief and expedients",
    "permits practical expedients for implementation",
    "reduces disclosure complexity while maintaining transparency",
    "allows entities to apply hindsight in transition",
]

general_policy_templates = [
    "In {month} {year}, the {issuer} issued {standard} addressing {topic}. The standard {description}. Additionally, it {additional_feature}",
    "The {issuer} issued {standard} to {purpose}. The guidance {description} and {additional_feature}",
    "Accounting Update: In {month} {year}, {issuer} released {standard} covering {topic}. It {description}. The update {additional_feature}",
    "During {year}, the {issuer} issued guidance under {standard} to {purpose}. {description}. Additionally, it {additional_feature}",
]

# ==============================
# Counterparty / Credit Risk Templates
# ==============================
risk_templates = [
    "Based upon certain factors, including a review of the {item} for {company}'s counterparties, {company} determined its counterparty credit risk to be {materiality}",
    "After assessing {item} and other indicators for {company}'s derivative counterparties, management concluded that counterparty exposure is {materiality}",
    "{company} periodically reviews {item} and other market data to evaluate counterparty credit risk, which was determined to be {materiality}",
    "Based on a review of {item} and internal assessments, {company} concluded that exposure to counterparty credit risk is {materiality}",
    "{company} monitors {item} as part of its evaluation of counterparty credit exposure associated with derivative contracts",
    "Considering {item}, credit ratings, and exposure limits, {company} determined that counterparty risk is {materiality}",
    "{company} evaluates {item} to assess potential credit exposure under its derivative contracts and considers such exposure to be {materiality}",
    "Taking into account {item} and the financial strength of counterparties, {company} considers the overall counterparty credit risk to be {materiality}",
]

# ==============================
# Risk Items
# ==============================

# Derivative / Hedging-Related Risk Items
risk_items_derivative = [
    "credit default swap spreads",
    "credit default swap rates",
    "counterparty credit spreads",
    "market-implied default probabilities",
    "collateral coverage ratios under derivative agreements",
    "credit exposure under derivative master netting arrangements",
    "net derivative positions by counterparty",
    "credit valuation adjustments (CVA)",
    "potential future exposure on derivative contracts",
    "credit risk metrics for derivative counterparties",
    "mark-to-market exposure on outstanding swaps",
    "counterparty exposure by derivative type",
]

# General / Non-Derivative (“Other”) Risk Items
risk_items_other = [
    "customer credit ratings",
    "trade receivable aging reports",
    "exposure by customer group",
    "accounts receivable turnover ratios",
    "supplier credit evaluations",
    "internal credit risk assessments unrelated to derivatives",
    "counterparty concentration in commercial transactions",
    "loan portfolio credit quality indicators",
    "credit loss reserves and allowances",
    "overall counterparty creditworthiness in non-derivative activities",
    "exposure to sovereign or institutional counterparties",
]

# Optional
materiality = [
    "immaterial",
    "not significant",
    "limited",
    "material",
    "significant",
    "not material",
]

```

# Derivative liabilities and Warrants and Embedded Derivatives
```{python}

warrant_issuance_templates = [
    'In connection with the {event}, {company} issued warrants to purchase up to {shares} shares of common stock at an exercise price of {currency_code}{price} per share, in accordance with the guidance contained in FASB ASC 815 "Derivatives and Hedging" whereby under that provision the warrants do not meet the criteria for equity treatment and must be recorded as a liability',
    "During {month} {year}, {company} issued {shares} warrants exercisable at {currency_code}{price} per share in conjunction with {event} and is classified as a liability",
    "As part of {event}, {company} granted liability-classified warrants for {shares} shares with a strike price of {currency_code}{price}, expiring in {expiry_year}",
    "{company} issued {shares} warrants at an exercise price of {currency_code}{price} per share, are classified as liabilities the guidence of ASC 815, as consideration for {event}",
    "In {month} {year}, warrants to acquire {shares} shares at {currency_code}{price} per share were issued in connection with {event}, and are derivative liabilities",
    "Under the guidance in ASC 815-40, certain warrants issued at {year} do not meet the criteria for equity treatment",
]

# Warrant events/reasons
warrant_events = [
    "a debt financing transaction",
    "the series B preferred stock offering",
    "a credit facility agreement",
    "initial public offering",
    "a strategic partnership agreement",
    "the convertible note issuance",
    "a private placement",
    "the acquisition financing",
    "vendor financing arrangements",
]

# Warrant fair value measurement templates
warrant_fv_templates = [
    "The fair value of the warrants classifed as liabilities was determined to be {currency_code}{amount} {money_unit} using the  as of {month} {end_day}, {year}",
    "At issuance, the warrant liabilities were valued at {currency_code}{amount} {money_unit} using a {model}",
    "{company} estimated the fair value of the warrants at {currency_code}{amount} {money_unit} as of {month} {end_day}, {year} using the {model} methodology",
    "Using a {model}, the warrant liabilities were fair valued at {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}",
    "The fair value of outstanding liability-classified warrants totaled {currency_code}{amount} {money_unit} at year-end {year}, {verb} using {model}",
    "The fair value of outstanding warrant liabilities totaled {currency_code}{amount} {money_unit} at year-end {year}, {verb} using {model}",
    "The fair value of the warrants classified as liabilities is estimated using the {model}, with the following inputs as of {month} {year}",
    "The fair value of the warrant liabilities presented below were {verb} using {model}",
]


# Warrant liability classification templates
warrant_liability_templates = [
    "The warrants are classified as liabilities and marked to market each reporting period with changes in fair value recorded in {location}",
    "These warrants are recorded as liabilities at fair value, with subsequent changes recognized in {location}",
    "{company} accounts for the warrants as liabilities rather than equity measured at fair value through {location}",
    "After all relevant assessments, {company} determined that the warrants issued under the {event} require classification as a liability pursuant to ASC 840",
    "Warrant liabilities are remeasured to fair value at each balance sheet date with gains and losses recorded in {location}",
    "As the warrants contain certain provisions, they are classified as liabilities and adjusted to fair value quarterly through {location}",
    "Warrants accounted for as liabilities have the potential to be settled in cash or are not indexed to {company}'s own stock",
    "This warrant liability will be re-measured at each balance sheet date until the warrants are exercised or expire, and any change in fair value will be recognized in {company}'s {location}",
    "Any decrease or increase in the estimated fair value of the warrant liability since the most recent balance sheet date is recorded in {company}'s {location} as changes in fair value of derivative liabilities",
    "The amount of warrant liability was determined and recognized on {location} for the applicable reporting period based on the number of warrants that would have been issued",
]

# Derivative liability general templates
deriv_liability_general_templates = [
    "Derivative liabilities consist primarily of warrant liabilities and are measured at fair value on a recurring basis using Level 3 inputs",
    "{company}'s derivative liabilities primarily relate to freestanding warrants and embedded conversion features that require bifurcation",
    "As of {month} {end_day}, {year}, derivative liabilities totaled {currency_code}{amount} {money_unit} compared to {currency_code}{prev_amount} {money_unit} in the prior year",
    "Changes in the fair value of derivative liabilities during {year} resulted in a {gain_loss} of {currency_code}{amount} {money_unit}",
    "{company} recognized derivative liabilities of {currency_code}{amount} {money_unit} related to warrants issued in connection with financing transactions during {year}",
    "{company} ’s warrant liability is based on  utilizing management judgment and pricing inputs from observable and unobservable markets with less volume and transaction frequency than active markets",
    "The following table presents information about {company}'s warrant liabilities that are measured at fair value on a recurring basis at {month} {end_day}, {year} and indicates the fair value hierarchy of the valuation inputs",
]

# Down round feature templates
down_round_templates = [
    "The warrants contain down round provisions that adjust the exercise price if {company} issues equity securities at prices below the then-current exercise price",
    "Due to down round features that could result in a variable number of shares upon exercise, the warrants are classified as liabilities rather than equity",
    "The warrants include anti-dilution protection in the form of down round provisions, requiring liability classification under ASC 815-40",
    "Down round features embedded in the warrants preclude equity classification and require remeasurement at fair value each period",
]

# Earnout liability templates
earnout_templates = [
    "In connection with the acquisition of {target}, {company} recorded an earnout liability of {currency_code}{amount} {money_unit}, which will be settled in cash or shares based on achievement of revenue milestones through {year}",
    "{company} assumed earnout obligations valued at {currency_code}{amount} {money_unit} as part of the {target} acquisition, payable upon achievement of specified operational targets",
    "Contingent consideration arrangements from business combinations resulted in derivative liabilities of {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}",
    "The earnout liability related to the {target} acquisition was remeasured to {currency_code}{amount} {money_unit} during {year}, with the change recorded in other income (expense)",
]

# Embedded derivative identification templates
embedded_identification_templates = [
    "{company} has identified embedded derivatives within certain {host_contract} that require bifurcation and separate accounting under ASC 815",
    "Certain {host_contract} contain embedded features that meet the definition of derivatives and are not clearly and closely related to the host contract",
    "{company}'s {host_contract} include embedded derivative features that have been bifurcated and recorded separately at fair value",
    "Embedded derivatives have been identified within {host_contract} and are accounted for separately from the host instrument",
    "{company} {verb} {host_contract} and determined that certain embedded features require bifurcation under derivative accounting guidance",
    '{company} adopted SFAS 155, "Accounting for Certain Hybrid Instruments" to identify all embedded derivative features',
    "{company} measures a hybrid financial instrument in its entirety at fair value after having identified all embedded derivative features",
    "{company} identified and documented the embedded derivative features, and the irrevocably elected to measure and carry the {host_contract} at fair value",
    "This standard requires the conversion feature of {host_contract} be separated from the host contract and presented as a derivative instrument if certain conditions are met",
]

host_contracts = [
    "convertible debt instruments",
    "OTC convertible notes hedge",
    "convertible hedge",
    "hybrid financial instruments",
    "convertible preferred stock",
    "redeemable preferred stock",
    "convertible notes payable",
    "customer contracts",
    "supplier agreements",
    "lease agreements with variable payments",
    "warrants",
]

# Specific embedded derivative types
embedded_types_templates = [
    "The embedded derivatives consist primarily of {embedded_type} that are measured at fair value through earnings",
    "{company} has bifurcated {embedded_type} from the host {host_contract}",
    "Embedded {embedded_type} within {host_contract} are carried at fair value with changes recorded in {location}",
    "The {embedded_type} embedded in the {host_contract} requires separate recognition as a derivative liability",
]

embedded_types = [
    "conversion features",
    "redemption features",
    "reset provisions",
    "make-whole provisions",
    "contingent interest features",
    "price adjustment mechanisms",
    "indexed payment terms",
    "foreign currency-linked provisions",
    "commodity price escalation clauses",
    # Common embedded derivative features to add:
    "put options",  # investor put right in debt
    "call options",  # issuer call right
    "prepayment options",  # common in loans/leases
    "step-up interest features",  # coupon steps up/down
    "participating payment features",  # extra payments linked to equity/earnings
    "profit participation features",  # linked to issuer performance
    "contingent conversion features",  # conversion only if trigger met
    "down-round protection",  # equity-linked anti-dilution
    "ratchet provisions",  # similar to down-round resets
    "dual currency provisions",  # payment in one of two currencies
    "interest rate reset features",  # coupon reset tied to benchmark
    "equity-linked provisions",  # payment terms tied to stock price
    "inflation indexation clauses",  # payments indexed to CPI/RPI
    "performance-based conversion",  # convertibility linked to financial targets
]


# Convertible debt embedded derivative templates
convertible_debt_templates = [
    "{company} issued {currency_code}{principal} {money_unit} in convertible senior notes in {month} {year}. The conversion feature was determined to be an embedded derivative requiring bifurcation, with an initial fair value of {currency_code}{embedded_fv} {money_unit}",
    "In {month} {year}, {company} completed an offering of {currency_code}{principal} {money_unit} aggregate principal amount of convertible notes. The embedded conversion option was bifurcated and valued at {currency_code}{embedded_fv} {money_unit}",
    "The convertible notes include conversion features that are not clearly and closely related to the debt host. The embedded derivative was recorded at a fair value of {currency_code}{embedded_fv} {money_unit} at issuance",
    "Upon issuance of the {currency_code}{principal} {money_unit} convertible debt in {year}, {company} allocated {currency_code}{embedded_fv} {money_unit} to the embedded conversion derivative",
]

# Fair value measurement of embedded derivatives
embedded_fv_templates = [
    "The fair value of the embedded derivative was {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}, compared to {currency_code}{prev_amount} {money_unit} at {month} {end_day}, {prev_year}",
    "Embedded derivative liabilities totaled {currency_code}{amount} {money_unit} at year-end {year}, representing a {change_direction} from {currency_code}{prev_amount} {money_unit} in the prior year",
    "As of {month} {end_day}, {year}, {company} recorded embedded derivative liabilities of {currency_code}{amount} {money_unit} measured using Level 3 inputs",
    "The embedded derivatives had a fair value of {currency_code}{amount} {money_unit} at {month} {end_day}, {year}, with changes in value recorded in other expense",
]

# Valuation methodology templates
embedded_valuation_templates = [
    "The fair value of embedded derivatives is determined using a {model}, incorporating assumptions for {assumptions}",
    "{company} values embedded derivatives using {model} with key inputs including {assumptions}",
    "Fair value is estimated using {model}, which considers {assumptions}",
    "Embedded derivatives are valued using {model}, with significant unobservable inputs related to {assumptions}",
]

valuation_models = [
    "Monte Carlo simulation model",
    "binomial lattice model",
    "Black-Scholes option pricing model",
    "BSM model",
]

valuation_assumptions = [
    "stock price volatility, risk-free interest rates, and expected term",
    "credit spreads, conversion probability, and stock price volatility",
    "volatility, dividend yield, and time to maturity",
    "probability of conversion, discount rates, and market price of common stock",
    "expected volatility, probability of redemption, and time to maturity",
]

# Fair value change recognition templates
embedded_fv_change_templates = [
    "During {year}, {company} recognized a {gain_loss} of {currency_code}{amount} {money_unit} related to changes in the fair value of embedded derivatives",
    "Changes in fair value of embedded derivatives resulted in a {gain_loss} of {currency_code}{amount} {money_unit} for the year ended {month} {end_day}, {year}",
    "{company} recorded {gain_loss}s of {currency_code}{amount} {money_unit} from the remeasurement of embedded derivative liabilities during {year}",
    "Fair value adjustments on embedded derivatives contributed a {gain_loss} of {currency_code}{amount} {money_unit} to {location} in {year}",
]

# Closely and clearly related analysis templates
ccr_analysis_templates = [
    # Assessment leading to bifurcation
    "{company} {verb} an assessment of whether the embedded features were clearly and closely related to the economic characteristics of the host contract and concluded bifurcation was required",
    "The embedded features are not clearly and closely related to the debt host instrument, as the conversion feature is indexed to {company}'s own stock and includes down round protection",
    "Management {verb} the economic characteristics and risks of the embedded features and determined they are not clearly and closely related to the host, requiring separate accounting",
    "The embedded derivative fails the clearly and closely related test due to its equity-linked characteristics and variable settlement provisions",
    # Assessment leading to no bifurcation
    "{company} {verb} the terms of the embedded provisions and concluded they are clearly and closely related to the host contract, and therefore do not require bifurcation",
    "The embedded features are considered clearly and closely related to the debt host instrument, and accordingly no separate derivative recognition is necessary",
    "Based on its analysis, management determined that the embedded option is clearly and closely related to the host contract and remains accounted for within the host instrument",
    # Neutral/assessment-only language
    "Management {verb} whether the embedded features were clearly and closely related to the host instrument as required under ASC 815",
    "{company} {verb} the economic characteristics of the embedded provisions in accordance with the clearly and closely related guidance",
    "An evaluation of the embedded derivative features was performed to {verb} whether they are clearly and closely related to the host contract",
    # Variations in contract types
    "{company} {verb} its lease agreements containing variable payments and determined the features are not clearly and closely related to the lease host",
    "{company} {verb} customer contracts containing indexed payment terms and concluded bifurcation was required",
    "Management reviewed supplier agreements with commodity-linked pricing terms and determined the features were not clearly and closely related to the host contract",
]

# Conversion/settlement templates
embedded_settlement_templates = [
    "Upon conversion or redemption of the host instrument, the embedded derivative is remeasured to fair value with any gain or loss recognized in earnings, and the liability is extinguished",
    "In {month} {year}, {currency_code}{principal} {money_unit} of convertible notes were converted, resulting in settlement of the associated embedded derivative liability and recognition of a {gain_loss} of {currency_code}{amount} {money_unit}",
    "{company} settled embedded derivative liabilities totaling {currency_code}{amount} {money_unit} during {year} in connection with debt extinguishment transactions",
    "During the {quarter} quarter of {year}, the conversion of notes resulted in derecognition of {currency_code}{amount} {money_unit} in embedded derivative liabilities",
]

# Embedded FX derivatives templates
embedded_fx_templates = [
    # General identification
    "Certain {host_contract} contain payments indexed to foreign currency exchange rates that represent embedded foreign currency derivatives",
    "{company} has identified embedded foreign currency derivatives in {host_contract} where payments are denominated in a currency other than the functional currency of either party",
    "Embedded foreign exchange derivatives arise from {host_contract} with payment terms linked to movements in the {currency_pair} exchange rate",
    "{company}'s {host_contract} include embedded FX derivatives requiring bifurcation due to currency mismatches between contract terms and functional currencies",
    # Outcome: bifurcation required
    "The embedded foreign currency feature is not clearly and closely related to the host contract and was bifurcated as a separate derivative instrument",
    "Management concluded that the currency-indexed provisions of the {host_contract} are not clearly and closely related and therefore require separate accounting",
    "{company} determined that the foreign currency-linked payments within {host_contract} fail the closely related test and must be accounted for as derivatives",
    # Outcome: bifurcation not required
    "The foreign currency denominated payments within the {host_contract} are considered clearly and closely related to the host and do not require bifurcation",
    "Management assessed the FX-linked terms of the {host_contract} and concluded they are clearly and closely related to the economic characteristics of the host instrument",
    "The embedded foreign exchange feature is deemed to be clearly and closely related to the host contract and remains within the host’s accounting treatment",
    # Contract variations
    "{company}'s long-term debt agreements denominated in {currency_pair} contain embedded FX derivatives requiring analysis under ASC 815",
    "Lease agreements with rental payments linked to {currency_pair} expose {company} to embedded foreign exchange derivative features",
    "Supplier agreements denominated in {currency_pair} include embedded currency features subject to bifurcation assessment",
    "Customer contracts requiring settlement in {currency_pair} create embedded FX derivatives under the host revenue arrangement",
    "Royalty agreements denominated in foreign currency contain embedded foreign exchange features subject to ASC 815 analysis",
    # Neutral disclosure language
    "Management evaluated embedded foreign exchange features in {host_contract} to determine whether they are clearly and closely related to the host instrument",
    "An assessment was performed of foreign currency-linked provisions in {host_contract} under the embedded derivative guidance",
]


# Historical warrant templates (for label 5)
warrant_past_templates = [
    "During {year}, {company} had outstanding warrant liabilities to purchase {shares} shares at {currency_code}{price} per share, which expired unexercised in {month} {year}",
    "In {year}, all outstanding warrants were exercised or expired, and {company} has no derivative liabilities as of {month} {end_day}, {current_year}",
    "{company} previously issued warrants in connection with {event} during {year}. These derivative liabilities were fully exercised by {month} {expiry_year}",
    "Warrants issued in {year} with an exercise price of {currency_code}{price} per share were settled during {settlement_year}, eliminating all derivative warrant liabilities",
    "As of {month} {end_day}, {current_year}, {company} no longer has any outstanding derivative liabilities. All liability-classified warrants issued in {year} were exercised or expired by {expiry_year}",
]

warrant_liability_extinguishment_templates = [
    "The warrant liabilities of {currency_code}{amount} {money_unit} recorded in {year} were extinguished upon exercise and expiration during {settlement_year}",
    "All warrant liabilities were eliminated in {settlement_year} following the exercise of outstanding warrants by holders",
    "During {settlement_year}, {company} settled all outstanding warrant liabilities, recognizing a final fair value adjustment of {currency_code}{amount} {money_unit}",
    "The warrant liability balance of {currency_code}{amount} {money_unit} at {month} {end_day}, {year} was reduced to zero during {settlement_year} upon warrant exercises",
]

earnout_past_templates = [
    "The earnout liability related to the {target} acquisition, recorded in {year}, was settled in {settlement_year} upon achievement of the specified milestones",
    "Contingent consideration from the {year} acquisition of {target} was paid out in {settlement_year}, extinguishing the {currency_code}{amount} {money_unit} earnout liability",
    "{company}'s earnout obligations from prior acquisitions were fully satisfied by {settlement_year}, with no remaining contingent consideration liabilities",
    "During {settlement_year}, {company} paid {currency_code}{amount} {money_unit} to settle earnout liabilities related to business combinations completed in {year}",
]


# ========== SNIPPET 3: Add past-tense embedded derivative templates ==========
# Insert after embedded_fx_templates (around line 280)

# Historical embedded derivative templates (for label 7)
embedded_past_templates = [
    # Convertible debt / notes
    "{company} previously {verb} embedded derivatives within {host_contract} issued in {year}. These instruments were fully converted or redeemed by {settlement_year}",
    "Embedded derivative liabilities related to convertible notes issued in {year} were extinguished upon conversion during {settlement_year}",
    "The embedded derivatives bifurcated from {host_contract} in {year} were eliminated following the redemption of the host instruments in {settlement_year}",
    "All embedded features associated with convertible debt issued in {year} expired unexercised by {settlement_year}",
    # General elimination / maturity
    "As of {month} {end_day}, {current_year}, {company} has no embedded derivative liabilities. All instruments containing embedded features were settled in {settlement_year}",
    "{company} redeemed all outstanding {host_contract} containing embedded derivatives during {settlement_year}, resulting in elimination of bifurcated liabilities",
    "Embedded derivative instruments recognized in prior periods were derecognized following the settlement of the underlying {host_contract}",
    "The embedded features within {host_contract} issued in {year} matured in accordance with their contractual terms during {settlement_year}",
    # Other host contract variations
    "Embedded derivatives associated with redeemable preferred stock issued in {year} were extinguished upon repurchase in {settlement_year}",
    "The embedded foreign currency features within supplier agreements entered in {year} no longer exist following contract termination in {settlement_year}",
    "Royalty agreements containing commodity-linked embedded derivatives expired by {settlement_year}, and no related liabilities remain",
    "Lease agreements with variable FX-linked payments identified as embedded derivatives were terminated during {settlement_year}",
    # Explicit none outstanding / balance sheet focus
    "No embedded derivative liabilities were outstanding as of {month} {end_day}, {current_year}, as all bifurcated instruments had been settled or converted",
    "All previously bifurcated embedded derivatives were derecognized, and no amounts remain recorded on the consolidated balance sheet",
    "Management notes that as of {month} {end_day}, {current_year}, {company} no longer maintains any embedded derivative positions",
]

convertible_debt_redemption_templates = [
    # Full conversion / redemption
    "The {currency_code}{principal} {money_unit} convertible notes issued in {year} were fully converted to common stock during {settlement_year}, resulting in derecognition of the {currency_code}{embedded_fv} {money_unit} embedded derivative liability",
    "In {month} {settlement_year}, {company} redeemed all outstanding convertible debt originally issued in {year}, eliminating embedded derivative liabilities of {currency_code}{amount} {money_unit}",
    "The convertible debt instruments with embedded derivatives issued in {year} matured in {settlement_year}, with all notes converted to equity prior to maturity",
    "During {settlement_year}, {company} completed the conversion of all {currency_code}{principal} {money_unit} in convertible notes, extinguishing the related embedded derivative liability",
    # Partial / repurchase
    "{company} repurchased a portion of its convertible notes issued in {year}, reducing embedded derivative liabilities by {currency_code}{amount} {money_unit} during {settlement_year}",
    "Only part of the {currency_code}{principal} {money_unit} convertible notes were converted during {settlement_year}, with the remainder redeemed in cash, eliminating the associated embedded derivatives",
    # Early / induced conversion
    "In {settlement_year}, {company} induced early conversion of {currency_code}{principal} {money_unit} convertible notes originally due {maturity_year}, eliminating related embedded derivative liabilities",
    "Convertible notes issued in {year} were settled earlier than contractual maturity in {settlement_year}, derecognizing bifurcated embedded derivative liabilities",
    # Settlement method variations
    "Embedded derivative liabilities of {currency_code}{embedded_fv} {money_unit} were extinguished when convertible notes were settled in cash rather than shares during {settlement_year}",
    "Upon conversion in {settlement_year}, holders elected mixed settlement (part cash, part equity), resulting in derecognition of the embedded derivative component",
    # Gain/loss on extinguishment
    "The redemption of convertible debt in {settlement_year} resulted in a {gain_loss} of {currency_code}{amount} {money_unit} recognized on extinguishment of the embedded derivative liability",
    "Conversion of convertible notes during {settlement_year} eliminated embedded derivative liabilities and generated a {gain_loss} recorded in other income (expense)",
    # Zero balance confirmation
    "As of {month} {end_day}, {settlement_year}, no embedded derivative liabilities remain from convertible notes, as all such instruments were either converted or redeemed",
]


embedded_no_longer_outstanding_templates = [
    # General eliminations
    "{company} no longer has any embedded derivative liabilities as all instruments containing bifurcated features were settled, converted, or matured by {settlement_year}",
    "As of {month} {end_day}, {current_year}, there are no outstanding embedded derivatives. All such liabilities were extinguished in {settlement_year}",
    "The embedded derivative liabilities of {currency_code}{amount} {money_unit} recorded in prior years were fully eliminated by {settlement_year}",
    "No embedded derivatives remain outstanding as of year-end {current_year}. The last remaining instruments were settled in {settlement_year}",
    # Balance sheet focused
    "No amounts related to embedded derivatives are recorded on the consolidated balance sheet as of {month} {end_day}, {current_year}",
    "All previously bifurcated embedded derivatives have been derecognized, and no liability remains as of {month} {end_day}, {current_year}",
    "{company} has eliminated all embedded derivative liabilities from its financial statements as of {current_year}",
    # Explicit extinguishment / derecognition
    "The final embedded derivative liability was derecognized in {settlement_year}, and no further instruments contain bifurcated features",
    "Embedded derivatives identified in earlier periods have all been extinguished, with none remaining outstanding at the end of {current_year}",
    # Catch-all confirmation
    "Management has determined that as of {month} {end_day}, {current_year}, {company} does not have any contracts requiring bifurcation of embedded derivatives",
    "No embedded derivative features exist within any outstanding financial instruments as of the reporting date",
]


```

# Hedging Activities
## Common Activities
```{python}

hedge_no_such_outstanding_template = [
    # --- One-year ---
    "As of {month} {end_day}, {year}, {company} {verb} no outstanding {swap_type} positions",
    "As of {month} {end_day}, {year}, {company} did not {verb} outstanding {swap_type}",
    "At year-end {year}, {company} reported no outstanding {swap_type}, as all derivative instruments were closed out before {month} {year}",
    "As of {month} {year}, there were no {swap_type} remaining",
    "In the {quarter} quarter of {year}, there were no {swap_type} remaining",
    # --- Two-year ---
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} no outstanding {swap_type}",
    "At {month} {end_day}, {year} and {prev_year}, {company} did not {verb} outstanding {swap_type}",
    "As of {month} {end_day}, {year} and {prev_year}, there were no active {swap_type} positions, following the full settlement of prior hedge instruments",
    "At the close of both {year} and {prev_year}, {company} reported no outstanding {swap_type}",
    # --- Three-year ---
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} no outstanding {swap_type}",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} did not {verb} outstanding {swap_type}",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, there were no {swap_type} remaining",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} no outstanding {swap_type}",
    "For {year}, {prev_year}, and {prev2_year}, {company} reported no outstanding {swap_type}, as all derivative positions were either settled or allowed to expire",
]

hedge_position_templates = [
    "As of {month} {end_day}, {year}, {company} {verb} {swap_type} with notional amounts totaling {currency_code}{notional} {money_unit}",
    "At year-end {year}, {company} {verb} {swap_type} outstanding with aggregate notional values of {currency_code}{notional} {money_unit} designated as hedges",
    "As of {month} {year}, outstanding {swap_type} with notional amounts of {currency_code}{notional} {money_unit} remain in effect",
    "{company}'s derivative portfolio at {month} {end_day}, {year} consists of {swap_type} with combined notional values of {currency_code}{notional} {money_unit}",
    "At the end of {year}, {swap_type} with an aggregate notional value of {currency_code}{notional} {money_unit} remain active in {company} ’s derivative portfolio",
    "As of {month} {end_day}, {year}, {company} {verb} {swap_type} outstanding with a notional amount of {currency_code}{notional} {money_unit}",
    "At year-end {year}, {company} ’s derivative portfolio includes {swap_type} with a notional value of {currency_code}{notional} {money_unit}",
    "As of {month} {end_day}, {year}, outstanding {swap_type} totaling {currency_code}{notional} {money_unit} remain designated as hedges",
    "{company} {verb} {swap_type} with a notional amount of {currency_code}{notional} {money_unit} at {month} {end_day}, {year}, as part of its hedging strategy",
    "At the close of {year}, {swap_type} with an aggregate notional value of {currency_code}{notional} {money_unit} remain designated as hedges",
    "As of {month} {year}, {company} ’s {swap_type} portfolio includes notional amounts totaling {currency_code}{notional} {money_unit}",
    "{company} ’s derivative instruments as of {month} {end_day}, {year}, include {swap_type} with a total notional amount of {currency_code}{notional} {money_unit}",
    "{company} ’s {swap_type} contracted in {old_year} remain outstanding as of {year}, with a notional balance of {currency_code}{old_notional} {money_unit}, scheduled to mature in {future_year}",
    "To manage exposure, {company} {verb} {swap_type} in {old_year}, with an inception notional of {currency_code}{old_notional} {money_unit} and a stated maturity in {future_year}",
    "In {month} {old_year}, {company} {verb} {swap_type} with notional amounts of {currency_code}{old_notional} {money_unit}, which are set to expire in {month} {future_year}",
    "As of {month} {year}, {company} {verb} {swap_type} {verb} in {old_year}, with total notional of {currency_code}{old_notional} {money_unit}, expiring in {future_year}",
    "{swap_type} expires in {future_year}",
    "In {month} {year}, {company} {verb} {swap_type} with a total notional amount of {currency_code}{notional} {money_unit}, resulting in fair value losses recorded in equity",
    "In the {quarter} quarter of {year}, {company} {verb} {swap_type} with a total notional amount of {currency_code}{notional} {money_unit}, resulting in fair value losses recorded in equity",
    "During {month} {year}, {swap_type} were designated as {hedge_type} hedges, resulting in {currency_code}{notional} {money_unit} of unrealized losses recorded in accumulated OCI",
    "During the {quarter} quarter of {year}, {swap_type} were designated as {hedge_type} hedges, resulting in {currency_code}{notional} {money_unit} of unrealized losses recorded in accumulated OCI",
    "The net unrealized loss on the {swap_type} was {currency_code}{notional} {money_unit} at {month} {end_day}, {year} and is reflected in accumulated other comprehensive income.",
    # Revesred
    "As of {month} {end_day}, {year}, {company} {verb} notional amounts totaling {currency_code}{notional} {money_unit} in {swap_type}",
    "At year-end {year}, {company} {verb} aggregate notional values of {currency_code}{notional} {money_unit} in {swap_type} designated as hedges",
    "As of {month} {year}, notional amounts of {currency_code}{notional} {money_unit} in outstanding {swap_type} remain in effect",
    "{company}'s derivative portfolio at {month} {end_day}, {year} consists of notional values of {currency_code}{notional} {money_unit} in {swap_type}",
    "At the end of {year}, an aggregate notional value of {currency_code}{notional} {money_unit} in {swap_type} remain active in {company}’s derivative portfolio",
    "As of {month} {end_day}, {year}, {company} {verb} notional amounts of {currency_code}{notional} {money_unit} in outstanding {swap_type}",
    "At year-end {year}, {company}’s derivative portfolio includes notional values of {currency_code}{notional} {money_unit} in {swap_type}",
    "As of {month} {end_day}, {year}, notional amounts totaling {currency_code}{notional} {money_unit} in outstanding {swap_type} remain designated as hedges",
    "{company} {verb} notional amounts of {currency_code}{notional} {money_unit} in {swap_type} at {month} {end_day}, {year}, as part of its hedging strategy",
    "At the close of {year}, aggregate notional values of {currency_code}{notional} {money_unit} in {swap_type} remain designated as hedges",
    "As of {month} {year}, {company}’s portfolio includes notional amounts totaling {currency_code}{notional} {money_unit} in {swap_type}",
    "{company}’s derivative instruments as of {month} {end_day}, {year}, include total notional amounts of {currency_code}{notional} {money_unit} in {swap_type}",
    "{company}’s notional balance of {currency_code}{old_notional} {money_unit} in {swap_type} contracted in {old_year} remains outstanding as of {year}, scheduled to mature in {future_year}",
    "To manage exposure, {company} {verb} notional amounts of {currency_code}{old_notional} {money_unit} in {swap_type} during {old_year}, with a stated maturity in {future_year}",
    "In {month} {old_year}, {company} {verb} notional amounts of {currency_code}{old_notional} {money_unit} in {swap_type}, which are set to expire in {month} {future_year}",
    "As of {month} {year}, {company} {verb} notional totals of {currency_code}{old_notional} {money_unit} in {swap_type} initiated in {old_year}, expiring in {future_year}",
    # --- NEW TWO-YEAR DISCLOSURE ADDITIONS (with {month} and {end_day}) ---
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} {swap_type} with notional values of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, designated as hedging instruments",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} {swap_type} outstanding with aggregate notional amounts of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively",
    "At {month} {end_day}, {year} and {prev_year}, {company} ’s derivative portfolio included {swap_type} with total notional balances of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} {swap_type} contracts totaling {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, used for hedging purposes",
    "At {month} {end_day}, {year} and {prev_year}, {company} ’s outstanding {swap_type} had notional amounts of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, remaining designated as hedges",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} active {swap_type} positions with notional values of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, within its hedging program",
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} {swap_type} instruments with total notional balances of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, as part of its risk management strategy",
    "As of {month} {end_day}, {year} and {prev_year}, {company} ’s {swap_type} portfolio included outstanding contracts with aggregate notional values of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively",
    # Reversed
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} notional values of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, in {swap_type} designated as hedging instruments",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} aggregate notional amounts of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, in outstanding {swap_type}",
    "At {month} {end_day}, {year} and {prev_year}, {company}’s derivative portfolio included total notional balances of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, in {swap_type}",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} contracts totaling {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, in {swap_type} used for hedging purposes",
    "At {month} {end_day}, {year} and {prev_year}, {company}’s outstanding notional amounts of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, were in {swap_type} remaining designated as hedges",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} active positions with notional values of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, in {swap_type} within its hedging program",
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} total notional balances of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, in {swap_type} as part of its risk management strategy",
    "As of {month} {end_day}, {year} and {prev_year}, {company}’s portfolio included aggregate notional values of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, in outstanding {swap_type}",
    # --- TWO-YEAR DISCLOSURES WITH NO PRIOR-YEAR OUTSTANDINGS ---
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit}; no such instruments were outstanding at {prev_year}",
    "As of {month} {end_day}, {year}, {company} {verb} active {swap_type} with a notional value of {currency_code}{notional} {money_unit}, while no comparable {swap_type} existed during {prev_year}",
    "At year-end {year}, {company} ’s {swap_type} totaled {currency_code}{notional} {money_unit}. There were no {swap_type} outstanding at the close of {prev_year}",
    "As of {month} {year}, {company} {verb} {swap_type} with notional amounts of {currency_code}{notional} {money_unit}; there were no such {swap_type} reported in {prev_year}",
    "During {year}, {company} {verb} {swap_type} positions totaling {currency_code}{notional} {money_unit}, with no comparable {swap_type} outstanding in {prev_year}",
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} serving as fair value hedges, with no {swap_type} outstanding during {prev_year}",
    "As of {month} {end_day}, {year}, {company} {verb} {swap_type} notional of {currency_code}{notional} {money_unit}; no {swap_type} remained outstanding at the end of {prev_year}",
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit}. There were no outstanding {swap_type} balances at {prev_year}",
    # --- NEW THREE-YEAR DISCLOSURE ADDITIONS ---
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} {swap_type} with notional amounts of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, designated as fair value hedges",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively",
    # Reversed
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} notional amounts of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, in {swap_type}",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} notional exposures totaling {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, through {swap_type}",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company}’s outstanding notional values of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, were held in {swap_type}",
    # --- THREE-YEAR DISCLOSURES WITH NO PRIOR-YEAR OUTSTANDINGS ---
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit}; no such instruments were outstanding at {prev_year} or {prev2_year}",
    "As of {month} {end_day}, {year}, {company} had active {swap_type} with a notional value of {currency_code}{notional} {money_unit}, whereas no comparable {swap_type} existed during {prev_year} or {prev2_year}",
    "At year-end {year}, {company} ’s {swap_type} totaled {currency_code}{notional} {money_unit}. There were no {swap_type} outstanding at the close of {prev_year} or {prev2_year}",
    "As of {month} {year}, {company} {verb} {swap_type} with notional amounts of {currency_code}{notional} {money_unit}; there were no such {swap_type} reported in {prev_year} or {prev2_year}",
    "During {year}, {company} initiated {swap_type} positions totaling {currency_code}{notional} {money_unit}, with no comparable {swap_type} outstanding in {prev_year} or {prev2_year}",
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} serving as fair value hedges, with no {swap_type} outstanding during {prev_year} or {prev2_year}",
    "As of {month} {end_day}, {year}, {company} {verb} {swap_type} notional of {currency_code}{notional} {money_unit}; no {swap_type} remained outstanding at the end of {prev_year} or {prev2_year}",
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit}. There were no outstanding {swap_type} balances at {prev_year} or {prev2_year}",
]

eq_position_templates = [
    "As of {month} {end_day}, {year}, {company} {verb} {swap_type} to manage exposure to changes in the market price of its common stock and related equity-based compensation costs",
    "At year-end {year}, {company} {verb} {swap_type} outstanding to hedge variability in compensation expense associated with changes in {company}’s share price",
    "As of {month} {year}, outstanding {swap_type} with notional amounts of {currency_code}{notional} {money_unit} remain in effect to mitigate exposure to equity price movements",
    "{company} ’s derivative portfolio at {month} {end_day}, {year} includes {swap_type} used to manage market risks associated with fluctuations in {company}’s stock price",
    "At the end of {year}, {swap_type} with an aggregate notional value of {currency_code}{notional} {money_unit} remain active, hedging exposures tied to equity-based programs",
    "As of {month} {end_day}, {year}, {company} {verb} {swap_type} outstanding with a notional amount of {currency_code}{notional} {money_unit} to offset potential volatility from changes in its share price",
    "At year-end {year}, {company} ’s derivative portfolio includes {swap_type} executed to reduce variability in reported expenses arising from equity-linked compensation",
    "As of {month} {end_day}, {year}, outstanding {swap_type} totaling {currency_code}{notional} {money_unit} remain designated as economic hedges of {company}’s share price exposure",
    "{company} {verb} {swap_type} with a notional amount of {currency_code}{notional} {money_unit} at {month} {end_day}, {year}, to hedge the market price risk associated with stock-based compensation plans",
    "At the close of {year}, {swap_type} with an aggregate notional value of {currency_code}{notional} {money_unit} remain active to mitigate equity-related market risk",
    "As of {month} {year}, {company} ’s {swap_type} portfolio includes notional amounts totaling {currency_code}{notional} {money_unit} linked to the value of its common stock or market indices",
    "{company} ’s derivative instruments as of {month} {end_day}, {year}, include {swap_type} with a total notional amount of {currency_code}{notional} {money_unit} to manage risks related to equity-linked compensation obligations",
    "{company} ’s {swap_type} contracted in {old_year} remain outstanding as of {year}, with a notional balance of {currency_code}{notional} {money_unit}, intended to hedge changes in equity market values",
    "To manage share price exposure, {company} {verb} {swap_type} in {old_year}, with an inception notional of {currency_code}{old_notional} {money_unit} and a stated maturity in {future_year}",
    "In {month} {old_year}, {company} {verb} {swap_type} with notional amounts of {currency_code}{old_notional} {money_unit}, which are set to expire in {month} {future_year}, to offset volatility in stock-based compensation expense",
    "As of {month} {year}, {company} {verb} {swap_type} {verb} in {old_year}, with total notional of {currency_code}{old_notional} {money_unit}, expiring in {future_year}, to hedge changes in equity valuation",
    # --- Two-year comparative disclosures ---
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} {swap_type} with notional values of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, to hedge exposure to its common stock value",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} {swap_type} outstanding with aggregate notional amounts of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, related to equity-based compensation programs",
    "At {month} {end_day}, {year} and {prev_year}, {company} ’s derivative portfolio included {swap_type} with total notional balances of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, used to manage equity-linked exposures",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} {swap_type} contracts totaling {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, to mitigate volatility in stock-based compensation costs",
    "At {month} {end_day}, {year} and {prev_year}, {company} ’s outstanding {swap_type} had notional amounts of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, remaining in effect as hedges of equity price risk",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} active {swap_type} positions with notional values of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, to manage changes in the value of its shares",
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} {swap_type} instruments with total notional balances of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, as part of its equity risk management strategy",
    "As of {month} {end_day}, {year} and {prev_year}, {company} ’s {swap_type} portfolio included outstanding contracts with aggregate notional values of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, to hedge share price fluctuations",
    # Reversed Templates (corresponding to hedge_position[16–31])
    "As of {month} {end_day}, {year}, {company} {verb} notional amounts totaling {currency_code}{notional} {money_unit} in {swap_type} to manage exposure to its common stock price volatility",
    "At year-end {year}, {company} {verb} aggregate notional values of {currency_code}{notional} {money_unit} in {swap_type} to hedge variability in equity-based compensation expenses",
    "As of {month} {year}, notional amounts of {currency_code}{notional} {money_unit} in outstanding {swap_type} remain in effect to mitigate equity price risk",
    "{company}’s derivative portfolio at {month} {end_day}, {year} consists of notional values of {currency_code}{notional} {money_unit} in {swap_type} to manage stock price fluctuations",
    "At the end of {year}, an aggregate notional value of {currency_code}{notional} {money_unit} in {swap_type} remain active in {company}’s derivative portfolio to hedge equity-related exposures",
    "As of {month} {end_day}, {year}, {company} {verb} notional amounts of {currency_code}{notional} {money_unit} in outstanding {swap_type} to offset share price volatility",
    "At year-end {year}, {company}’s derivative portfolio includes notional values of {currency_code}{notional} {money_unit} in {swap_type} to reduce variability in equity-linked compensation costs",
    "As of {month} {end_day}, {year}, notional amounts totaling {currency_code}{notional} {money_unit} in outstanding {swap_type} remain designated as economic hedges of equity price exposure",
    "{company} {verb} notional amounts of {currency_code}{notional} {money_unit} in {swap_type} at {month} {end_day}, {year}, to manage market risks tied to stock-based compensation",
    "At the close of {year}, aggregate notional values of {currency_code}{notional} {money_unit} in {swap_type} remain active to hedge equity market risk",
    "As of {month} {year}, {company}’s portfolio includes notional amounts totaling {currency_code}{notional} {money_unit} in {swap_type} to manage equity price movements",
    "{company}’s derivative instruments as of {month} {end_day}, {year}, include total notional amounts of {currency_code}{notional} {money_unit} in {swap_type} to hedge equity-based compensation obligations",
    "{company}’s notional balance of {currency_code}{old_notional} {money_unit} in {swap_type} contracted in {old_year} remains outstanding as of {year}, scheduled to mature in {future_year}, to hedge equity price changes",
    "To manage share price exposure, {company} {verb} notional amounts of {currency_code}{old_notional} {money_unit} in {swap_type} during {old_year}, with a stated maturity in {future_year}",
    "In {month} {old_year}, {company} {verb} notional amounts of {currency_code}{old_notional} {money_unit} in {swap_type}, set to expire in {month} {future_year}, to mitigate volatility in equity-based compensation",
    "As of {month} {year}, {company} {verb} notional totals of {currency_code}{old_notional} {money_unit} in {swap_type} initiated in {old_year}, expiring in {future_year}, to manage equity valuation risks",
    # Two-Year Disclosures with Prior-Year Outstandings (corresponding to hedge_position[32–39])
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} notional values of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, in {swap_type} to manage equity price volatility",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} aggregate notional amounts of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, in outstanding {swap_type} to hedge stock-based compensation costs",
    "At {month} {end_day}, {year} and {prev_year}, {company}’s derivative portfolio included total notional balances of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, in {swap_type} to manage equity-linked exposures",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} contracts totaling {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, in {swap_type} to mitigate volatility in equity compensation expenses",
    "At {month} {end_day}, {year} and {prev_year}, {company}’s outstanding notional amounts of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, were in {swap_type} to hedge equity price risk",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} active positions with notional values of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, in {swap_type} to manage share price fluctuations",
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} total notional balances of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, in {swap_type} as part of its equity risk management strategy",
    "As of {month} {end_day}, {year} and {prev_year}, {company}’s portfolio included aggregate notional values of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, in outstanding {swap_type} to hedge equity market risks",
    # Two-Year Disclosures with No Prior-Year Outstandings (corresponding to hedge_position[40–47])
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit} to hedge equity price exposure; no such instruments were outstanding at {prev_year}",
    "As of {month} {end_day}, {year}, {company} {verb} active {swap_type} with a notional value of {currency_code}{notional} {money_unit} to manage stock price volatility, while no comparable {swap_type} existed during {prev_year}",
    "At year-end {year}, {company}’s {swap_type} totaled {currency_code}{notional} {money_unit} to hedge equity-based compensation costs. There were no {swap_type} outstanding at the close of {prev_year}",
    "As of {month} {year}, {company} {verb} {swap_type} with notional amounts of {currency_code}{notional} {money_unit} to manage share price risk; there were no such {swap_type} reported in {prev_year}",
    "During {year}, {company} {verb} {swap_type} positions totaling {currency_code}{notional} {money_unit} to mitigate equity price volatility, with no comparable {swap_type} outstanding in {prev_year}",
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} to manage equity price exposure, with no {swap_type} outstanding during {prev_year}",
    "As of {month} {end_day}, {year}, {company} {verb} {swap_type} notional of {currency_code}{notional} {money_unit} to hedge stock-based compensation risks; no {swap_type} remained outstanding at the end of {prev_year}",
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit} to manage equity market risk. There were no outstanding {swap_type} balances at {prev_year}",
    # Three-Year Disclosures (corresponding to hedge_position[48–52])
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} {swap_type} with notional amounts of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, to hedge equity price volatility",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, to manage stock-based compensation costs",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} notional amounts of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, in {swap_type} to manage equity price exposure",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} notional exposures totaling {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, through {swap_type} to hedge equity-linked risks",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company}’s outstanding notional values of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, were held in {swap_type} to manage share price fluctuations",
    # Three-Year Disclosures with No Prior-Year Outstandings (corresponding to hedge_position[53–60])
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit} to hedge equity price exposure; no such instruments were outstanding at {prev_year} or {prev2_year}",
    "As of {month} {end_day}, {year}, {company} had active {swap_type} with a notional value of {currency_code}{notional} {money_unit} to manage stock price volatility, whereas no comparable {swap_type} existed during {prev_year} or {prev2_year}",
    "At year-end {year}, {company}’s {swap_type} totaled {currency_code}{notional} {money_unit} to hedge equity-based compensation costs. There were no {swap_type} outstanding at the close of {prev_year} or {prev2_year}",
    "As of {month} {year}, {company} maintained {swap_type} with notional amounts of {currency_code}{notional} {money_unit} to manage share price risk; there were no such {swap_type} reported in {prev_year} or {prev2_year}",
    "During {year}, {company} initiated {swap_type} positions totaling {currency_code}{notional} {money_unit} to mitigate equity price volatility, with no comparable {swap_type} outstanding in {prev_year} or {prev2_year}",
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} to manage equity price exposure, with no {swap_type} outstanding during {prev_year} or {prev2_year}",
    "As of {month} {end_day}, {year}, {company} {verb} {swap_type} notional of {currency_code}{notional} {money_unit} to hedge stock-based compensation risks; no {swap_type} remained outstanding at the end of {prev_year} or {prev2_year}",
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit} to manage equity market risk. There were no outstanding {swap_type} balances at {prev_year} or {prev2_year}",
]

hedge_transaction_templates = [
    "Under each {swap_type}, settlements occur quarterly for {currency_code}{notional} {money_unit}, with all gains and losses recognized upon payment",
    "Each {swap_type} settles annually for {currency_code}{notional} {money_unit}, with the resulting gains and losses fully recorded",
    "Quarterly payments of {currency_code}{notional} {money_unit} are required under each {swap_type}, and all gains and losses are realized as they occur",
    "For every {swap_type}, annual payments of {currency_code}{notional} {money_unit} are made, with all resulting gains and losses reflected in earnings",
    "Each {swap_type} involves quarterly settlements of {currency_code}{notional} {money_unit}, ensuring that all gains and losses are recognized at the time of settlement",
    "Annual settlements under each {swap_type} for {currency_code}{notional} {money_unit} result in full recognition of realized gains and losses",
    "Each {swap_type} calls for quarterly payments of {currency_code}{notional} {money_unit}, and all associated gains and losses are recorded when realized",
    "Each {swap_type} entails annual settlement of {currency_code}{notional} {money_unit}, with realized gains and losses recorded accordingly",
]


hedge_optional_templates = [
    "{company} also have {verb} {swap_type} to hedge forecasted revenue which were not part of a collar strategy. Such {swap_type} had a notional value of {currency_code}{notional1} {money_unit} and {currency_code}{notional2} {money_unit} as of {month} {end_day}, {year} and {month} {end_day}, {prev_year}, respectively",
    "{company} {verb} {swap_type} with notional values of {currency_code}{notional1} {money_unit} as of {month} {end_day}, {year} compared to {currency_code}{notional2} {money_unit} as of {month} {end_day}, {prev_year}",
    "As of {month} {end_day}, {year}, {company} {verb} {swap_type} with a notional value of {currency_code}{notional1} {money_unit}, compared to {currency_code}{notional2} {money_unit} in the prior year",
    "{company} {verb} {swap_type} to hedge forecasted transactions, with notional amounts decreasing from {currency_code}{notional2} {money_unit} as of {month} {end_day}, {prev_year} to {currency_code}{notional1} {money_unit} as of {month} {end_day}, {year}",
    "As of {month} {end_day}, {year}, {swap_type} with a notional value of {currency_code}{notional1} {money_unit} were in place, down from {currency_code}{notional2} {money_unit} as of {month} {end_day}, {prev_year}",
    "{company} {verb} {swap_type} to hedge revenue streams, with notional amounts of {currency_code}{notional1} {money_unit} at {month} {end_day}, {year} compared to {currency_code}{notional2} {money_unit} at {month} {end_day}, {prev_year}",
    "In {year}, {swap_type} with a notional value of {currency_code}{notional1} {money_unit} were active, compared to {currency_code}{notional2} {money_unit} in {prev_year}",
    "As of {month} {end_day}, {year}, {company} ’s {swap_type} portfolio had a notional value of {currency_code}{notional1} {money_unit}, reduced from {currency_code}{notional2} {money_unit} in {prev_year}",
    "{company} ’s {swap_type} for hedging forecasted revenue had notional values of {currency_code}{notional1} {money_unit} and {currency_code}{notional2} {money_unit} as of {month} {end_day}, {year} and {prev_year}, respectively",
    "At year-end {year}, {swap_type} with a notional amount of {currency_code}{notional1} {money_unit} were {verb} to hedge transactions, compared to {currency_code}{notional2} {money_unit} in {prev_year}",
    "{company} {verb} {swap_type} with a notional value of {currency_code}{notional1} {money_unit} as of {month} {end_day}, {year}, down from {currency_code}{notional2} {money_unit} as of {month} {end_day}, {prev_year}",
    "As of {month} {end_day}, {year}, {swap_type} to hedge forecasted revenue totaled {currency_code}{notional1} {money_unit}, compared to {currency_code}{notional2} {money_unit} in the prior year",
    "{company} ’s {swap_type} portfolio for revenue hedging had a notional value of {currency_code}{notional1} {money_unit} at {month} {end_day}, {year}, versus {currency_code}{notional2} {money_unit} at {month} {end_day}, {prev_year}",
    "In {year}, {company} {verb} {swap_type} with a notional amount of {currency_code}{notional1} {money_unit}, reduced from {currency_code}{notional2} {money_unit} in {prev_year}",
    "As of {month} {end_day}, {year}, {swap_type} {verb} for hedging had a notional value of {currency_code}{notional1} {money_unit}, compared to {currency_code}{notional2} {money_unit} as of {month} {end_day}, {prev_year}",
    "{company} ’s {swap_type} for transaction hedging totaled {currency_code}{notional1} {money_unit} at {month} {end_day}, {year}, down from {currency_code}{notional2} {money_unit} in {prev_year}",
    "At year-end {year}, {swap_type} with a notional value of {currency_code}{notional1} {money_unit} were active, compared to {currency_code}{notional2} {money_unit} at {month} {end_day}, {prev_year}",
    "{company} {verb} {swap_type} with notional amounts of {currency_code}{notional1} {money_unit} as of {month} {end_day}, {year}, versus {currency_code}{notional2} {money_unit} in the prior year",
    "As of {month} {end_day}, {year}, {company} ’s {swap_type} for revenue hedging had a notional value of {currency_code}{notional1} {money_unit}, down from {currency_code}{notional2} {money_unit} in {prev_year}",
    "{company} {verb} {swap_type} with a notional amount of {currency_code}{notional1} {money_unit} at {month} {end_day}, {year}, compared to {currency_code}{notional2} {money_unit} at {month} {end_day}, {prev_year}",
]
hedge_termination_templates = [
    "In the {quarter} quarter of {year}, {company} terminated all remaining {swap_type} agreements. {company} {verb} no outstanding derivative positions as of year-end {year}",
    "During the {quarter} quarter of {year}, all previously designated {swap_type} were settled or expired, resulting in no outstanding hedge positions as of {month} {end_day}, {year}",
    "{company} closed out all {swap_type} positions during the {quarter} quarter of {year}, with no derivative instruments remaining at period end",
    "All outstanding {swap_type} matured or were terminated in the {quarter} quarter of {year}, leaving no active derivative positions at year-end",
    "In {month} {year}, {company} settled all {swap_type} agreements, resulting in no active hedges as of {month} {end_day}, {year}",
    "During the {quarter} quarter of {year}, {company} closed out {swap_type} positions, leaving no derivative instruments outstanding",
    "In the {quarter} quarter of {year}, all {swap_type} were terminated, with no remaining hedge positions at year-end {year}",
    "{company} settled all outstanding {swap_type} in {month} {year}, resulting in no active derivative contracts at period end",
    "during the {quarter} quarter of {year}, {company} terminated its {swap_type} portfolio, leaving no outstanding hedges as of {month} {end_day}, {year}",
    "In {month} {year}, all {swap_type} agreements were closed out, with no derivative positions remaining at year-end",
    "{company} ended all {swap_type} contracts in the {quarter} quarter of {year}, resulting in no active hedges at period end",
    "During {year}, all outstanding {swap_type} were settled, leaving {company} with no derivative instruments at {month} {end_day}, {year}",
    "In the {quarter} quarter of {year}, {company} terminated {swap_type} agreements, with no hedges remaining at year-end",
    "All {swap_type} positions were closed out in {month} {year}, resulting in no outstanding derivative instruments",
    "During the {quarter} quarter of {year}, {company} settled all {swap_type}, leaving no active derivative positions",
    "In {month} {year}, {company} terminated all {swap_type} contracts, with no hedges in place at {month} {end_day}, {year}",
    "{company} closed out its {swap_type} portfolio in the {quarter} quarter of {year}, with no derivatives outstanding at year-end",
    "During {month} {year}, all {swap_type} were settled or expired, resulting in no active hedge positions",
    "In the {quarter} quarter of {year}, {company} ended all {swap_type} agreements, leaving no derivative contracts at period end",
    "All {swap_type} were terminated in {month} {year}, with no outstanding hedges as of {month} {end_day}, {year}",
    "As of {month} {end_day}, {year}, there were no such {swap_type} outstanding",
]

hedge_expiration_templates = [
    "All previously outstanding derivatives expired or were settled during {month} {year}, with no new positions {verb} during the year",
    "{company}'s derivative portfolio was fully liquidated in {month} {year} with no replacement hedges executed during the remainder of the fiscal year",
    "Outstanding hedge positions matured throughout {year}, and {company} elected not to enter into new derivative contracts during the period",
    "During {month} {year}, all existing {swap_type} reached maturity, and no new hedging instruments were established for the fiscal year",
    "in the {quarter} quarter of {year}, all {swap_type} contracts matured, with no new derivative positions initiated",
    "{company} ’s {swap_type} portfolio fully expired in {month} {year}, with no new hedges entered during the year",
    "During {year}, all outstanding {swap_type} reached maturity, and {company} did not execute new derivative contracts",
    "In {month} {year}, {company} ’s {swap_type} positions expired, with no replacement hedges established",
    "All {swap_type} matured in the {quarter} quarter of {year}, and no new derivative instruments were {verb} during the fiscal year",
    "During {month} {year}, {company} ’s derivative portfolio of {swap_type} was fully settled, with no new positions taken",
    "In {year}, all {swap_type} contracts reached maturity, and {company} chose not to initiate new hedges",
    "{company} ’s {swap_type} portfolio expired in {month} {year}, with no new derivative contracts executed",
    "during the {quarter} quarter of {year}, all outstanding {swap_type} matured, leaving no active hedges for the remainder of the year",
    "In {month} {year}, all {swap_type} reached their expiration date, with no new hedges established",
    "{company} ’s derivative instruments, including {swap_type}, fully matured in {year}, with no new positions entered",
    "During {month} {year}, all {swap_type} contracts expired, and {company} did not replace them with new hedges",
    "in the {quarter} quarter of {year}, {company} ’s {swap_type} portfolio reached maturity, with no new derivative contracts initiated",
    "All outstanding {swap_type} expired in {month} {year}, and no further hedging instruments were established",
    "During {year}, {company} ’s {swap_type} contracts fully matured, with no new hedges entered into",
    "In {month} {year}, all derivative positions, including {swap_type}, expired, with no new contracts {verb}",
]

hedge_quarterly_event_templates = [
    "In the {quarter} quarter of {year}, {company} settled {currency_code}{notional} {money_unit} in {swap_type} agreements, resulting in cash proceeds of {currency_code}{settlement} {money_unit}",
    "During the {quarter} quarter of {year}, {swap_type} with notional amounts of {currency_code}{notional} {money_unit} were terminated, generating {currency_code}{settlement} {money_unit} in settlement payments to {company} ",
    "{company} unwound {currency_code}{notional} {money_unit} notional of {swap_type} in the {quarter} quarter of {year}, recognizing {currency_code}{settlement} {money_unit} in cash settlements",
    "In the {quarter} quarter of {year}, {company} terminated {swap_type} totaling {currency_code}{notional} {money_unit} notional value, with net settlement receipts of {currency_code}{settlement} {money_unit}",
    "During {month} {year}, {company} settled {currency_code}{notional} {money_unit} in {swap_type}, resulting in {currency_code}{settlement} {money_unit} in cash proceeds",
    "In the {quarter} quarter of {year}, {swap_type} with a notional value of {currency_code}{notional} {money_unit} were unwound, generating {currency_code}{settlement} {money_unit} in settlement payments",
    "{company} terminated {currency_code}{notional} {money_unit} of {swap_type} in {month} {year}, with cash settlements of {currency_code}{settlement} {money_unit}",
    "During the {quarter} quarter of {year}, {company} closed out {currency_code}{notional} {money_unit} in {swap_type}, receiving {currency_code}{settlement} {money_unit} in net proceeds",
    "In {month} {year}, {company} settled {swap_type} with a notional amount of {currency_code}{notional} {money_unit}, resulting in {currency_code}{settlement} {money_unit} in cash receipts",
    "{company} unwound {swap_type} totaling {currency_code}{notional} {money_unit} in the {quarter} quarter of {year}, with {currency_code}{settlement} {money_unit} in settlement proceeds",
    "during the {quarter} quarter of {year}, {company} terminated {currency_code}{notional} {money_unit} in {swap_type} agreements, recognizing {currency_code}{settlement} {money_unit} in cash settlements",
    "In the {quarter} quarter of {year}, {swap_type} with a notional value of {currency_code}{notional} {money_unit} were settled, generating {currency_code}{settlement} {money_unit} in proceeds",
    "{company} closed out {currency_code}{notional} {money_unit} of {swap_type} in {month} {year}, with net settlement payments of {currency_code}{settlement} {money_unit}",
    "during the {quarter} quarter of {year}, {company} unwound {swap_type} totaling {currency_code}{notional} {money_unit}, receiving {currency_code}{settlement} {money_unit} in cash",
    "In {month} {year}, {company} settled {currency_code}{notional} {money_unit} in {swap_type}, resulting in {currency_code}{settlement} {money_unit} in net settlement proceeds",
    "{company} terminated {swap_type} with a notional amount of {currency_code}{notional} {money_unit} in the {quarter} quarter of {year}, with {currency_code}{settlement} {money_unit} in cash proceeds",
    "During {month} {year}, {swap_type} totaling {currency_code}{notional} {money_unit} were unwound, generating {currency_code}{settlement} {money_unit} in settlement receipts",
    "In the {quarter} quarter of {year}, {company} settled {currency_code}{notional} {money_unit} of {swap_type}, recognizing {currency_code}{settlement} {money_unit} in cash payments",
    "{company} closed out {swap_type} with a notional value of {currency_code}{notional} {money_unit} in the {quarter} quarter of {year}, with {currency_code}{settlement} {money_unit} in proceeds",
    "During {month} {year}, {company} terminated {currency_code}{notional} {money_unit} in {swap_type}, resulting in {currency_code}{settlement} {money_unit} in cash settlements",
]

hedge_dedesignation_templates = [
    "{company} de-designated all of our {swap_type} prior to {month} {end_day}, {year}",
    "{company} de-designated {swap_type} during {year}, removing hedge accounting treatment for these instruments",
    "All {swap_type} were de-designated as hedging instruments prior to year-end {year}",
    "During {year}, {company} discontinued hedge accounting for all outstanding {swap_type}",
    "{company} removed hedge designation from {swap_type} in the {quarter} quarter of {year}",
    "In {month} {year}, {company} de-designated all {swap_type}, discontinuing hedge accounting",
    "During the {quarter} quarter of {year}, all {swap_type} were removed from hedge accounting treatment",
    "{company} ceased hedge accounting for {swap_type} in {month} {year}",
    "In {year}, all {swap_type} were de-designated, with no hedge accounting applied at year-end",
    "{company} discontinued hedge designation for {swap_type} during the {quarter} quarter of {year}",
    "All {swap_type} were de-designated in {month} {year}, removing their hedge accounting status",
    "During {year}, {company} ended hedge accounting for its {swap_type} portfolio",
    "In the {quarter} quarter of {year}, {company} de-designated its {swap_type} contracts",
    "{company} removed hedge accounting from {swap_type} in {month} {year}",
    "during the {quarter} quarter of {year}, all {swap_type} lost their hedge designation status",
    "In {year}, {company} de-designated all {swap_type}, discontinuing hedge accounting treatment",
    "{company} ceased applying hedge accounting to {swap_type} in the {quarter} quarter of {year}",
    "All {swap_type} were de-designated prior to {month} {year}, ending their hedge accounting status",
    "During the {quarter} quarter of {year}, {company} removed hedge designation from all {swap_type}",
    "In {month} {year}, {company} discontinued hedge accounting for its {swap_type} portfolio",
]

hedge_context_templates = [
    "Our international operations are subject to government-imposed constraints, including laws on pricing, reimbursement, and access to our products",
    "Our global presence exposes {company} to foreign exchange rate volatility and regulatory risks across multiple jurisdictions",
    "{company} ’s global footprint subjects it to currency exchange risks and market-specific regulatory challenges",
    "{company} ’s operations in international markets expose it to foreign currency risks and regulatory constraints",
]


fx_ir_context_templates = [
    "{company}'s global operations expose it to various market risks, including fluctuations in foreign currency exchange rates and interest rates",
    "Our business operations in multiple countries result in exposure to foreign currency exchange rate movements and interest rate volatility",
    "{company} operates in numerous international markets, which subjects us to risks from changes in currency exchange rates and interest rates",
    "{company} ’s multinational operations are impacted by foreign currency movements and interest rate changes in various markets",
    "As a global entity, {company} faces exposure to exchange rate volatility and interest rate risks in its operations",
    "Operating in various jurisdictions, {company} are exposed to fluctuations in foreign currencies and interest rate movements",
    "Our global business model results in exposure to foreign exchange rate changes and interest rate fluctuations",
    "As a multinational company, {company} are subject to risks from currency movements and interest rate volatility across regions",
    "Our global operations are impacted by changes in foreign exchange rates and varying interest rate environments",
    "{company} faces currency exchange and interest rate risks due to its operations in multiple international markets",
]

fx_ir_mitigation_templates = [
    "{company} {verb} to reduce the impact of currency and interest rate movements through natural hedging strategies and the use of {swap_types}",
    "To mitigate these risks, {company} {verb} various hedging strategies including the use of derivative instruments",
    "{company} {verb} to minimize exposure to adverse movements in exchange rates and interest rates through both operational measures and financial derivatives",
    "{company} {verb} to limit currency and interest rate risks through operational adjustments and derivative contracts",
    "{company} {verb} to offset the impact of foreign exchange volatility using derivatives and operational hedging strategies",
    "To manage currency and interest rate risks, {company} {verb} a combination of {swap_types} and operational tactics",
    "{company} {verb} to protect against adverse currency and interest rate movements with derivatives and strategic operations",
    "{company} {verb} to stabilize financial results by using {swap_types} and operational hedging techniques",
    "{company} {verb} to reduce currency and interest rate exposure through strategic operations and {swap_types}",
    "{company} {verb} to manage foreign currency and interest rate risks through hedging and operational strategies",
    "{company} {verb} to offset currency and interest rate volatility with {swap_types} and other derivatives",
]
hedge_mitigation_templates = [
    "To mitigate market risks, {company} {verb} a combination of derivatives and operational risk management",
    "{company} {verb} to manage overall financial market exposures, including currency, interest rate, and other price risks, through a balanced hedging approach",
    "Our risk management strategy includes the selective use of derivative instruments to reduce exposure to various market risks",
    "{company} {verb} to minimize the effect of adverse financial market movements on earnings and cash flows through operational and financial measures",
    "{company} employs a risk management framework that combines natural hedging techniques with the use of derivative contracts",
    "To manage financial risks, {company} {verb} both centralized treasury operations and selective hedging strategies",
    "{company} {verb} to offset market risk exposures using a combination of operational practices and financial instruments",
    "Our market risk management approach is designed to reduce the volatility of earnings and cash flows caused by fluctuations in financial variables",
    "{company} {verb} to align its market risk exposure with its overall risk tolerance through the use of derivatives and other risk management practices",
    "To mitigate exposure to unpredictable financial markets, {company} {verb} a mix of natural hedging, diversification, and derivative usage",
]

hedge_may_use_templates = [
    "{company} {verb} {swap_type} to protect against unfavorable changes in market conditions",
    "{company} {verb} {swap_type} to offset risks associated with forecasted transactions",
    "{company} {verb} {swap_type} to reduce overall earnings volatility",
    "{company} {verb} {swap_type} to enhance stability of financial performance",
    "{company} {verb} {swap_type} to manage risk exposure across multiple markets",
    "To protect against unfavorable changes in market conditions, {company} {verb} {swap_type}",
    "To offset risks associated with forecasted transactions, {company} {verb} {swap_type}",
    "To reduce overall earnings volatility, {company} {verb} {swap_type}",
    "To enhance stability of financial performance, {company} {verb} {swap_type}",
    "To manage risk exposure across multiple markets, {company} {verb} {swap_type}",
]

hedge_policy_templates = [
    "Changes in the fair value of {swap_type} are recorded each period in current earnings or other comprehensive income (loss), depending on whether a derivative instrument is designated as part of a hedging transaction and, if it is, the type of hedging transaction",
    "{swap_type} are measured at fair value with gains and losses recorded in earnings or accumulated other comprehensive income based on hedge designation",
    "{company} accounts for {swap_type} at fair value, with changes in fair value recognized in either net income or other comprehensive income depending on the nature of the hedging relationship",
    "Fair value changes in {swap_type} are reflected in the financial statements through either the income statement or other comprehensive income, based on whether hedge accounting is applied",
    "{company} records {swap_type} at fair value, with changes recognized in earnings or OCI depending on hedge designation",
    "Changes in derivative fair values are recorded in net income or accumulated OCI, based on the type of hedge and its designation",
    "{swap_type} are accounted for at fair value, with gains or losses recorded in earnings or other comprehensive income per hedge accounting rules",
    "{company} recognizes fair value changes of {swap_type} in either current earnings or OCI, depending on the hedging relationship",
    "{swap_type} are measured at fair value, with changes reflected in net income or accumulated OCI based on hedge designation",
    "Fair value adjustments for derivatives are recorded in earnings or OCI, depending on whether the instrument qualifies for hedge accounting",
    "{company} accounts for {swap_type} at fair value, recognizing changes in either the income statement or other comprehensive income",
    "Changes in the fair value of {swap_type} are recorded in earnings or OCI, based on the nature of the hedging relationship",
    "{swap_type} are valued at fair value, with gains and losses recognized in net income or OCI depending on hedge accounting treatment",
    "{company} records fair value changes in {swap_type} in either earnings or accumulated OCI, based on hedge designation",
    "Derivative fair value changes are recognized in the income statement or OCI, depending on the type of hedging relationship",
    "{company} accounts for {swap_type} at fair value, with changes recorded in earnings or OCI per applicable accounting standards",
    "Fair value changes in {swap_type} are reflected in net income or OCI, based on their hedge designation",
    "{swap_type} are measured at fair value, with changes recorded in earnings or other comprehensive income depending on hedge accounting",
    "{company} recognizes derivative fair value changes in either net income or OCI, based on the hedging relationship",
    "Changes in derivative fair values are recorded in current earnings or OCI, depending on the hedge type and accounting treatment",
    "All {swap_type}, other than those that satisfy specific exceptions, are recorded at fair value. {company} record changes in the fair value of our derivative positions based on the value for which the derivative instrument could be exchanged between willing parties",
    "If market quotes are not available to estimate fair value, management’s best estimate of fair value is based on the quoted market price of {swap_type} with similar characteristics or determined through industry-standard valuation techniques",
    "{company} value our {swap_type} using observable inputs including interest rate curves, risk adjusted discount rates, credit spreads and other relevant data",
    "Gains and losses on {swap_type} are recognized currently in earnings",
    "The ultimate fair value of our {swap_type} is uncertain, and {company} believe that it is reasonably possible that a change in the estimated fair value could occur in the near future",
    "The accounting for the changes in the fair value of the {swap_type} depends on the intended use of the {swap_type} and the resulting designation",
    "For a {swap_type} that does not qualify as a {hedge_type} hedge, the change in {hedge_type} is recognized currently in net income",
    "Based upon certain factors, including a review of the {swap_type} for {company}'s counterparties, {company} determined its counterparty credit risk to be immaterial",
    "Based upon certain factors, including a review of the {swap_type} for {company}'s counterparties, {company} determined its counterparty credit risk to be material",
]

hedge_documentation_templates = [
    "For a derivative to qualify as a hedge at inception and throughout the hedged period, {company} formally document the nature and relationships between the hedging instruments and hedged item",
    "For a derivative designated as a {hedge_type} hedge, the gain or loss is recognized in earnings in the period of change together with the offsetting loss or gain on the risk being hedged",
    "{company} maintains formal documentation of all hedging relationships, including the risk management objective and strategy for undertaking the hedge",
    "Hedge accounting requires formal documentation at inception describing the hedging relationship and {company}'s risk management objectives",
    "{company} document our hedging relationships and risk management strategies at inception in accordance with applicable accounting standards",
    "{company} prepares formal documentation for all hedges, detailing the hedging instrument, hedged item, and risk management strategy",
    "At hedge inception, {company} document the relationship between the derivative and the hedged item, including the risk management objective",
    "{company} maintains detailed documentation of hedging relationships to comply with hedge accounting requirements",
    "{company} formally document all hedging relationships at inception, including the strategy and objectives for risk management",
    "Hedge documentation includes the risk management objective, hedging instrument, and hedged item, prepared at inception",
    "{company} records formal documentation for hedges, outlining the relationship and risk management strategy",
    "{company} document the hedging relationship and risk management objectives at the start of each hedge in line with accounting standards",
    "{company} maintains documentation for all derivative hedges, including the hedged item and risk management strategy",
    "Formal documentation of hedging relationships is prepared at inception to support hedge accounting treatment",
    "{company} document the nature of hedging relationships and risk management objectives at the outset of each hedge",
    "{company} ensures formal documentation of all hedges, including the hedged item and risk management strategy",
    "Hedge accounting documentation includes the hedging instrument, hedged item, and risk management objectives at inception",
    "{company} prepare formal documentation for all hedging relationships to meet accounting standard requirements",
    "{company} documents the risk management strategy and hedging relationships at the start of each hedge",
    "Formal hedge documentation is maintained, detailing the hedged item, hedging instrument, and risk management objectives",
    "{company} document all hedging relationships at inception, including the risk management strategy and hedge objectives",
]

hedge_effectiveness_templates = [
    "{company} {verb}, both at inception and on an on-going basis, whether the {swap_type} that are utilized in {hedge_type} hedging transactions are highly effective in offsetting the {metric} of hedged items",
    "{company} {verb} hedge effectiveness {frequency} to ensure derivatives continue to meet the criteria for hedge accounting",
    "Hedge effectiveness is {verb} {frequency} using {method} in accordance with {standard}",
    "{company} {verb} {frequency} assessments of hedge effectiveness to determine whether hedging relationships remain highly effective",
    "{company} {verb} hedge effectiveness {frequency} in accordance with {standard}",
    "Hedge effectiveness is {verb} {frequency} to confirm that {swap_type} remain highly effective in offsetting {metric}",
    "{company} {verb} hedge effectiveness {frequency} using {method} to ensure compliance with {standard}",
    "{company} {verb} {frequency} tests of hedge effectiveness for {swap_type} to offset changes in {metric}",
    "Hedge effectiveness is {verb} {frequency} to verify that derivatives qualify for hedge accounting under {standard}",
    "{company} evaluate {swap_type} effectiveness {frequency} to ensure they offset {metric} as intended",
    "{company} {verb} effectiveness of {swap_type} {frequency} using {method} per {standard}",
    "Hedge effectiveness for {swap_type} is {verb} {frequency} to confirm alignment with {metric}",
    "{company} {verb} {frequency} hedge effectiveness tests using {method} to comply with {standard}",
    "{company} {verb} {swap_type} {frequency} to ensure they effectively hedge {metric}",
    "Hedge effectiveness is {verb} {frequency} for {swap_type} to meet {standard} requirements",
    "{company} {verb} the effectiveness of {swap_type} {frequency} to offset changes in {metric} per {standard}",
    "{company} {verb} {frequency} assessments of {swap_type} effectiveness using {method}",
    "Hedge effectiveness is {verb} {frequency} to ensure {swap_type} offset {metric} as required",
    "{company} {verb} hedge effectiveness {frequency} for {swap_type} in accordance with {standard}",
    "{company} {verb} {swap_type} effectiveness {frequency} to confirm compliance with {standard}",
    "Each {swap_type} guarantees a return equal to the actual return, and as such, effectively acts as a hedge",
]
hedge_ineffectiveness_templates = [
    "{company} assess hedge ineffectiveness {frequency} and record the gain or loss related to the ineffective portion of derivative instruments, if any, to current earnings",
    "Any hedge ineffectiveness is recognized immediately in earnings in the period identified",
    "Ineffectiveness, if present, is measured {frequency} and recorded in the consolidated statements of operations",
    "{company} recognizes any ineffective portion of hedging instruments in current period earnings",
    "Gains or losses from the ineffective portion of derivative instruments are recognized in earnings {frequency}",
    "{company} evaluates hedge effectiveness and records any ineffectiveness in the statement of operations for the relevant period",
    "Ineffective amounts arising from hedging relationships are reported in earnings as part of the assessment {frequency}",
    "{company} monitors hedge effectiveness and immediately recognizes any ineffectiveness in income",
    "Hedge ineffectiveness, when identified, is reflected in earnings for the reporting period in which it occurs",
    "The ineffective portion of designated hedges is calculated and recognized in current earnings {frequency}",
]

hedge_discontinuation_templates = [
    "If {company} determine that a forecasted transaction is no longer probable of occurring, {company} discontinue hedge accounting and any related unrealized gain or loss on the derivative instrument is recognized in current earnings",
    "Hedge accounting is discontinued if the hedged forecasted transaction is no longer expected to occur, with accumulated gains or losses reclassified to earnings",
    "When a hedged forecasted transaction becomes improbable, {company} dedesignates the hedging relationship and recognizes deferred gains or losses immediately",
    "If a forecasted transaction fails to occur, amounts previously deferred in other comprehensive income are reclassified to current period earnings",
    "{company} ceases hedge accounting for derivatives when the hedged item is no longer expected to occur, with any accumulated gains or losses recorded in earnings",
    "Deferred gains or losses on discontinued hedges are recognized immediately in the consolidated statements of operations",
    "Upon dedesignation of a hedge, the ineffective and deferred portions of derivative instruments are recorded in current period earnings",
    "Hedge discontinuation is applied when the underlying forecasted transaction is no longer probable, reclassifying previously deferred amounts to income",
    "If the hedged item does not materialize, accumulated OCI amounts for the hedge are transferred to current earnings",
    "{company} derecognizes hedge accounting when criteria are no longer met, and any associated gains or losses are recognized in the period of discontinuation",
]


hedge_types = [
    "cash flow",
    "fair value",
    "net investment",
]
hedge_metrics = [
    "changes in cash flows",
    "changes in fair value",
    "variability",
    "exposure",
]


hedge_mitigation_verbs = [
    "attempt",
    "seek",
    "pursue",
    "undertake",
]
hedge_may_mitigation_verbs = [
    "may attempt",
    "may seek",
    "may pursue",
    "may undertake",
]

hedge_use_verbs = [
    "entered into",
    "executed",
    "utilized",
    "employed",
    "used",
    "had",
    "reported",
    "maintained",
    "committed",
    "implemented",
    "applied",
    "engaged in",
    "pursued",
    "utilizes",
    "employs",
    "uses",
    "maintains",
    "has",
    "have",
    "applies",
    "reports",
]
hedge_may_use_verbs = [
    "may engage in",
    "may commit in",
    "may implement",
    "may enter into",
    "may utilize",
    "may employ",
    "may use",
    "may apply",
    "may have",
    "may pursue",
]

hedge_change_verbs = ["increase", "decrease", "affect", "impact"]
hedge_counterparty_templates = [
    "Most of the counterparties to the derivatives are major banks and {company} is monitoring the associated inherent credit risks",
    "{company} enters into derivative contracts with major financial institutions and monitors counterparty credit risk on an ongoing basis",
    "Derivative counterparties are limited to major banking institutions with strong credit ratings to minimize counterparty risk",
    "Credit risk from derivatives is mitigated by transacting only with highly-rated financial institution counterparties",
    "{company} manages counterparty credit exposure by diversifying its derivative contracts among multiple major banks",
]

hedge_no_trading_templates = [
    "{company} does not enter into derivative transactions for trading purposes",
    "{company}'s policy prohibits the use of derivatives for speculative or trading purposes",
    "Derivatives are {verb} solely for hedging and risk management, not for speculative trading",
    "{company} does not engage in derivative transactions for speculative purposes",
    "All derivative transactions are {verb} for hedging purposes and not for trading or speculation",
]

hedge_fv_position_templates = [
    'As of {month} {end_day}, {year}, the fair value of the {swap_type} was a {position_type} of {currency_code}{amount} {money_unit}, the opposite entry for {currency_code}{oci_amount} {money_unit} of which was {oci_action} to "Other comprehensive income" under the cost of hedging accounting treatment',
    'As of {month} {end_day}, {year}, the fair value of these {swap_type} represented a {position_type} of {currency_code}{amount} {money_unit}; the opposite entry was recognized in "Other comprehensive income", with the impact on financial income and expense being immaterial',
    "The fair value of {swap_type} as of {month} {end_day}, {year} was a {position_type} of {currency_code}{amount} {money_unit}, with {currency_code}{oci_amount} {money_unit} {oci_action} to other comprehensive income",
    "As of year-end {year}, outstanding {swap_type} had a fair value {position_type} of {currency_code}{amount} {money_unit}, the offsetting entry being recorded in accumulated other comprehensive income",
]
hedge_impact_templates = [
    "Fluctuations in market conditions {verb} the reported value of our financial instruments and operating results",
    "Changes in market prices {verb} {company}'s financial performance and net asset values",
    "Movements in market rates {verb} {company}'s cost structure and profitability",
    "Market volatility {verb} the reported value of derivative positions",
    "Shifts in market values {verb} the financial results of {company}'s operations",
    "Changes in market conditions {verb} forecasted cash flows and financial position",
    "Market fluctuations {verb} the valuation of financial instruments",
    "{company}'s exposure to market risks {verb} operating costs and financial statements",
    "Price changes in key markets {verb} the cost structure and margins",
    "Volatility in financial markets {verb} the reported value of positions",
]


hedge_standards = [
    "ASC 815",
    "applicable accounting guidance",
    "U.S. GAAP",
    "accounting standards",
    "ASU 2017-12",  # Targeted Improvements to Hedge Accounting
    "ASC 815",  # Derivatives and Hedging
    "Topic 815",  # Derivatives and Hedging
]
```

```{python}
derivative_template = {
    "IR_PLACEHOLDER": [
        "interest rate",
        "single currency basis",
        "pay-fixed, receive-floating interest rate",
        "pay-floating, receive-fixed interest rate",
        "forward starting interest rate",
        "Eurodollar",
        "SOFR",
        "LIBOR",
    ],
    "IR_STANDALONE": ["treasury rate lock agreement"],
    "IR_TYPES": [
        "swaps",
        "forward",
        "option",
        "forward contract",
        "agreement",
        "forward agreement",
        "swap agreement",
        "swap contract",
        "cap contract",
        "floor contract",
        "hedge agreement",
        "hedge contract",
        "future contract",
        "swaption",
        "cap",
        "floor",
        "collar",
        "future",
    ],
    "FX_STANDALONE": [
        "forward contract",
        "forward agreement",
        "forward rate agreement",
        "collar contract",
        "dollar call option",
    ],
    "FX_PLACEHOLDER": [
        "foreign exchange",
        "foreign currency",
        "foreign exchange currency",
        "currency",
        "forward currency",
        "forward foreign currency",
        "forward foreign exchange currency",
        "forward foreign exchange cross-currency",
        "cross-currency",
        "cross currency",
        "cross currency interest rate",
        "cross-currency interest rate",
        "foreign currency forward",
        "FX",
    ],
    "FX_TYPES": [
        "swap",
        "forward",
        "option",
        "future",
        "agreement",
        "contract",
        "cap",
        "floor",
        "call option",
        "put option",
        "put contract",
        "option contract",
        "futures contract",
        "collar",
        "collar agreement",
        "collar contract",
        "NDF",
    ],
    "CP_PLACEHOLDER": [
        "commodity price",
        "commodity-related",
    ],
    "CP_TYPES": [
        "swap",
        "forward",
        "option",
        "future",
        "agreement",
        "contract",
        "cap",
        "floor",
        "call option",
        "put option",
        "put contract",
        "option contract",
        "futures contract",
    ],
    "GEN_PLACEHOLDER": [
        "",
    ],
    "GEN_TYPES": [
        "equity swap",
        "swap",
        "future",
        "forward",
        "call option",
        "call contract",
        "put option",
        "put contract",
        "option contract",
        "forward contract",
        "futures contract",
        "swaption",
    ],
    "GEN_STANDALONE": [
        "purchased put option contracts",
        "collar strategies",
        "purchased call option contracts",
        "over-the-counter contract",
        "receive-equity return, pay-fixed equity swap",
        "receive-equity return, pay-floating equity swap",
        "equity collar",
        "total return swap",
    ],
}


# Create a final output
def expand_derivative_terms(placeholders, types, standalone):
    """
    Combine placeholders with types (if any) and add standalone terms.
    Returns a flat list of derivative keyword strings.
    """
    results = []
    for ph in placeholders:
        for t in types:
            results.append(f"{ph} {t}".strip())
    results.extend(standalone)
    return sorted(set(results))


derivative_keywords = {
    "ir": expand_derivative_terms(
        derivative_template["IR_PLACEHOLDER"],
        derivative_template["IR_TYPES"],
        derivative_template["IR_STANDALONE"],
    ),
    "fx": expand_derivative_terms(
        derivative_template["FX_PLACEHOLDER"],
        derivative_template["FX_TYPES"],
        derivative_template["FX_STANDALONE"],
    ),
    "cp": expand_derivative_terms(
        derivative_template["CP_PLACEHOLDER"], derivative_template["CP_TYPES"], []
    ),
    "gen": expand_derivative_terms(derivative_template["GEN_PLACEHOLDER"], derivative_template["GEN_TYPES"], derivative_template["GEN_STANDALONE"]),
}

```

## Commodities
```{python}
cp_strategy_templates = [
    "{company} {verb} {swap_type} to hedge anticipated changes in {commodity} prices, resulting in {currency_code}{amount} {money_unit} of unrealized gains/losses recorded in OCI",
    "During {month} {year}, {company} {verb} {swap_type} to stabilize {commodity} costs for forecasted production, with {currency_code}{amount} {money_unit} in deferred fair value adjustments",
    "{company} {verb} {swap_type} to manage {commodity} price risk on forecasted inventory, recognizing {currency_code}{amount} {money_unit} in mark-to-market gains/losses",
    "As part of its risk management program, {company} implemented {swap_type} to hedge {commodity} exposure, resulting in {currency_code}{amount} {money_unit} recorded in OCI",
    "{swap_type} were {verb} by {company} in {month} {year} to protect against adverse price movements in {commodity}, with {currency_code}{amount} {money_unit} of unrealized gains/losses",
    "In {month} {year}, {company} {verb} {swap_type} to offset {commodity} price volatility, recognizing {currency_code}{amount} {money_unit} in fair value adjustments",
    "{company} {verb} {swap_type} to hedge production cost exposure for {commodity}, resulting in {currency_code}{amount} {money_unit} recorded in other comprehensive income",
    "During the {quarter} quarter of {year}, {swap_type} were {verb} to manage {commodity} price risk, with {currency_code}{amount} {money_unit} of mark-to-market adjustments",
    "{company} {verb} {swap_type} to mitigate fluctuations in {commodity} prices, recording {currency_code}{amount} {money_unit} in OCI",
    "In {month} {year}, {swap_type} were designated as hedges for forecasted {commodity} sales, with {currency_code}{amount} {money_unit} of unrealized gains/losses deferred in equity",
    "{company} {verb} {swap_type} in {year} to secure {commodity} prices, recognizing {currency_code}{amount} {money_unit} in hedge-related gains/losses",
    "To manage {commodity} price exposure, {company} {verb} {swap_type} in {month} {year}, with {currency_code}{amount} {money_unit} in OCI adjustments",
    "In {quarter} {year}, {company} implemented {swap_type} to stabilize {cost_type}, resulting in {currency_code}{amount} {money_unit} of fair value changes",
    "{company}'s {swap_type} strategy for {commodity} in {month} {year} led to {currency_code}{amount} {money_unit} in deferred gains/losses in equity",
    "{swap_type} were {verb} by {company} to hedge {commodity} costs, with {currency_code}{amount} {money_unit} recorded as mark-to-market adjustments in {year}",
]

cp_position_template = [
    "As of {month} {end_day}, {year}, {company} {verb} {swap_type} with notional amounts totaling {currency_code}{notional} {money_unit} to hedge {commodity} price risk",
    "At year-end {year}, {company} {verb} {swap_type} outstanding with aggregate notional values of {currency_code}{notional} {money_unit} designated to manage {commodity} exposures",
    "{company}'s commodity derivative portfolio at {month} {end_day}, {year} consists of {swap_type} with combined notional values of {currency_code}{notional} {money_unit}",
    "As of {month} {year}, {swap_type} with notional amounts of {currency_code}{notional} {money_unit} remain active to hedge forecasted {commodity} purchases or sales",
    "At year-end {year}, {company} {verb} {swap_type} with a total notional value of {currency_code}{notional} {money_unit} to manage fluctuations in {commodity} prices",
    "{company} {verb} {swap_type} with a notional amount of {currency_code}{notional} {money_unit} at {month} {end_day}, {year}, designated for {commodity} risk management",
    "During {year}, {company} {verb} {swap_type} with a total notional value of {currency_code}{notional} {money_unit} to hedge volatility in {commodity} costs",
    "As of {month} {end_day}, {year}, outstanding {swap_type} totaling {currency_code}{notional} {money_unit} are {verb} to mitigate {commodity} price exposure",
    "Outstanding {swap_type} at year-end {year} effectively hedged volatility in {commodity} costs",
    "{company} ’s active {swap_type} at year-end {year} have a total notional value of {currency_code}{notional} {money_unit}, designated as hedges for {commodity} procurement",
    "On {month} {end_day}, {year}, {company} ’s {swap_type} portfolio includes notional amounts of {currency_code}{notional} {money_unit} to stabilize {commodity} costs",
    "As of {month} {year}, {company} {verb} {swap_type} with a notional value of {currency_code}{notional} {money_unit} to manage {commodity} price volatility",
    "{company} {verb} {swap_type} as of {month} {end_day}, {year}, with notional values of {currency_code}{notional} {money_unit} to hedge {commodity} exposures",
    "At {month} {year}, {company} ’s {swap_type} cover {currency_code}{notional} {money_unit} in notional value to mitigate risks from {commodity} price swings",
    "During {year}, {company} {verb} {swap_type} with a notional amount of {currency_code}{notional} {money_unit} to protect against {commodity} market fluctuations",
    "In {old_year}, {company} {verb} {swap_type} with a notional volume equivalent of {currency_code}{old_notional} {money_unit}, set to expire in {future_year}",
    "During {old_year}, {company} {verb} {swap_type} to manage {commodity} exposure, with a notional of {currency_code}{old_notional} {money_unit}, terminating in {future_year}",
    "{company} {verb} {swap_type} in {month} {old_year} to lock in pricing, covering {currency_code}{old_notional} {money_unit}, expiring in {month} {future_year}",
    "At year-end {year}, {company} {verb} {swap_type} initiated in {old_year}, with outstanding notional amounts of {currency_code}{old_notional} {money_unit}, maturing in {future_year}",
    "{swap_type} expires in {future_year}",
    # Reversed
    "As of {month} {end_day}, {year}, {company} {verb} {currency_code}{notional} {money_unit} in {swap_type}",
    "At year-end {year}, {company} {verb} {currency_code}{notional} {money_unit} of {swap_type} outstanding, designated to manage {commodity} exposures",
    "{company}'s commodity derivative portfolio at {month} {end_day}, {year} totals {currency_code}{notional} {money_unit} in {swap_type}",
    "As of {month} {year}, {currency_code}{notional} {money_unit} of {swap_type} remain active to hedge forecasted {commodity} purchases or sales",
    "At year-end {year}, {company} {verb} {currency_code}{notional} {money_unit} in {swap_type} to manage fluctuations in {commodity} prices",
    "{currency_code}{notional} {money_unit} in {swap_type} were {verb} by {company} at {month} {end_day}, {year}, designated for {commodity} risk management",
    "During {year}, {company} {verb} {currency_code}{notional} {money_unit} of {swap_type} to hedge volatility in {commodity} costs",
    "As of {month} {end_day}, {year}, {currency_code}{notional} {money_unit} in outstanding {swap_type} are {verb} to mitigate {commodity} price exposure",
    "At year-end {year}, {currency_code}{notional} {money_unit} in outstanding {swap_type} effectively hedged volatility in {commodity} costs",
    "At year-end {year}, {company} ’s active {swap_type} total {currency_code}{notional} {money_unit}, designated as hedges for {commodity} procurement",
    "On {month} {end_day}, {year}, {company} ’s {swap_type} portfolio represented {currency_code}{notional} {money_unit} in notional value to stabilize {commodity} costs",
    "As of {month} {year}, {company} {verb} {currency_code}{notional} {money_unit} in {swap_type} to manage {commodity} price volatility",
    "As of {month} {end_day}, {year}, {company} {verb} {currency_code}{notional} {money_unit} of {swap_type} to hedge {commodity} exposures",
    "At {month} {year}, {company} ’s {swap_type} cover {currency_code}{notional} {money_unit} in notional value to mitigate risks from {commodity} price swings",
    "During {year}, {company} {verb} {currency_code}{notional} {money_unit} of {swap_type} to protect against {commodity} market fluctuations",
    "In {old_year}, {company} {verb} {currency_code}{old_notional} {money_unit} in {swap_type}, set to expire in {future_year}",
    "During {old_year}, {company} {verb} {currency_code}{old_notional} {money_unit} of {swap_type} to manage {commodity} exposure, terminating in {future_year}",
    "In {month} {old_year}, {company} {verb} {currency_code}{old_notional} {money_unit} in {swap_type} to lock in pricing, expiring in {month} {future_year}",
    "At year-end {year}, {company} {verb} {currency_code}{old_notional} {money_unit} in {swap_type} initiated in {old_year}, maturing in {future_year}",
    # --- NEW TWO-YEAR DISCLOSURE ADDITIONS (with {month} and {end_day}) ---
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} {swap_type} with notional values of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, designated to hedge {commodity} price risk",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} {swap_type} contracts totaling {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, to manage {commodity} cost volatility",
    "At {month} {end_day}, {year} and {prev_year}, {company} ’s outstanding {swap_type} had aggregate notional amounts of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, used to hedge forecasted {commodity} purchases",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} {swap_type} positions with total notional amounts of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, mitigating exposure to {commodity} price fluctuations",
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} {swap_type} outstanding totaling {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, protecting against changes in {commodity} prices",
    "As of {month} {end_day}, {year} and {prev_year}, {company} ’s {swap_type} portfolio included notional balances of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, designated for hedging {commodity} exposures",
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} active {swap_type} contracts with notional values of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, to stabilize input costs",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} outstanding {swap_type} totaling {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, used to hedge {commodity} procurement risks",
    # Reversed
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit} in {swap_type}, respectively",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit} in {swap_type} contracts, respectively, to manage {commodity} cost volatility",
    "At {month} {end_day}, {year} and {prev_year}, {company} ’s outstanding positions totaled {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit} in {swap_type}, respectively, used to hedge forecasted {commodity} purchases",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} total notional amounts of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit} in {swap_type}, respectively, mitigating exposure to {commodity} price fluctuations",
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit} in outstanding {swap_type}, respectively, protecting against changes in {commodity} prices",
    "As of {month} {end_day}, {year} and {prev_year}, {company} ’s portfolio included {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit} in {swap_type}, respectively, designated for hedging {commodity} exposures",
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} active contracts totaling {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit} in {swap_type}, respectively, to stabilize input costs",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit} in outstanding {swap_type}, respectively, used to hedge {commodity} procurement risks",
    # --- TWO-YEAR DISCLOSURES WITH NO PRIOR-YEAR OUTSTANDINGS ---
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit}; no such instruments were outstanding at {prev_year}",
    "As of {month} {end_day}, {year}, {company} {verb} active {swap_type} with a notional value of {currency_code}{notional} {money_unit}, while no comparable {swap_type} existed during {prev_year}",
    "At year-end {year}, {company} ’s {swap_type} totaled {currency_code}{notional} {money_unit}. There were no {swap_type} outstanding at the close of {prev_year}",
    "As of {month} {year}, {company} {verb} {swap_type} with notional amounts of {currency_code}{notional} {money_unit}; there were no such {swap_type}  reported in {prev_year}",
    "During {year}, {company} {verb} {swap_type} positions totaling {currency_code}{notional} {money_unit}, with no comparable {swap_type}  outstanding in {prev_year}",
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} serving as {commodity} price hedges, with no {swap_type} outstanding during {prev_year}",
    "As of {month} {end_day}, {year}, {company} {verb} {swap_type} notional of {currency_code}{notional} {money_unit}; no {swap_type} remained outstanding at the end of {prev_year}",
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit}. There were no outstanding {swap_type} balances at {prev_year}",
    # --- NEW THREE-YEAR DISCLOSURE ADDITIONS ---
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} {swap_type} with notional amounts of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, designated to hedge {commodity} price risk",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, to manage volatility in {commodity} costs",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} ’s outstanding {swap_type} had aggregate notional amounts of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, used to hedge forecasted {commodity} purchases",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} {swap_type} positions with total notional amounts of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, mitigating exposure to {commodity} price fluctuations",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} {swap_type} outstanding totaling {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, protecting against {commodity} market volatility",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} ’s {swap_type} portfolio included notional balances of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, designated for hedging {commodity} exposures",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} active {swap_type} contracts with notional values of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, to stabilize {commodity} costs",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} outstanding {swap_type} totaling {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, to hedge {commodity} procurement risk",
    # Reversed
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit} in {swap_type}, respectively",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit} in {swap_type}, respectively, to manage volatility in {commodity} costs",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} ’s outstanding positions totaled {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit} in {swap_type}, respectively, used to hedge forecasted {commodity} purchases",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} total exposures of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit} in {swap_type}, respectively, mitigating exposure to {commodity} price fluctuations",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit} in outstanding {swap_type}, respectively, protecting against {commodity} market volatility",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} ’s portfolio included {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit} in {swap_type}, respectively, designated for hedging {commodity} exposures",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit} in active {swap_type} contracts, respectively, to stabilize {commodity} costs",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit} in outstanding {swap_type}, respectively, to hedge {commodity} procurement risk",
    # --- THREE-YEAR DISCLOSURES WITH NO PRIOR-YEAR OUTSTANDINGS ---
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit}; no such instruments were outstanding at {prev_year} or {prev2_year}",
    "As of {month} {end_day}, {year}, {company} {verb} active {swap_type} with a notional value of {currency_code}{notional} {money_unit}, while no comparable {swap_type} existed during {prev_year} or {prev2_year}",
    "At year-end {year}, {company} ’s {swap_type} totaled {currency_code}{notional} {money_unit}. There were no {swap_type} outstanding at the close of {prev_year} or {prev2_year}",
    "As of {month} {year}, {company} {verb} {swap_type} with notional amounts of {currency_code}{notional} {money_unit}; there were no such {swap_type} reported in {prev_year} or {prev2_year}",
    "During {year}, {company} {verb} {swap_type} positions totaling {currency_code}{notional} {money_unit}, with no comparable {swap_type} outstanding in {prev_year} or {prev2_year}",
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} serving as {commodity} price hedges, with no {swap_type} outstanding during {prev_year} or {prev2_year}",
    "As of {month} {end_day}, {year}, {company} held {swap_type} notional of {currency_code}{notional} {money_unit}; no {swap_type} remained outstanding at the end of {prev_year} or {prev2_year}",
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit}. There were no outstanding {swap_type} balances at {prev_year} or {prev2_year}",
]


cp_context_templates = [
    "{company} {verb} {swap_types} and derivatives to manage price exposure to {commodity}",
    "Changes in {commodity} prices affect {company}'s cost of goods sold and gross margins",
    "To hedge {commodity} price fluctuations, {company} {verb} {swap_types} on key {commodity}",
    "Volatility in {commodity} markets can influence {company}'s procurement costs and operational results",
    "{company} is exposed to changes in energy, metals, and agricultural prices that may impact financial performance",
    "{company} {verb} {commodity} hedging strategies to stabilize input costs and protect profit margins",
    "Fluctuations in {commodity} prices may lead to adjustments in {company}'s pricing strategies",
    "{company}'s financial results are sensitive to global {commodity} market trends and supply chain disruptions",
    "To mitigate risks, {company} monitors {commodity} price indices and adjusts derivative positions accordingly",
    "{company} {verb} {swap_types} to lock in costs for critical {commodity} purchases and reduce volatility",
    "{company} {verb} {swap_types} to hedge exposure to {commodity} price volatility affecting {cost_type}",
    "{company} {verb} {swap_types} to manage the financial impact of fluctuations in {commodity} prices",
    "{swap_types} are {verb} to hedge anticipated {commodity} purchases totaling {volume} {volume_unit} over the next {months} months",
    "{company} {verb} {swap_types} to lock in {commodity} prices for {volume} {volume_unit} of forecasted consumption",
    "Commodity price risk related to {commodity} is managed through {swap_types} with notional volumes of {volume} {volume_unit}",
    "{company} {verb} {swap_types} to hedge {commodity} price exposure on production inputs",
    "{company} {verb} {swap_types} to stabilize {cost_type} by hedging approximately {pct}% of anticipated {commodity} requirements",
    "{swap_types} are designated as cash flow hedges of forecasted {commodity} purchases at fixed prices averaging {currency_code}{price} per {volume_unit}",
    "{company} {verb} {swap_types} to mitigate {commodity} price risks impacting {cost_type} for {volume} {volume_unit}",
    "To secure stable {cost_type}, {company} {verb} {swap_types} for {commodity} with maturities extending to {months} months",
    "{company}'s {swap_types} cover {pct}% of {commodity} needs, reducing exposure to price swings in {cost_type}",
    "In response to {commodity} market trends, {company} adjusts {swap_types} positions for {volume} {volume_unit} to manage {cost_type}",
    "{company} hedges {commodity} price risk through {swap_types}, targeting {pct}% of projected {cost_type} over {months} months",
]
cp_impact_templates = [
    "Fluctuations in {commodity} prices {verb} the reported cost of goods sold and operating margins",
    "Changes in {commodity} prices {verb} {company}'s financial performance and net asset values",
    "Movements in {commodity} prices {verb} {company}'s cost structure and profitability",
    "{commodity} price volatility {verb} the reported value of inventory and derivative positions",
    "Shifts in {commodity} values {verb} the financial results of {company}'s operations",
    "Changes in {commodity} prices {verb} forecasted revenue and cash flow from operations",
    "{commodity} fluctuations {verb} the valuation of inventory and derivative hedges",
    "{company}'s exposure to {commodity} prices {verb} operating costs and financial statements",
    "Price changes in key commodities {verb} the cost of {cost_type} and gross margins",
    "Price changes in key commodities such as {commodity} {verb} the cost of {cost_type} and gross margins",
    "{company} purchase the majority of our {commodity} at prevailing prices, and seek to manage market risk through execution of a documented hedging strategy and other means",
    "{company} have market sensitive instruments in the form of fixed-rate debt instruments and financial derivative instruments {verb} to hedge our exposure to {commodity} price increases",
    "Volatility in {commodity} markets {verb} the translated value of procurement and derivative positions",
    "Sudden {commodity} price swings {verb} {company}'s production costs and earnings stability",
    "{commodity} market trends {verb} the valuation of {company}'s commodity-linked assets",
    "Price volatility in {commodity} {verb} {company}'s cash flow projections and budgeting",
    "Changes in {commodity} prices {verb} the cost of {cost_type} and overall profitability",
    "{company}'s exposure to {commodity} market shifts {verb} reported earnings and shareholder equity",
]

# Commodity Hedge Templates
cp_may_use_templates = [
    "{company} {verb} {swap_types} to manage the volatility of {commodity} prices",
    "{company} {verb} {swap_types} to reduce the risk of fluctuations in {commodity} costs",
    "{company} {verb} {swap_types} to stabilize operating costs tied to {commodity} inputs",
    "{company} {verb} {swap_types} to protect margins from unexpected {commodity} price movements",
    "{company} {verb} {swap_types} to lock in pricing for forecasted {commodity} purchases",
    "To manage the volatility of {commodity} prices, {company} {verb} {swap_types}",
    "To reduce the risk of fluctuations in {commodity} costs, {company} {verb} {swap_types}",
    "To stabilize operating costs tied to {commodity} inputs, {company} {verb} {swap_types}",
    "To protect margins from unexpected {commodity} price movements, {company} {verb} {swap_types}",
    "To lock in pricing for forecasted {commodity} purchases, {company} {verb} {swap_types}",
]

commodities = [
    "crude oil",
    "natural gas",
    "electricity",
    "aluminum",
    "copper",
    "steel",
    "corn",
    "soybeans",
    "grain",
    "metals",
    "titanium",
    "fuel",
    "diesel fuel",
    "gasoline",
    "raw materials",
    "commodity",
    "energy",
    "resin",
    "chemicals",
    "lumber",
]
cost_types = [
    "input costs",
    "energy costs",
    "fuel costs",
    "raw material costs",
    "manufacturing costs",
    "mining costs",
    "extraction costs",
    "transportation costs",
    "storage costs",
    "commodity costs",
    "production costs",
    "lumber costs",
]
```

## Foreign Exchange
```{python}

fx_strategy_templates = [
    "{company} {verb} {swap_type} as part of a collar strategy to limit exposure to foreign currency fluctuations within a defined range",
    "Collar strategies utilizing {swap_type} were implemented to provide downside protection while capping upside exposure to currency movements",
    "{company} established collar positions through {swap_type} to manage foreign exchange risk on forecasted transactions",
    "As part of its risk management program, {company} {verb} collar strategies combining {swap_type} to hedge currency exposure",
    "In {month} {year}, {company} implemented {swap_type} within a collar strategy to limit foreign currency risk",
    "{company} {verb} {swap_type} in a collar structure to manage exposure to currency fluctuations",
    "Collar strategies with {swap_type} were {verb} to hedge foreign exchange risk on international transactions",
    "{company} {verb} {swap_type} as part of a collar to cap currency exposure while retaining some upside potential",
    "in the {quarter} quarter of {year}, {swap_type} were {verb} in a collar strategy to mitigate foreign currency volatility",
    "{company} {verb} collar positions with {swap_type} to stabilize foreign exchange impacts",
    "{swap_type} were {verb} in a collar strategy to limit currency risk on forecasted revenue",
    "{company} established {swap_type} within a collar framework to manage foreign exchange exposure",
    "Collar strategies involving {swap_type} were {verb} to hedge currency fluctuations in {year}",
    "{company} {verb} {swap_type} in a collar structure to protect against adverse currency movements",
    "In {month} {year}, {swap_type} were {verb} as part of a collar to manage currency risk",
    "{swap_type} within a collar strategy were {verb} to limit exposure to foreign exchange volatility",
    "{company} {verb} collar positions with {swap_type} to hedge currency risk on international contracts",
    "in the {quarter} quarter of {year}, {company} {verb} {swap_type} as part of a collar to manage forex exposure",
    "Collar strategies with {swap_type} were {verb} to stabilize currency impacts on forecasted transactions",
    "{company} {verb} {swap_type} in a collar framework to cap foreign exchange risk while retaining flexibility",
    "{company} {verb} {swap_type} to manage exposures to changes in foreign exchange rates for anticipated intercompany purchases by those subsidiaries whose functional currencies are not the {major_currency}",
]

fx_context_templates = [
    "As a multinational corporation, {company} face exposure to changes in foreign currency values that can affect our financial position and operating results",
    "Our business is subject to risks from foreign currency fluctuations due to operations in diverse international markets",
    "{company} ’s international activities result in exposure to currency exchange risks and government regulations",
    "{company} ’s international operations face risks from currency exchange rate volatility and local market conditions",
    "Foreign currency transaction exposures arising on external and internal trade flows are selectively hedged",
]

fx_position_template = [
    "In {month} {old_year}, {company} {verb} {swap_type} with notional amounts of {currency_code}{old_notional} {money_unit}, maturing in {month} {future_year}",
    "During {prev_year}, {company} {verb} {swap_type} to manage translation exposure, with an inception notional of {currency_code}{prev_notional} {money_unit}, set to expire in {future_year}",
    "{company} {verb} {swap_type} in {prev_year}, designed to hedge foreign borrowings with notional values of {currency_code}{prev_notional} {money_unit}, terminating in {future_year}",
    "As of {year}, {company} continues to hold {swap_type} contracted in {old_year}, with outstanding notional balances of {currency_code}{old_notional} {money_unit}, expiring in {future_year}",
    "Outstanding {swap_type} at year-end {year} hedge {company} ’s exposure to foreign currency fluctuations on cross-border transactions",
    "As of {month} {end_day}, {year}, {swap_type} with a notional amount of {currency_code}{notional} {money_unit} are designated as cash flow hedges of forecasted foreign currency revenues",
    "As of {month} {end_day}, {year}, {swap_type} with a notional amount of {currency_code}{notional} {money_unit} are designated as cash flow hedges due to changes in foreign exchange rates and are recorded at fair value",
    "At year-end {year}, {company} holds {swap_type} with a total notional value of {currency_code}{notional} {money_unit} to manage translation risk of foreign subsidiaries",
    "As of {month} {year}, {company} {verb} {swap_type} with a notional value of {currency_code}{notional} {money_unit}",
    "{company} ’s active {swap_type} at year-end {year} have a total notional value of {currency_code}{notional} {money_unit}, designated to hedge anticipated foreign currency purchases",
    "As of {month} {year}, {swap_type} with a notional amount of {currency_code}{notional} {money_unit} are in place to protect against volatility in foreign currency receivables",
    "At year-end {year}, {swap_type} with a notional value of {currency_code}{notional} {money_unit} are active to hedge forecasted foreign currency cash flows",
    "In {month} {old_year}, {company} {verb} {swap_type} with a notional amount of {currency_code}{old_notional} {money_unit}, scheduled to expire in {month} {future_year} to manage currency risk",
    "During {old_year}, {company} {verb} {swap_type} to hedge forecasted foreign currency expenditures, with an initial notional of {currency_code}{old_notional} {money_unit}, maturing in {future_year}",
    "As part of its treasury risk management program, {company} {verb} {swap_type} in {old_year}, which carry notional amounts of {currency_code}{old_notional} {money_unit} and terminate in {future_year}, mitigating exposure to foreign currency fluctuations",
    "In {month} {old_year}, {company} {verb} {swap_type} with a starting notional value of {currency_code}{old_notional} {money_unit}, reducing over time until expiration in {month} {future_year}, designated as hedges of currency-denominated obligations",
    "{swap_type} expires in {future_year}",
    # Reversed
    "In {month} {old_year}, {company} {verb} notional amounts of {currency_code}{old_notional} {money_unit} in {swap_type}, maturing in {month} {future_year}",
    "During {prev_year}, {company} {verb} notional exposures of {currency_code}{prev_notional} {money_unit} through {swap_type} to manage translation exposure, set to expire in {future_year}",
    "{company} {verb} notional values of {currency_code}{prev_notional} {money_unit} in {swap_type} during {prev_year}, designed to hedge foreign borrowings, terminating in {future_year}",
    "As of {year}, {company} continues to hold notional balances of {currency_code}{old_notional} {money_unit} in {swap_type} contracted in {old_year}, expiring in {future_year}",
    "Outstanding notional amounts of {currency_code}{notional} {money_unit} in {swap_type} at year-end {year} hedge {company}’s exposure to foreign currency fluctuations on cross-border transactions",
    "As of {month} {end_day}, {year}, notional amounts of {currency_code}{notional} {money_unit} in {swap_type} are designated as cash flow hedges of forecasted foreign currency revenues",
    "As of {month} {end_day}, {year}, notional amounts of {currency_code}{notional} {money_unit} in {swap_type} are designated as cash flow hedges due to changes in foreign exchange rates and are recorded at fair value",
    "At year-end {year}, {company} holds notional values of {currency_code}{notional} {money_unit} in {swap_type}",
    "As of {month} {year}, {company}’s outstanding notional amounts of {currency_code}{notional} {money_unit} in {swap_type} hedge intercompany loans denominated in foreign currencies",
    "{company}’s has active notional positions of {currency_code}{notional} {money_unit} in {swap_type} at year-end {year}",
    "As of {month} {year}, notional amounts of {currency_code}{notional} {money_unit} in {swap_type} are in place to protect against volatility in foreign currency receivables",
    "At year-end {year}, notional values of {currency_code}{notional} {money_unit} in {swap_type} are active to hedge forecasted foreign currency cash flows",
    "In {month} {old_year}, {company} {verb} notional amounts of {currency_code}{old_notional} {money_unit} in {swap_type}, scheduled to expire in {month} {future_year} to manage currency risk",
    "During {old_year}, {company} {verb} initial notionals of {currency_code}{old_notional} {money_unit} in {swap_type} to hedge forecasted foreign currency expenditures, maturing in {future_year}",
    "As part of its treasury risk management program, {company} {verb} notional positions of {currency_code}{old_notional} {money_unit} in {swap_type} in {old_year}, terminating in {future_year} to mitigate exposure to foreign currency fluctuations",
    "In {month} {old_year}, {company} {verb} starting notional values of {currency_code}{old_notional} {money_unit} in {swap_type}, reducing over time until expiration in {month} {future_year}, designated as hedges of currency-denominated obligations",
    # --- NEW TWO-YEAR DISCLOSURE ADDITIONS ---
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, of {swap_type} outstanding to hedge foreign currency exposures",
    "As of {month} {end_day}, {year} and {prev_year}, {company} maintained {swap_type} positions totaling {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, designated as cash flow hedges of forecasted transactions",
    "At {month} {end_day}, {year} and {prev_year}, {company} ’s outstanding {swap_type} had notional values of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, used to hedge foreign exchange exposures",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} {swap_type} contracts with notional amounts of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, protecting against currency fluctuations",
    "At {month} {end_day}, {year} and {prev_year}, {company} had {swap_type} outstanding with total notional amounts of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, to hedge intercompany transactions",
    "As of {month} {end_day}, {year} and {prev_year}, {company} ’s {swap_type} had fair values corresponding to notional exposures of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively",
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} active {swap_type} contracts totaling {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, hedging foreign-denominated cash flows",
    "As of {month} {end_day}, {year} and {prev_year}, {company} ’s {swap_type} portfolio consisted of contracts with notional balances of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, mitigating foreign exchange risk",
    # --- Reversed TWO-YEAR DISCLOSURE ADDITIONS ---
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} notional amounts of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, in {swap_type}",
    "As of {month} {end_day}, {year} and {prev_year}, {company} maintained notional positions totaling {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, through {swap_type} designated as cash flow hedges of forecasted transactions",
    "At {month} {end_day}, {year} and {prev_year}, {company}’s outstanding notional values of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, were held in {swap_type} used to hedge foreign exchange exposures",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} notional contracts of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, in {swap_type} protecting against currency fluctuations",
    "At {month} {end_day}, {year} and {prev_year}, {company} held total notional amounts of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, in {swap_type} outstanding to hedge intercompany transactions",
    "As of {month} {end_day}, {year} and {prev_year}, {company}’s notional exposures of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, were represented by {swap_type} at fair value",
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} active notional contracts totaling {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, in {swap_type} hedging foreign-denominated cash flows",
    "As of {month} {end_day}, {year} and {prev_year}, {company}’s {verb} {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, of {swap_type}",
    # --- TWO-YEAR DISCLOSURES WITH NO PRIOR-YEAR OUTSTANDINGS ---
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit}; no such instruments were outstanding at {prev_year}",
    "As of {month} {end_day}, {year}, {company} maintained active {swap_type} with a notional value of {currency_code}{notional} {money_unit}, while no comparable {swap_type} existed during {prev_year}",
    "At year-end {year}, {company} ’s {swap_type} totaled {currency_code}{notional} {money_unit}. There were no {swap_type} outstanding at the close of {prev_year}",
    "As of {month} {year}, {company} {verb} {swap_type} with notional amounts of {currency_code}{notional} {money_unit}; there were no such {swap_type}  reported in {prev_year}",
    "During {year}, {company} initiated {swap_type} positions totaling {currency_code}{notional} {money_unit}, with no comparable {swap_type}  outstanding in {prev_year}",
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} serving as cash flow hedges of forecasted currency transactions, with no {swap_type} outstanding during {prev_year}",
    "As of {month} {end_day}, {year}, {company} {verb} {swap_type} notional of {currency_code}{notional} {money_unit}; no {swap_type} remained outstanding at the end of {prev_year}",
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit}. There were no outstanding {swap_type} balances at {prev_year}",
    # --- NEW THREE-YEAR DISCLOSURE ADDITIONS ---
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} {swap_type} with notional amounts of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, designated as cash flow hedges of forecasted foreign currency transactions",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} maintained {swap_type} positions totaling {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} ’s outstanding {swap_type} had notional values of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, used to hedge foreign currency exposures",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} {swap_type} contracts with notional amounts of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, protecting against exchange rate movements",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} had {swap_type} outstanding with total notional balances of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, designated as hedges of intercompany exposures",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} ’s {swap_type} portfolio consisted of contracts with notional balances of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, mitigating foreign exchange risk",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} active {swap_type} positions totaling {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, hedging forecasted foreign-currency transactions",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} maintained {swap_type} contracts with notional amounts of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, designated to manage currency-denominated cash flows",
    # Reversed three-year
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} notional amounts of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, in {swap_type} designated as cash flow hedges of forecasted foreign currency transactions",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} maintained notional positions totaling {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, through {swap_type}",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company}’s outstanding notional values of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, were held in {swap_type} used to hedge foreign currency exposures",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} notional contracts of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, in {swap_type} protecting against exchange rate movements",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} held total notional balances of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, in {swap_type} designated as hedges of intercompany exposures",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company}’s notional balances of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, were represented by {swap_type} portfolios mitigating foreign exchange risk",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} active notional positions totaling {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, in {swap_type} hedging forecasted foreign-currency transactions",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} maintained notional exposures of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, in {swap_type} designated to manage currency-denominated cash flows",
    # --- THREE-YEAR DISCLOSURES WITH NO PRIOR-YEAR OUTSTANDINGS ---
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit}; no such instruments were outstanding at {prev_year} or {prev2_year}",
    "As of {month} {end_day}, {year}, {company} maintained active {swap_type} with a notional value of {currency_code}{notional} {money_unit}, while no comparable {swap_type} existed during {prev_year} or {prev2_year}",
    "At year-end {year}, {company} ’s {swap_type} totaled {currency_code}{notional} {money_unit}. There were no {swap_type} outstanding at the close of {prev_year} or {prev2_year}",
    "As of {month} {year}, {company} {verb} {swap_type} with notional amounts of {currency_code}{notional} {money_unit}; there were no such {swap_type}  reported in {prev_year} or {prev2_year}",
    "During {year}, {company} initiated {swap_type} positions totaling {currency_code}{notional} {money_unit}, with no comparable {swap_type} outstanding in {prev_year} or {prev2_year}",
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} serving as cash flow hedges of forecasted currency transactions, with no {swap_type} outstanding during {prev_year} or {prev2_year}",
    "As of {month} {end_day}, {year}, {company} {verb} {swap_type} notional of {currency_code}{notional} {money_unit}; no {swap_type} remained outstanding at the end of {prev_year} or {prev2_year}",
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit}. There were no outstanding {swap_type} balances at {prev_year} or {prev2_year}",
]

fx_impact_templates = [
    "Depending on the direction of change relative to {major_currency}, foreign currency values can {verb} the reported dollar value of our net assets and results of operations",
    "Fluctuations in exchange rates {verb} our reported revenues, expenses, assets, and liabilities when translated into {major_currency}",
    "Changes in foreign currency exchange rates relative to {major_currency} {verb} both our financial position and operating performance",
    "Currency movements {verb} the dollar value of our international cash flows and balance sheet items denominated in foreign currencies",
    "Foreign exchange rate fluctuations {verb} the reported value of our international assets and liabilities in {major_currency}",
    "Changes in currency exchange rates {verb} the financial results and net asset values reported in {major_currency}",
    "Movements in foreign currency values {verb} our consolidated financial statements when translated into {major_currency}",
    "Exchange rate volatility {verb} the reported dollar value of our international revenues and expenses",
    "Foreign currency fluctuations {verb} the translated value of our assets, liabilities, and operating results",
    "Changes in exchange rates relative to {major_currency} {verb} our financial position and reported earnings",
    "Currency exchange rate movements {verb} the dollar value of our international operations and balance sheet",
    "Fluctuations in foreign currencies {verb} our reported financial performance and net asset values",
    "Exchange rate changes {verb} {major_currency} value of our international cash flows and financial position",
    "Foreign currency movements {verb} the reported value of our global revenues and balance sheet items",
    "Changes in foreign exchange rates {verb} the dollar-denominated value of our international operations",
    "Currency fluctuations {verb} our consolidated financial results and net asset positions",
    "Movements in exchange rates {verb} the reported value of our international assets and operating results",
    "Foreign currency changes {verb} {major_currency} value of our global financial statements",
    "Exchange rate volatility {verb} the translated financial results of our international subsidiaries",
    "Changes in currency values {verb} the reported dollar value of our global operations and financial position",
]

fx_mitigation_templates = [
    "{company} selectively hedges foreign exchange exposures resulting from cross-border trade flows and intercompany transactions",
    "Transaction exposures from external trade and internal group transactions are managed through selective hedging programs",
    "{company} hedges foreign currency transaction risk arising from both third-party and intercompany commercial activities",
    "{company} {verb} to reduce foreign currency transaction exposure by matching currency inflows and outflows at the subsidiary level",
    "To mitigate transaction risk, {company} {verb} natural hedging strategies by matching local currency revenues with local currency costs",
    "{company}'s objective is to minimise the exposure of overseas operating subsidiaries to transaction risk by matching local currency income with local currency costs where possible",
    "{company}'s objective is to minimize transaction risk exposure by aligning local currency revenues with local currency expenses in its foreign operations",
    "{company}'s internal trading transactions are matched centrally and inter-company payment terms are managed to reduce foreign currency risk",
    "Intercompany transactions are centrally netted and payment terms are optimized to minimize foreign exchange exposure",
    "{company} operates a central matching system for internal trade flows to reduce gross foreign currency exposures",
    "{company} centrally manages intercompany trading positions and payment schedules to mitigate currency risk",
    "Where possible, {company} manages the cash surpluses or borrowing requirements of subsidiary companies centrally using {swap_types} to hedge future repayments back into the originating currency",
    "{company} centrally manages subsidiary liquidity and {swap_verb} {swap_types} to hedge foreign exchange exposure on intercompany funding arrangements",
    "Subsidiary cash positions are managed centrally with {swap_types} hedging the repatriation of funds to originating currencies",
    "{company} {swap_verb} {swap_types} to hedge foreign currency risk on centrally managed subsidiary funding and cash movements",
    "{company} may use {swap_types} to adjust the currency profile of its debt portfolio as needed",
    "{company} {swap_verb} {swap_types} to modify the currency composition of borrowings based on operational needs",
    "{swap_types} are {swap_verb} to convert borrowings into {major_currency} when strategically beneficial",
    "{swap_types} not designated as hedges, failing to be hedges or failing to continue as effective hedges are included in operations as {swap_types} gains or losses",
    "Discounts or premiums on {swap_types} designated and effective as hedges are amortized or accreted to expense using the straight-line method over the term of the related contract",
    "Discounts or premiums on {swap_types} not designated or effective as hedges are included in the mark to market adjustment and recognized in income as {swap_types} gains or losses",
    "{swap_types} are marked-to-market with the resulting gains or losses reflected in Accumulated other comprehensive income (loss)",
]


fx_currency_templates = [
    "The currency hedged items are usually denominated in the following main currencies: {currencies}",
    "{company}'s primary currency exposures include {currencies}",
    "Foreign currency risk primarily relates to exposures in {currencies}",
    "Our most significant currency exposures are to {currencies}",
    "{company} faces foreign exchange risk primarily from {currencies}",
    "In order to reduce foreign currency translation exposure from {currencies}, {company} seeks to denominate borrowings in the currencies of our principal assets and cash flows. These are primarily denominated in {currencies}",
    "To minimize translation exposure, {company} aligns the currency composition of its debt with the currencies of its operating assets, primarily {currencies}",
    "{company} reduces foreign currency translation risk by borrowing in the same currencies as its principal assets and cash flows, which are mainly {currencies}",
    "{company} matches debt currency denomination to the currencies of its key operating assets to mitigate translation exposure, focusing on {currencies}",
]

fx_alternative_management_templates = [
    "Depending on market conditions, foreign currency risk is also managed through the use of {swap_types}",
    "{company} {may_verb} foreign currency-denominated debt as a natural hedge against foreign currency exposure",
    "In certain circumstances, {company} {may_verb} foreign currency borrowings to offset translation exposure",
    "Foreign currency debt may be {use_verb} strategically to create natural hedging relationships",
    "{company} may issue debt in foreign currencies to reduce the impact of exchange rate fluctuations",
    "{company} may designate {swap_types} as a hedge of net investments in foreign subsidiaries",
    "To manage foreign exchange risk, {company} {may_verb} {swap_types} to align debt currency with underlying cash flow exposures",
    "{company} may borrow in currencies that match expected revenues to reduce volatility in reported earnings",
    "Foreign currency liabilities may be {use_verb} to provide a natural hedge against balance sheet exposures",
    "As part of its risk management strategy, {company} {may_verb} {swap_types} to fund operations with foreign-denominated debt to mitigate translation risk",
]

fx_generic_hedge_templates = [
    '{company} may choose to hedge against possible fluctuations in foreign subsidiaries net assets ("{hedge_type} hedge") and {verb} {swap_types} in the past in order to hedge such an exposure',
    "From time to time, {company} {verb} {swap_types} to hedge {hedge_type} in foreign operations",
    "{hedge_type} hedges protect the value of {company}'s investments in foreign subsidiaries from adverse currency movements",
    "{company} {verb} derivative instruments designated as {hedge_type} hedges to mitigate currency translation risk on foreign operations",
    "{swap_types} are designated as {hedge_type} hedges of the variability of the cash flows due to changes in foreign currency exchange rates",
]

fx_specific_hedge_templates = [
    "Includes forward purchases with a notional amount of {notional_currency} {notional_amount} {money_unit} expiring in {expiry_year}, designated as a fair value hedge of the exposure of an equivalent amount of {hedged_item} to fluctuations in the {currency_pair} spot rate",
    "{company} designated {swap_type} with a notional value of {notional_currency} {notional_amount} {money_unit} expiring in {expiry_year} as fair value hedges against exposure to {currency_pair} exchange rate movements on {hedged_item}",
    "Forward contracts totaling {notional_currency} {notional_amount} {money_unit} and expiring in {expiry_year} were designated as hedges of {notional_currency} {notional_amount} {money_unit} of {hedged_item} against {currency_pair} fluctuations",
    "{swap_type} with notional amounts of {notional_currency} {notional_amount} {money_unit} maturing in {expiry_year} hedge the {currency_pair} exposure on {hedged_item}",
]

fx_cash_pooling_templates = [
    "{company} also operates cash pooling arrangements to manage the surplus cash and short-term liquidity needs of foreign subsidiaries located outside {major_currency} zone",
    "{company} operates cash pooling arrangements to optimize liquidity management across foreign subsidiaries and reduce external borrowing costs",
    "Cash pooling structures are {verb} to centralize cash management and provide efficient funding to international operations",
    "{company} {verb} centralized cash pooling facilities to manage working capital needs of subsidiaries in various currencies",
]

# Foreign Exchange (foreign exchange) Debt Optimization Templates
fx_debt_optimization_templates = [
    "{company} {verb} {swap_types} to adjust the currency composition of its debt portfolio, managing exposure to {currency_code} fluctuations",
    "To hedge foreign exchange risk, {company} {verb} {swap_types} to convert borrowings from {currency_code} into its functional currency",
    "{company} {verb} {swap_types} to manage foreign exchange exposure on international debt, mitigating translation and transaction risk",
    "Foreign currency borrowings are optimized using {swap_type} to reduce volatility from {currency_code} exchange rate movements",
    "To manage currency risk, {company} {verb} {swap_types} to modify the currency mix of its debt obligations",
    "{company} {verb} {swap_types} to convert debt from {currency_code} into other currencies as part of its foreign exchange risk management strategy",
    "{company} {verb} {swap_types} to hedge foreign currency exposure on its international debt portfolio",
    "To stabilize the currency profile of debt, {company} {verb} {swap_types} converting obligations into {currency_code} where beneficial",
    "{company} manages foreign exchange risk on long-term borrowings by using {swap_type} to adjust the currency allocation",
    "To reduce foreign exchange volatility, {company} {verb} {swap_types} to optimize the composition of multi-currency debt",
]

# Foreign Exchange Hedge Templates
fx_may_use_templates = [
    "{company} {verb} {swap_types} to mitigate exposure to foreign currency movements",
    "{company} {verb} {swap_types} to manage risks related to forecasted foreign transactions",
    "{company} {verb} {swap_types} to offset volatility from translating foreign subsidiaries’ results",
    "{company} {verb} {swap_types} to reduce the impact of exchange rate fluctuations on cash flows",
    "{company} {verb} {swap_types} to protect against adverse changes in cross-border financing costs",
    "To mitigate exposure to foreign currency movements, {company} {verb} {swap_types}",
    "To manage risks related to forecasted foreign transactions, {company} {verb} {swap_types}",
    "To offset volatility from translating foreign subsidiaries’ results, {company} {verb} {swap_types}",
    "To reduce the impact of exchange rate fluctuations on cash flows, {company} {verb} {swap_types}",
    "To protect against adverse changes in cross-border financing costs, {company} {verb} {swap_types}",
]
```

## Interest Rate
```{python}

ir_position_template = [
    "In {month} {year}, {swap_type} were {verb} and designated as hedges of the notes with a notional amount of {currency_code}{notional} {money_unit}, effectively converting portions of fixed-rate debt to floating rates",
    "During {month} {year}, {company} {verb} {swap_type} with an aggregate notional value of {currency_code}{notional} {money_unit} to modify the interest rate characteristics of outstanding senior notes",
    "{company} {verb} {swap_type} in {month} {year} with a total notional amount of {currency_code}{notional} {money_unit}, designated as fair value hedges of fixed-rate obligations",
    "In {month} {year}, {swap_type} totaling {currency_code}{notional} {money_unit} notional were designated as hedging instruments against changes in the fair value of fixed-rate debt",
    "{company} {verb} {swap_type} in {month} {year} with notional amounts aggregating {currency_code}{notional} {money_unit} to hedge interest rate exposure on a portion of its debt portfolio",
    "in the {quarter} quarter of {year}, {company} {verb} {swap_type} with a notional value of {currency_code}{notional} {money_unit} to convert fixed-rate senior notes to variable rates",
    "During {month} {year}, {swap_type} were {verb} with a total notional amount of {currency_code}{notional} {money_unit} to manage interest rate risk on long-term debt",
    "In {month} {year}, {company} designated {swap_type} with a notional amount of {currency_code}{notional} {money_unit} as fair value hedges for its outstanding bonds",
    "{company} initiated {swap_type} in {month} {year} with a notional value of {currency_code}{notional} {money_unit} to adjust the interest rate profile of its debt",
    "in the {quarter} quarter of {year}, {swap_type} totaling {currency_code}{notional} {money_unit} were entered to hedge changes in the fair value of fixed-rate liabilities",
    "During {month} {year}, {company} {verb} {swap_type} with a notional amount of {currency_code}{notional} {money_unit} to manage exposure to interest rate fluctuations",
    "In {month} {year}, {swap_type} with an aggregate notional value of {currency_code}{notional} {money_unit} were designated to hedge fixed-rate debt obligations",
    "{company} {verb} {swap_type} in the {quarter} quarter of {year} with a notional amount of {currency_code}{notional} {money_unit} to modify the interest rate structure of its senior notes",
    "In {month} {year}, {swap_type} were implemented with a total notional value of {currency_code}{notional} {money_unit} to hedge the fair value of outstanding debt",
    "During {year}, {company} {verb} {swap_type} with a notional amount of {currency_code}{notional} {money_unit} to convert portions of its fixed-rate debt to floating rates",
    "In {month} {year}, {swap_type} with a notional value of {currency_code}{notional} {money_unit} were designated as fair value hedges against changes in debt valuation",
    "{company} {verb} {swap_type} during the {quarter} quarter of {year} with a notional amount of {currency_code}{notional} {money_unit} to manage interest rate exposure on bonds",
    "In {month} {year}, {swap_type} totaling {currency_code}{notional} {money_unit} were {verb} to adjust the interest rate characteristics of long-term liabilities",
    "during the {quarter} quarter of {year}, {company} designated {swap_type} with a notional value of {currency_code}{notional} {money_unit} as hedges of fixed-rate note obligations",
    "In {month} {year}, {swap_type} were entered with a total notional amount of {currency_code}{notional} {money_unit} to mitigate interest rate risk on debt issuances",
    "Outstanding {swap_type} at year-end {year} effectively convert the hedged portion of debt to floating rates",
    "As of {month} {end_day}, {year}, {swap_type} with a notional amount of {currency_code}{notional} {money_unit} are designated as fair value hedges",
    "At year-end {year}, {company} holds {swap_type} with a total notional value of {currency_code}{notional} {money_unit} to manage debt-related interest rate risk",
    "As of {month} {year}, {company} ’s outstanding {swap_type} have a notional value of {currency_code}{notional} {money_unit}, hedging fixed-rate obligations",
    "{company} ’s active {swap_type} at year-end {year} have a total notional value of {currency_code}{notional} {money_unit}, designated as fair value hedges",
    "As of {month} {year}, {swap_type} with a notional amount of {currency_code}{notional} {money_unit} are in place to convert fixed-rate debt to floating rates",
    "At year-end {year}, {swap_type} with a notional value of {currency_code}{notional} {money_unit} are active to hedge fixed-rate debt obligations",
    "In {month} {old_year}, {company} {verb} {swap_type} with a notional amount of {currency_code}{old_notional} {money_unit}, scheduled to expire in {month} {future_year}",
    "During {old_year}, {company} {verb} {swap_type} to hedge debt obligations, with an initial notional of {currency_code}{old_notional} {money_unit}, maturing in {future_year}",
    "As part of its bond financing strategy, {company} {verb} {swap_type} in {old_year}, which carry notional amounts of {currency_code}{old_notional} {money_unit} and terminate in {future_year}",
    "In {month} {old_year}, {company} {verb} {swap_type} with a starting notional value of {currency_code}{old_notional} {money_unit}, declining annually until expiration in {month} {future_year}",
    "{swap_type} expires in {future_year}",
    # Reversed
    "At year-end {year}, {company} holds notional values of {currency_code}{notional} {money_unit} in {swap_type} to manage debt-related interest rate risk",
    "At year-end {year}, {company} held {currency_code}{notional} {money_unit} in {swap_type}",
    "As of {month} {year}, {company}’s outstanding notional amounts of {currency_code}{notional} {money_unit} in {swap_type} hedge fixed-rate obligations",
    "{company}’s active notional positions of {currency_code}{notional} {money_unit} in {swap_type} at year-end {year} are designated as fair value hedges",
    "As of {month} {year}, notional amounts of {currency_code}{notional} {money_unit} in {swap_type} are in place to convert fixed-rate debt to floating rates",
    "At year-end {year}, notional values of {currency_code}{notional} {money_unit} in {swap_type} are active",
    "In {month} {old_year}, {company} {verb} notional amounts of {currency_code}{old_notional} {money_unit} in {swap_type}, scheduled to expire in {month} {future_year}",
    "During {old_year}, {company} {verb} initial notionals of {currency_code}{old_notional} {money_unit} in {swap_type} to hedge debt obligations, maturing in {future_year}",
    "As part of its bond financing strategy, {company} {verb} notional positions of {currency_code}{old_notional} {money_unit} in {swap_type} in {old_year}, terminating in {future_year}",
    "In {month} {old_year}, {company} {verb} starting notional values of {currency_code}{old_notional} {money_unit} in {swap_type}, declining annually until expiration in {month} {future_year}",
    # --- NEW TWO-YEAR DISCLOSURE ADDITIONS (with {month} and {end_day}) ---
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} {swap_type} with notional amounts of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, designated as fair value hedges of fixed-rate debt",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, to convert fixed-rate obligations to floating rates",
    "At {month} {end_day}, {year} and {prev_year}, {company} ’s outstanding {swap_type} had notional values of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, to manage exposure to interest rate movements",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} active {swap_type} contracts with notional amounts of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, to hedge long-term debt",
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} {swap_type} outstanding with total notional balances of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, effectively converting portions of fixed-rate borrowings to floating",
    "As of {month} {end_day}, {year} and {prev_year}, {company} ’s {swap_type} portfolio consisted of contracts with notional values of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, designated as fair value hedges of debt instruments",
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} {swap_type} positions totaling {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, mitigating exposure to benchmark interest rate changes",
    "As of {month} {end_day}, {year} and {prev_year}, {company} ’s outstanding {swap_type} effectively converted portions of debt from fixed to floating, with notional amounts of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively",
    # Reversed
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} notional amounts of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, in {swap_type}",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} notional exposures totaling {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, through {swap_type} to convert fixed-rate obligations to floating rates",
    "At {month} {end_day}, {year} and {prev_year}, {company}’s outstanding notional values of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, were held in {swap_type} to manage exposure to interest rate movements",
    "As of {month} {end_day}, {year} and {prev_year}, {company} {verb} active notional contracts of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, in {swap_type} to hedge long-term debt",
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} total notional balances of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, in {swap_type} effectively converting portions of fixed-rate borrowings to floating",
    "As of {month} {end_day}, {year} and {prev_year}, {company}’s notional values of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, were represented by {swap_type} portfolios designated as fair value hedges of debt instruments",
    "At {month} {end_day}, {year} and {prev_year}, {company} {verb} notional positions totaling {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, in {swap_type} mitigating exposure to benchmark interest rate changes",
    "As of {month} {end_day}, {year} and {prev_year}, {company}’s notional exposures of {currency_code}{notional} {money_unit} and {currency_code}{prev_notional} {money_unit}, respectively, were held in {swap_type} effectively converting portions of debt from fixed to floating",
    # --- TWO-YEAR DISCLOSURES WITH NO PRIOR-YEAR OUTSTANDINGS ---
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit}; no such instruments were outstanding at {prev_year}",
    "As of {month} {end_day}, {year}, {company} {verb} active {swap_type} with a notional value of {currency_code}{notional} {money_unit}, while no comparable {swap_type} existed during {prev_year}",
    "At year-end {year}, {company} ’s {swap_type} totaled {currency_code}{notional} {money_unit}. There were no {swap_type} outstanding at the close of {prev_year}",
    "As of {month} {year}, {company} {verb} {swap_type} with notional amounts of {currency_code}{notional} {money_unit}; there were no such {swap_type} reported in {prev_year}",
    "During {year}, {company} {verb} {swap_type} positions totaling {currency_code}{notional} {money_unit}, with no comparable {swap_type} outstanding in {prev_year}",
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} serving as fair value hedges of fixed-rate debt, with no {swap_type} outstanding during {prev_year}",
    "As of {month} {end_day}, {year}, {company} {verb} {swap_type} notional of {currency_code}{notional} {money_unit}; no {swap_type} remained outstanding at the end of {prev_year}",
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit}. There were no outstanding {swap_type} balances at {prev_year}",
    # --- NEW THREE-YEAR DISCLOSURE ADDITIONS ---
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} {swap_type} with notional amounts of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, designated as fair value hedges of fixed-rate debt",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, to convert fixed-rate obligations to floating rates",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} ’s outstanding {swap_type} had notional values of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, managing exposure to interest rate fluctuations",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} active {swap_type} contracts with notional amounts of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, used to hedge long-term borrowings",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} {swap_type} outstanding with total notional balances of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, effectively converting portions of fixed-rate borrowings to floating",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} ’s {swap_type} portfolio consisted of contracts with notional values of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, designated as fair value hedges of debt instruments",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} {swap_type} positions totaling {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, mitigating exposure to benchmark interest rate changes",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} ’s outstanding {swap_type} effectively converted portions of debt from fixed to floating, with notional amounts of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively",
    # Reversed
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} notional amounts of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, in {swap_type}",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} notional exposures totaling {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, through {swap_type} to convert fixed-rate obligations to floating rates",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company}’s outstanding notional values of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, were held in {swap_type} to manage exposure to interest rate fluctuations",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} active notional contracts of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, in {swap_type} to hedge long-term borrowings",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} total notional balances of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, in {swap_type} effectively converting portions of fixed-rate borrowings to floating",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company}’s notional values of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, were represented by {swap_type} portfolios designated as fair value hedges of debt instruments",
    "At {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company} {verb} notional positions totaling {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, in {swap_type} mitigating exposure to benchmark interest rate changes",
    "As of {month} {end_day}, {year}, {prev_year}, and {prev2_year}, {company}’s notional exposures of {currency_code}{notional} {money_unit}, {currency_code}{prev_notional} {money_unit}, and {currency_code}{prev2_notional} {money_unit}, respectively, were held in {swap_type} effectively converting portions of debt from fixed to floating",
    # --- THREE-YEAR DISCLOSURES WITH NO PRIOR-YEAR OUTSTANDINGS ---
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit}; no such instruments were outstanding at {prev_year} or {prev2_year}",
    "As of {month} {end_day}, {year}, {company} had active {swap_type} with a notional value of {currency_code}{notional} {money_unit}, whereas no comparable {swap_type} existed during {prev_year} or {prev2_year}",
    "At year-end {year}, {company} ’s {swap_type} totaled {currency_code}{notional} {money_unit}. There were no {swap_type} outstanding at the close of {prev_year} or {prev2_year}",
    "As of {month} {year}, {company} maintained {swap_type} with notional amounts of {currency_code}{notional} {money_unit}; there were no such {swap_type} reported in {prev_year} or {prev2_year}",
    "During {year}, {company} initiated {swap_type} positions totaling {currency_code}{notional} {money_unit}, with no comparable {swap_type} outstanding in {prev_year} or {prev2_year}",
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} serving as fair value hedges of fixed-rate debt, with no {swap_type} outstanding during {prev_year} or {prev2_year}",
    "As of {month} {end_day}, {year}, {company} {verb} {swap_type} notional of {currency_code}{notional} {money_unit}; no {swap_type} remained outstanding at the end of {prev_year} or {prev2_year}",
    "At {month} {end_day}, {year}, {company} {verb} {swap_type} totaling {currency_code}{notional} {money_unit}. There were no outstanding {swap_type} balances at {prev_year} or {prev2_year}",
]

ir_optional_templates = [
    "In anticipation of issuing fixed-rate debt, {company} {verb} {swap_types} that are designated as {hedge_type} hedges to hedge against changes in interest rates that could impact expected future issuances of debt",
    "{company} {verb} {swap_types} designated as {hedge_type} hedges to lock in favorable interest rates prior to anticipated debt issuances",
    "To hedge interest rate exposure on forecasted debt offerings, {company} {verb} {swap_types} designated as {hedge_type} hedges",
    "{swap_types} are {verb} to mitigate the risk of rising interest rates on planned fixed-rate debt issuances",
    "{company} {verb} {swap_types} as {hedge_type} hedges to secure interest rates for future debt issuances",
    "In preparation for debt offerings, {company} may designate {swap_types} as {hedge_type} hedges to manage interest rate risk",
    "To protect against interest rate volatility, {company} {verb} {swap_types} for planned fixed-rate debt issuances",
    "{swap_types} are {verb} as {hedge_type} hedges to lock in rates for anticipated debt financings",
    "In anticipation of bond issuances, {swap_types} are designated as {hedge_type} hedges to stabilize future interest costs",
    "{company} {verb} {swap_types} to mitigate interest rate fluctuations on planned debt offerings",
    "{swap_types} are designated as {hedge_type} hedges to secure rates for future fixed-rate debt",
    "To manage interest rate exposure, {company} {verb} {swap_types} for anticipated debt issuances",
    "{company} {verb} {swap_types} as {hedge_type} hedges to lock in rates prior to debt financings",
    "{swap_types} are {verb} to hedge against rising interest rates for planned debt issuances",
    "In preparation for fixed-rate debt, {company} designates {swap_types} as {hedge_type} hedges",
    "{company} {verb} {swap_types} to stabilize interest rates for forecasted bond issuances",
    "{swap_types} are implemented as {hedge_type} hedges to manage risk on future debt offerings",
    "To secure favorable rates, {company} {verb} {swap_types} for anticipated fixed-rate debt",
    "{company} designates {swap_types} as {hedge_type} hedges to mitigate interest rate risk on planned financings",
    "{company} manages its cash flow interest rate risk by using {swap_types}, where at quarterly intervals the difference between fixed contract rates and floating rate interest amounts calculated by reference to the agreed notional principal amounts are exchanged",
    "{company} {verb} {swap_types} to manage cash flow interest rate exposure, with quarterly settlements based on the differential between fixed and floating rates on notional amounts",
    "Cash flow interest rate risk is managed through {swap_types} with quarterly net settlements calculated on agreed notional principal amounts",
    "{company} {verb} {swap_types} converting floating rate exposure to fixed rates, with quarterly exchange of payment differentials based on notional values",
]

ir_context_templates = [
    "{company}'s objectives in interest rate risk management are to limit the impact of interest rate changes on earnings and cash flows, and to lower overall borrowing costs",
    "To achieve its objectives, the {company} borrows at fixed rates when it believes it is in its best interests to do so, and may enter into derivative financial instruments, such as {swap_types}, in order to limit its exposure to interest rate fluctuations",
    "{company} utilize derivative financial instruments to manage our variable interest rate exposure over a medium- to long-term period",
    "{company} is exposed to interest rate risk associated with fluctuations in interest rates on our variable rate debt",
    "{company} recognize the gains and losses on our derivative instruments as an adjustment to interest expense in the period the hedged interest payment affects earnings",
    "{company} manage interest costs by using a mix of fixed- and floating-rate debt",
    "{company} {verb} derivative financial instruments to manage our variable interest rate exposure",
    "Variable rate obligations expose {company} to the risk of increased interest expense if short-term interest rates rise"
]
# Interest Rate (IR) Debt Optimization Templates
ir_debt_optimization_templates = [
    "{company} {verb} {swap_types} to optimize the interest rate profile of its debt portfolio, converting portions of fixed-rate debt to floating-rate instruments",
    "To manage borrowing costs, {company} {verb} {swap_types} to adjust the effective interest rate composition of outstanding debt",
    "{company} {verb} {swap_types} to reduce interest rate volatility on its debt obligations",
    "As part of its debt strategy, {company} {verb} {swap_types} to transform fixed-rate debt into variable-rate debt where appropriate",
    "To hedge against rising interest rates, {company} {verb} {swap_types} to modify the interest rate characteristics of its borrowings",
    "{company} {verb} {swap_types} to manage the interest rate exposure of its long-term debt portfolio",
    "{company} {verb} {swap_types} to convert portions of debt into instruments with more favorable interest rate terms",
    "{company} optimizes its debt by using {swap_types} to balance fixed and floating rate obligations",
    "To stabilize interest expense, {company} {verb} {swap_types} to its debt portfolio, managing cash flow risk",
    "{company} manages interest rate risk on forecasted debt issuances using {swap_types} to adjust the effective interest profile",
    "{company}'s objectives in interest rate risk management are to limit the negative impact of interest rates by using {swap_types}",
]

ir_may_use_templates = [
    "{company} {verb} {swap_types} to hedge against fluctuations in interest rates",
    "{company} {verb} {swap_types} to manage exposure to changes in benchmark interest rates",
    "{company} {verb} {swap_types} to reduce cash flow variability from interest-bearing debt",
    "{company} {verb} {swap_types} to stabilize the cost of borrowing",
    "{company} {verb} {swap_types} to protect against unfavorable changes in long-term debt obligations",
    "{company} {verb} {swap_types} to hedge interest rate risk on forecasted debt issuances",
    "To hedge against fluctuations in interest rates, {company} {verb} {swap_types}",
    "To manage exposure to changes in benchmark interest rates, {company} {verb} {swap_types}",
    "To reduce cash flow variability from interest-bearing debt, {company} {verb} {swap_types}",
    "To stabilize the cost of borrowing, {company} {verb} {swap_types}",
    "To protect against unfavorable changes in long-term debt obligations, {company} {verb} {swap_types}",
    "To hedge interest rate risk on forecasted debt issuances, {company} {verb} {swap_types}",
]

hedge_methods = [
    "regression analysis and dollar-offset methods",
    "quantitative analysis",
    "statistical methods",
    "the dollar-offset method",
    "prospective and retrospective testing",
]

# Position types and OCI actions
position_types = ["asset", "liability"]
oci_actions = ["credited", "debited"]

# Hedged items
hedged_items = [
    "intragroup current accounts",
    "bond issues",
    "outstanding debt",
    "intercompany loans",
    "senior notes",
    "commercial paper",
]
```

# Random Noise
```{python}

# Common SEC patterns
headers = [
    "FORM 10-K",
    "FORM 10-Q",
    "FORM 8-K",
    "PROSPECTUS",
    "Table of Contents",
    "UNITED STATES SECURITIES AND EXCHANGE COMMISSION",
]

# Table of Contents patterns with placeholders for page numbers
sec_toc_patterns = [
    "Item 1. Business {page}",
    "A. History and Development of {company} {page}",
    "B. Business Overview {page}",
    "C. Organizational Structure {page}",
    "Item 1A. Risk Factors {page}",
    "Item 1B. Unresolved Staff Comments {page}",
    "Item 2. Properties {page}",
    "Item 3. Legal Proceedings {page}",
    "Item 4. Submission of Matters to a Vote of Security Holders {page}",
    "Item 5. Market for Registrant's Common Equity, Related Stockholder Matters and Issuer Purchases of Equity Securities {page}",
    "A. Market Information {page}",
    "B. Holders {page}",
    "C. Dividends {page}",
    "D. Restrictions on Share Ownership by Non-Canadians {page}",
    "E. Exchange Controls {page}",
    "F. Taxation {page}",
    "G. Sale of Unregistered Securities {page}",
    "H. Purchases of Equity Securities by {company} and Affiliated Purchases {page}",
    "Item 6. Selected Financial Data {page}",
    "Item 7. Management's Discussion and Analysis of Financial Condition and Results of Operation {page}",
    "Item 7A. Quantitative and Qualitative Disclosures About Market Risk {page}",
    "Item 8. Financial Statements and Supplementary Data {page}",
    "Item 9. Changes in and Disagreements with Accountants on Accounting and Financial Disclosure {page}",
    "Item 9A. Controls and Procedures {page}",
    "Item 9B. Other Information {page}",
    "Item 10. Directors, Executive Officers and Corporate Governance {page}",
    "Item 11. Executive Compensation {page}",
    "Item 12. Security Ownership of Certain Beneficial Owners and Management and Related Stockholder Matters {page}",
    "Item 13. Certain Relationships and Related Transactions, and Director Independence {page}",
    "Item 14. Principal Accounting Fees and Services {page}",
    "Item 15. Exhibits, Financial Statement Schedules {page}",
    "SIGNATURES {page}",
]
# ============ LITIGATION AND LEGAL MATTERS ============

litigation_templates = [
    "{company} is involved in various legal proceedings and claims arising in the ordinary course of business, including {case_types}",
    "As of {month} {end_day}, {year}, {company} is a defendant in several lawsuits related to {case_types}",
    "{company} is subject to litigation and regulatory inquiries concerning {case_types} in the normal course of operations",
    "Various legal actions, proceedings, and claims are pending or may be instituted against {company}, including {case_types}",
    "As of {month} {end_day}, {year}, {company} is a defending against several derivative lawsuits related to {case_types}",
    'All securities holders of {company} are hereby notified that a settlement (the "Settlement") has been reached as to claims asserted in the above-captioned consolidated shareholder derivative action pending in a {court} (the "Derivative Action") on behalf of {company} against certain of its current or former directors and officers',
    "On {month} {end_day}, {year}, a shareholder derivative suit was filed in the {court} for the against {company}",
]

case_types = [
    "product liability, employment matters, and commercial disputes",
    "intellectual property infringement, contract disputes, and employment claims",
    "environmental matters, product warranty claims, and regulatory compliance",
    "patent litigation, customer disputes, and employment-related matters",
    "breach of contract claims, employment discrimination, and tax disputes",
]

litigation_assessment_templates = [
    "Management believes that the ultimate resolution of these matters will not have a material adverse effect on {company}'s financial position, results of operations, or cash flows",
    "While the outcome of these proceedings cannot be predicted with certainty, management does not believe they will materially impact the consolidated financial statements",
    "{company} believes it has meritorious defenses and intends to vigorously defend against these claims",
    "{company} intend to vigorously defend against these claims. At this time, {company} cannot predict the outcome, or provide a reasonable estimate or range of estimates of the possible outcome or loss, if any, in this matter",
    "Based on currently available information, management does not expect these matters to result in a material loss",
    "{company} has {verb} the likelihood of loss as remote and has not recorded any provisions related to these contingencies",
]

specific_lawsuit_templates = [
    "In {month} {year}, a lawsuit was filed against {company} in the {court} alleging {allegation}. {company} filed a motion to dismiss in {month} {dismiss_year}",
    "{company} is defending a class action lawsuit filed in {year} claiming {allegation}, with damages sought of approximately {currency_code}{amount} {money_unit}",
    "During {year}, {company} reached a settlement in a lawsuit related to {allegation} for {currency_code}{amount} {money_unit}, which was accrued in prior periods",
    "A complaint was filed against {company} in the {court} during {quarter} quarter {year} alleging {allegation}",
]

courts = [
    "United States District Court for the District of Delaware",
    "Superior Court of California",
    "United States District Court for the Southern District of New York",
    "Court of Chancery of the State of Delaware",
    "United States District Court for the Northern District of California",
    "Federal Court of Connecticut",
    "United States Court of Appeals for the Ninth Circuit",
    "United States Supreme Court",
    "Superior Court of the State of New Jersey",
    "Circuit Court of Cook County, Illinois",
    "New York State Supreme Court, Commercial Division",
    "Massachusetts Superior Court, Business Litigation Session",
    "Texas District Court, Harris County",
    "Florida Circuit Court for Miami-Dade County",
    "United States District Court for the District of Massachusetts",
    "United States District Court for the Western District of Texas",
    "United States District Court for the Eastern District of Virginia",
    "Court of Appeals of the State of California, Second Appellate District",
]


allegations = [
    "breach of contract and misappropriation of trade secrets",
    "violations of federal securities laws",
    "employment discrimination and wrongful termination",
    "patent infringement related to product technology",
    "breach of fiduciary duty and corporate waste",
    "antitrust violations and unfair competition",
    "failure to adequately warn of product risks",
    "fraudulent misrepresentation and concealment",
    "negligence in product design and manufacturing",
    "copyright infringement of proprietary materials",
    "violations of the Fair Labor Standards Act",
    "insider trading and market manipulation",
    "unlawful retaliation against whistleblowers",
    "environmental violations under the Clean Air Act",
    "consumer protection law violations",
    "unjust enrichment and conversion of assets",
    "false advertising and deceptive trade practices",
    "invasion of privacy and data security breaches",
    "violation of antidiscrimination provisions under Title VII",
    "failure to comply with OSHA workplace safety regulations",
]
# ============ EQUITY WARRANTS (NON-DERIVATIVE) ============

equity_warrant_templates = [
    "{company} has {shares} equity-classified warrants outstanding with an exercise price of {currency_code}{price} per share, exercisable until {expiry_year}",
    "Outstanding equity warrants for {shares} shares at {currency_code}{price} per share are classified in stockholders' equity and are not remeasured",
    "As of {month} {end_day}, {year}, there were {shares} warrants outstanding classified as equity instruments",
    "{company} issued {shares} warrants to purchase common stock at {currency_code}{price} per share, which are indexed to {company}'s own stock and classified in equity",
    "In {month} {year}, {shares} warrants issued to investors in connection with a {event} in {prev_month} {prev_year} were reset to {currency_code}{price}",
    "In connection with the {event}, {company} issued warrants to purchase up to {shares} shares of common stock at an exercise price of {currency_code}{price} per share",
    "During {month} {year}, {company} issued {shares} warrants exercisable at {currency_code}{price} per share in conjunction with {event}",
    "As part of {event}, {company} granted warrants for {shares} shares with a strike price of {currency_code}{price}, expiring in {expiry_year}",
    "{company} issued {shares} common stock warrants at an exercise price of {currency_code}{price} per share as consideration for {event}",
    "In {month} {year}, warrants to acquire {shares} shares at {currency_code}{price} per share were issued in connection with {event}",
    "In connection with the {event}, {company} issued warrants to purchase up to {shares} shares of common stock at an exercise price of {currency_code}{price} per share, provision states the warrants meet the criteria for equity treatment",
    "{company} issued {shares} shares of common stock valued at {currency_code}{value} in connection with {event} during {year}",
    "During {year}, {company} issued {shares} shares of common stock (valued at {currency_code}{value}) as part of {event}",
]


equity_warrant_activity_templates = [
    "During {year}, warrant holders exercised {shares} warrants, resulting in proceeds of {currency_code}{amount} {money_unit}",
    "In {month} {year}, {shares} equity warrants expired unexercised, with no impact on earnings",
    "{company} received {currency_code}{amount} {money_unit} from the exercise of {shares} warrants during {year}",
    "{shares} warrants were exercised on a cashless basis during {year}, resulting in the issuance of {net_shares} net shares",
    "During {year}, warrants to purchase {shares} shares were exercised on a cashless basis, resulting in the issuance of {net_shares} net shares",
    "In the {quarter} quarter of {year}, {company} modified the terms of outstanding warrants, extending the expiration date to {expiry_year} and adjusting the exercise price to {currency_code}{price}",
    "Warrants representing {shares} shares expired unexercised during {year}",
    "{company} repurchased and cancelled warrants for {shares} shares during {month} {year} for cash consideration of {currency_code}{amount} {money_unit}",
    "In {month} {year}, warrant holders exercised their rights to acquire {shares} shares, resulting in gross proceeds of {currency_code}{amount} {money_unit}",
    "The additional cost of the warrants of {currency_code}{amount} was recorded as a debit and a credit to additional paid in capital",
    "Any issuance of common stock by {company} may result in a reduction in the book value per share",
    "The reduction on market price per share of {company}'s outstanding shares of common stock will reduce the proportionate ownership and voting power of such shares",
    "In addition, {company} has reserved {shares} shares of the common stock for issuance upon the exercise of outstanding warrants",
]
# Warrant events/reasons
warrant_events = [
    "a debt financing transaction",
    "the series B preferred stock offering",
    "a credit facility agreement",
    "consulting services agreements",
    "a strategic partnership agreement",
    "the convertible note issuance",
    "a private placement",
    "the acquisition financing",
    "vendor financing arrangements",
    "financing",
    "the initial public offering (IPO)",
    "a merger or acquisition transaction",
    "a joint venture agreement",
    "the issuance of senior secured notes",
    "bridge financing arrangements",
    "a restructuring or recapitalization",
    "a collaboration agreement with a strategic partner",
    "the issuance of subordinated debt securities",
    "a technology licensing agreement",
    "the spin-off of a subsidiary",
    "equity line financing arrangements",
    "the settlement of outstanding litigation",
    "an employee retention or incentive program",
    "royalty financing arrangements",
    "a PIPE (private investment in public equity) transaction",
    "mezzanine financing agreements",
]

# ============ REVENUE RECOGNITION ============

revenue_recognition_templates = [
    "{company} recognizes revenue when control of promised goods or services is transferred to customers in an amount that reflects the consideration expected to be received",
    "Revenue from product sales is recognized at a point in time when the customer obtains control, typically upon shipment or delivery",
    "{company} applies the five-step model under ASC 606 to determine when and how revenue is recognized",
    "Performance obligations are satisfied over time for service contracts and at a point in time for product sales",
    "Revenue from subscription services is recognized ratably over the contract period as services are provided",
    "For contracts that include multiple performance obligations, {company} allocates the transaction price based on relative standalone selling prices",
    "Variable consideration, including rebates, discounts, and performance incentives, is estimated and included in the transaction price when it is probable that a significant reversal will not occur",
    "Revenue related to licenses of intellectual property is recognized either at a point in time or over time, depending on the nature of the rights granted",
    "For long-term construction and engineering contracts, revenue is recognized over time using an input method such as costs incurred relative to total expected costs",
    "In arrangements where {company} acts as an agent rather than the principal, revenue is recorded net of amounts owed to third-party suppliers",
    "Revenue from milestone payments under collaboration agreements is recognized when the underlying performance obligations are achieved",
    "Shipping and handling activities performed after the transfer of control are accounted for as fulfillment costs rather than separate performance obligations",
    "Advance payments received from customers are recorded as contract liabilities until the performance obligation is satisfied",
    "When a right of return exists, {company} recognizes revenue net of estimated returns based on historical experience and current expectations",
    "For software arrangements, revenue from perpetual licenses is recognized at delivery, while revenue from SaaS arrangements is recognized over the subscription term",
]


deferred_revenue_templates = [
    "Deferred revenue as of {month} {end_day}, {year} was {currency_code}{amount} {money_unit}, compared to {currency_code}{prev_amount} {money_unit} in the prior year",
    "{company} recorded deferred revenue of {currency_code}{amount} {money_unit} related to advance payments from customers for future deliverables",
    "Contract liabilities increased to {currency_code}{amount} {money_unit} at year-end {year} due to timing of customer payments and performance obligations",
    "As of {month} {end_day}, {year}, {company} had {currency_code}{amount} {money_unit} in deferred revenue related to service and maintenance contracts",
    "Deferred revenue primarily consists of advance billings for subscription and support services to be recognized over future periods",
    "{company} expects to recognize approximately {currency_code}{amount} {money_unit} of deferred revenue over the next twelve months and the remainder thereafter",
    "The increase in deferred revenue from {currency_code}{prev_amount} {money_unit} to {currency_code}{amount} {money_unit} reflects growth in multi-year customer contracts",
    "Deferred revenue includes amounts invoiced in advance for software licenses, cloud services, and professional support not yet recognized as revenue",
    "Changes in deferred revenue during {year} were driven by new billings offset by revenue recognized as performance obligations were satisfied",
    "Deferred revenue classified as current liabilities was {currency_code}{amount} {money_unit}, with the non-current portion recorded as {currency_code}{prev_amount} {money_unit}",
    "{company} recognized revenue of {currency_code}{prev_amount} {money_unit} during {year} that was included in deferred revenue at the beginning of the period",
    "Deferred revenue balances are expected to be recognized as revenue consistent with the satisfaction of contractual obligations over time",
]

# ============ INVENTORY ============

inventory_templates = [
    "{items} inventories are stated at the lower of cost or net realizable value, with cost determined using the {method} method",
    "{company} values inventory using the {method} cost method and regularly reviews for obsolescence",
    "Inventory consists of {items} valued at the lower of cost (determined by {method}) or net realizable value",
    "As of {month} {end_day}, {year}, {items} inventories totaled {currency_code}{amount} {money_unit}, net of obsolescence reserves of {currency_code}{reserve} {money_unit}",
    "{items} inventories are reviewed periodically for slow-moving or obsolete items, with reserves recorded when necessary to reduce carrying values",
    "{items} inventories are stated at standard cost (approximating actual cost) under the {method} method, adjusted to net realizable value if necessary",
    "{items} are valued at purchase cost while manufactured inventories include labor and overhead allocated using the {method} method",
    "{items} inventory is written down to market value when estimated selling prices are less than cost",
    "As of {month} {end_day}, {year}, {company} maintained obsolescence reserves of {currency_code}{reserve} {money_unit} against total inventories of {currency_code}{amount} {money_unit}",
    "{items} inventory include {items} valued at the lower of cost (determined by {method}) or net realizable value",
    "{company} records provisions for excess and obsolete {items} inventories based on expected future demand, market conditions, and {items} life cycles",
]

inventory_methods = [
    "first-in, first-out (FIFO)",
    "last-in, first-out (LIFO)",
    "weighted-average cost",
    "specific identification",
    "standard cost",
    "moving average cost",
    "retail inventory method",
]

inventory_writedown_templates = [
    "During {year}, {company} recorded {items} inventory write-downs of {currency_code}{amount} {money_unit} due to obsolescence and excess quantities",
    "{items} inventory reserves increased by {currency_code}{amount} {money_unit} in {year} to reflect lower of cost or market adjustments",
    "{company} recognized {currency_code}{amount} {money_unit} in charges related to slow-moving and obsolete {items} inventory during {year}",
    "{items} inventory obsolescence charges totaled {currency_code}{amount} {money_unit} for the year ended {month} {end_day}, {year}",
    "As of {month} {end_day}, {year}, {company} maintained {items} reserves of {currency_code}{amount} {money_unit} for excess and obsolete inventories",
    "Write-downs of {currency_code}{amount} {money_unit} were recorded in {year} primarily related to discontinued product lines",
    "{company} recorded {currency_code}{amount} {money_unit} in inventory write-downs due to declining market demand during {year}",
    "Charges for inventory valuation adjustments were {currency_code}{amount} {money_unit} in {year}, compared to {currency_code}{prev_amount} {money_unit} in the prior year",
    "{company} recorded inventory write-downs associated with aging components and spare parts totaling {currency_code}{amount} {money_unit} during {year}",
    " {items} inventory reserves increased to {currency_code}{amount} {money_unit} at year-end {year}, reflecting adjustments for lower selling prices and product obsolescence",
    "Total charges of {currency_code}{amount} {money_unit} were recognized in cost of goods sold for inventory write-downs in {year}",
    "Inventory write-downs of {currency_code}{amount} {money_unit} were partially offset by recoveries of {currency_code}{prev_amount} {money_unit} related to previously reserved items",
    "{company} established new reserves of {currency_code}{amount} {money_unit} in {year} for excess quantities, reflecting updated demand forecasts",
]

# ============ PROPERTY, PLANT & EQUIPMENT ============

ppe_templates = [
    "Property, plant and equipment are stated at cost less accumulated depreciation, which is computed using the straight-line method over estimated useful lives",
    "Depreciation expense was {currency_code}{amount} {money_unit} for the year ended {month} {end_day}, {year}",
    "{company} capitalizes costs related to construction in progress and commences depreciation when assets are placed in service",
    "As of {month} {end_day}, {year}, property, plant and equipment, net totaled {currency_code}{amount} {money_unit}",
    "Repairs and maintenance costs are expensed as incurred, while major improvements are capitalized and depreciated over the remaining useful life",
    "Leasehold improvements are amortized over the shorter of the lease term or the estimated useful life of the asset",
    "Depreciation methods and useful lives are reviewed periodically to ensure they reflect current estimates of asset utility",
    "Gains or losses on the disposal of property, plant and equipment are recognized in earnings when assets are retired or sold",
    "Construction in progress primarily relates to {purpose} and is not depreciated until placed into service",
    "As of {month} {end_day}, {year}, accumulated depreciation was {currency_code}{amount} {money_unit}",
]


capex_templates = [
    "Capital expenditures during {year} were {currency_code}{amount} {money_unit}, primarily related to {purpose}",
    "{company} invested {currency_code}{amount} {money_unit} in {purpose} during {year}",
    "Cash outlays for property, plant and equipment totaled {currency_code}{amount} {money_unit} in {year}, focused on {purpose}",
    "Capital investments of {currency_code}{amount} {money_unit} were made during {year} to support {purpose}",
    "During {year}, {company} incurred capital expenditures of {currency_code}{amount} {money_unit}, reflecting continued investment in {purpose}",
    "Capex in {year} amounted to {currency_code}{amount} {money_unit}, directed primarily toward {purpose}",
    "{company} allocated {currency_code}{amount} {money_unit} to property and equipment purchases during {year}, with a focus on {purpose}",
    "Capital spending was {currency_code}{amount} {money_unit} in {year}, driven by {purpose}",
]

capex_purposes = [
    "manufacturing capacity expansion",
    "information technology infrastructure",
    "facility improvements and equipment upgrades",
    "research and development laboratories",
    "distribution center automation",
    "renewable energy and sustainability projects",
    "expansion of global office facilities",
    "enhancement of customer service centers",
    "data center construction and modernization",
    "supply chain and logistics optimization",
    "product development and testing facilities",
    "safety and regulatory compliance upgrades",
]

impairment_templates = [
    "{company} recorded an impairment charge of {currency_code}{amount} {money_unit} during {year} related to {asset_type}",
    "An impairment loss of {currency_code}{amount} {money_unit} was recognized in {year} for {asset_type} due to changes in market conditions",
    "During {quarter} quarter {year}, {company} identified indicators of impairment and recorded a {currency_code}{amount} {money_unit} charge for {asset_type}",
    "{company} recognized {currency_code}{amount} {money_unit} in impairment charges related to {asset_type} during {year}",
    "As a result of revised cash flow projections, {company} recorded {currency_code}{amount} {money_unit} of impairment charges for {asset_type} in {year}",
    "Impairment testing performed in {year} resulted in a {currency_code}{amount} {money_unit} write-down of {asset_type}",
    "A non-cash impairment charge of {currency_code}{amount} {money_unit} was recognized during {year} for {asset_type}",
    "Impairment charges of {currency_code}{amount} {money_unit} were recorded in {year} primarily related to {asset_type}",
    "{company} assessed recoverability of {asset_type} and recognized an impairment loss of {currency_code}{amount} {money_unit} in {year}",
    "During {year}, {company} recorded impairment losses totaling {currency_code}{amount} {money_unit}, including {asset_type}",
    "An interim impairment assessment conducted in {quarter} {year} resulted in a charge of {currency_code}{amount} {money_unit} for {asset_type}",
]

asset_types = [
    "long-lived assets in underperforming facilities",
    "certain manufacturing equipment",
    "goodwill related to a reporting unit",
    "intangible assets with finite lives",
    "property held for sale",
    "oil and gas properties",
    "construction in progress",
    "software development costs",
    "property and equipment",
    "qualifying assets",
    "indefinite-lived intangible assets",
    "leased right-of-use assets",
    "retail store assets in specific locations",
    "capitalized film and television production costs",
    "mining and exploration assets",
    "customer relationship intangibles",
    "brand and trademark assets",
    "renewable energy facilities",
]

# ============ LEASES ============

lease_templates = [
    "{company} leases office space, manufacturing facilities, and equipment under operating and finance leases with terms ranging from {min_term} to {max_term} years",
    "As of {month} {end_day}, {year}, {company} had operating lease right-of-use assets of {currency_code}{amount} {money_unit} and lease liabilities of {currency_code}{liability} {money_unit}",
    "{company} adopted ASC 842 effective {month} {adoption_year}, recognizing right-of-use assets and lease liabilities for operating leases",
    "Total lease expense for {year} was {currency_code}{amount} {money_unit}, including both operating and finance lease costs",
    "Lease liabilities are measured at the present value of future lease payments, discounted using {company}'s incremental borrowing rate",
    "Short-term leases and variable lease payments are excluded from right-of-use assets and liabilities under ASC 842",
    "{company} recognized {currency_code}{amount} {money_unit} of lease expense related to short-term and variable leases during {year}",
    "As of {month} {end_day}, {year}, finance lease assets totaled {currency_code}{amount} {money_unit}, included in property, plant and equipment",
    "Lease agreements do not contain significant residual value guarantees or restrictive covenants",
]


lease_commitment_templates = [
    "Future minimum lease payments under non-cancellable operating leases total {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}",
    "The weighted-average remaining lease term for operating leases is {years} years as of {month} {end_day}, {year}",
    "The weighted-average discount rate used to measure lease liabilities was {rate}% as of {month} {end_day}, {year}",
    "Operating lease payments are expected to total {currency_code}{amount} {money_unit} over the next five years",
    "Maturities of lease liabilities are {currency_code}{amount} {money_unit} in {next_year}, {currency_code}{amount2} {money_unit} in {next2_year}, and {currency_code}{amount3} {money_unit} thereafter",
    "As of {month} {end_day}, {year}, undiscounted future lease payments totaled {currency_code}{amount} {money_unit}, with a present value of {currency_code}{pv_amount} {money_unit}",
    "Future finance lease obligations amounted to {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}",
    "Lease commitments include renewal options reasonably certain to be exercised, totaling {currency_code}{amount} {money_unit}",
]

# ============ GOODWILL AND INTANGIBLES ============

goodwill_templates = [
    "Goodwill totaled {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}, and is not amortized but tested for impairment annually",
    "{company} performs its annual goodwill impairment test in the {quarter} quarter of each year",
    "No goodwill impairment was recorded during {year} as the fair value of reporting units exceeded their carrying values",
    "Goodwill is allocated to reporting units and {verb} for impairment at least annually or when indicators of impairment exist",
]

intangible_templates = [
    "Intangible assets consist primarily of {intangible_types} and are amortized over their estimated useful lives",
    "Amortization expense for intangible assets was {currency_code}{amount} {money_unit} for the year ended {month} {end_day}, {year}",
    "As of {month} {end_day}, {year}, intangible assets, net of accumulated amortization, totaled {currency_code}{amount} {money_unit}",
    "The weighted-average remaining useful life of intangible assets is {years} years as of {month} {end_day}, {year}",
]

intangible_types = [
    "customer relationships, developed technology, and trade names",
    "patents, trademarks, and customer lists",
    "software, customer contracts, and non-compete agreements",
    "brand names, proprietary technology, and customer relationships",
]

# ============ DEBT AND CREDIT FACILITIES ============

debt_templates = [
    # General facilities and balances
    "{company} maintains a {currency_code}{amount} {money_unit} revolving credit facility that expires in {year}, with {currency_code}{outstanding} {money_unit} outstanding as of {month} {end_day}, {current_year}, with annual interest rate of {pct}%",
    "As of {month} {end_day}, {year}, {company} had total long-term debt of {currency_code}{amount} {money_unit}, consisting primarily of {debt_types}, with an average interest rate of {pct}% and {pct2}%, respectively",
    "Long-term debt, with an annual interest rate of {pct}% as of {month} {end_day}, {year} totaled {currency_code}{amount} {money_unit}, consisting of {debt_types}",
    "At year-end {year}, {company} reported total debt of {currency_code}{amount} {money_unit} with interest rates ranging from {pct}% to {pct2}%, including {debt_types}",
    "{company}'s outstanding borrowings under its revolving credit facility totaled {currency_code}{outstanding} {money_unit} with average interest rate of {pct}% to {pct2}% as of {month} {end_day}, {year}",
    "As of {month} {end_day}, {year}, there was {currency_code}{outstanding} {money_unit} outstanding on the {debt_type} and {currency_code}{outstanding} {money_unit} outstanding on {debt_types}",
    # Issuances and repayments
    "During {year}, {company} issued {currency_code}{amount} {money_unit} in {debt_types} with a maturity date of {maturity_year} and a weighted average interest rate of {pct}%",
    "In {year}, {company} completed a private placement of {currency_code}{amount} {money_unit} of {debt_types}, bearing interest at {pct}% per annum",
    "During {year}, {company} repaid {currency_code}{amount} {money_unit} of its outstanding {debt_type} prior to maturity",
    "{company} repaid {currency_code}{amount} {money_unit} of outstanding {debt_type} during {year} using cash from operations",
    "In {year}, {company} refinanced {currency_code}{amount} {money_unit} of existing {debt_type} at interest rate of {pct}%, extending the maturity to {maturity_year}",
    # Interest rate and maturity details
    "As of year-end {year}, {company} had total {debt_type} of {currency_code}{amount} {money_unit}, {currency_code}{amount2} {money_unit} of which was fixed rate debt with a weighted average interest rate of {pct}% to {pct2}%",
    "The weighted average interest rate on {company}'s {debt_type} was approximately {pct}% as of {month} {end_day}, {year}",
    "As of {month} {end_day}, {year}, {company}'s {debt_type} had a weighted average maturity of {years} years",
    "As of {month} {end_day}, {year}, {company}'s variable-rate borrowings bore interest at an average rate of {pct}%",
    "Interest expense related to {debt_type} for {year} was approximately {currency_code}{amount} {money_unit}",
    "At {month} {year}, {company} repaid {currency_code}{amount} {money_unit} of the {currency_code}{amount2} {money_unit} borrowed",
    # Other specialized cases
    "During {year}, {company} entered into a new {currency_code}{amount} {money_unit} {debt_type} with a maturity in {maturity_year} and annual interest rate of {pct}%",
    "Proceeds from the {debt_type} issuance were used to repay existing borrowings and for general corporate purposes",
    "In {year}, {company} retired {currency_code}{amount} {money_unit} of {debt_type} upon maturity",
    "At {month} {end_day}, {year}, unamortized debt issuance costs related to {debt_type} totaled {currency_code}{amount} {money_unit}",
    "The fair value of {company}'s {debt_type} was estimated at {currency_code}{amount2} {money_unit} as of {month} {end_day}, {year}",
]

debt_types_list = [
    # Common corporate instruments
    "senior unsecured notes and term loans",
    "convertible senior notes and revolving credit borrowings",
    "senior secured notes and equipment financing",
    "bonds and bank term loans",
    "fixed-rate debt",
    "floating-rate debt",
    "term loan B facility",
    "credit facility borrowings",
    "notes payable",
    "long-term loan agreement",
    "short-term loan",
    "long-term debt",
    "short-term debt",
    # Market rate–specific
    "LIBOR-based loans",
    "SOFR-based revolving loans",
    "Eurodollar borrowings",
    "variable-rate debt",
    # Specialized and legacy forms
    "bridge loans",
    "debentures",
    "subordinated notes",
    "commercial paper",
    "secured term loans",
    "lease financing obligations",
    "private placement notes",
]


debt_covenant_templates = [
    "The credit agreement contains customary affirmative and negative covenants, including financial covenants related to leverage ratios and interest coverage",
    "As of {month} {end_day}, {year}, {company} was in compliance with all debt covenants",
    "The revolving credit facility requires maintenance of a maximum leverage ratio of {ratio}:1 and minimum interest coverage ratio of {coverage}:1",
    "Debt agreements contain restrictions on dividends, additional indebtedness, and asset sales, subject to certain exceptions",
    # Covenant and credit facility context
    "The revolving credit facility contains customary financial covenants, including maintaining a maximum leverage ratio and minimum interest coverage ratio",
    "{company} was in compliance with all debt covenants as of {month} {end_day}, {year}",
    "{company}'s credit agreements require maintenance of specified leverage and coverage ratios, which {company} met as of {month} {end_day}, {year}",
]

# ============ INCOME TAXES ============

tax_templates = [
    "The provision for income taxes was {currency_code}{amount} {money_unit} for {year}, resulting in an effective tax rate of {rate}%",
    "The effective tax rate for {year} was {rate}%, compared to {prev_rate}% in the prior year",
    "Deferred tax assets as of {month} {end_day}, {year} totaled {currency_code}{amount} {money_unit}, primarily related to {sources}",
    "{company} has net operating loss carryforwards of {currency_code}{amount} {money_unit} that expire between {start_year} and {end_year}",
]

tax_sources = [
    "net operating losses, tax credit carryforwards, and accrued expenses",
    "stock-based compensation, depreciation differences, and reserves",
    "employee benefits, loss carryforwards, and capitalized research costs",
    "bad debt reserves, inventory reserves, and accrued liabilities",
]

uncertain_tax_templates = [
    "{company} has {currency_code}{amount} {money_unit} in unrecognized tax benefits as of {month} {end_day}, {year}",
    "A reconciliation of the beginning and ending amount of unrecognized tax benefits showed an increase of {currency_code}{amount} {money_unit} during {year}",
    "{company} recognizes interest and penalties related to uncertain tax positions in income tax expense",
    "It is reasonably possible that {currency_code}{amount} {money_unit} of unrecognized tax benefits could be recognized within the next twelve months",
]

# ============ STOCK-BASED COMPENSATION ============

stock_comp_templates = [
    "Stock-based compensation expense was {currency_code}{amount} {money_unit} for the year ended {month} {end_day}, {year}",
    "{company} grants stock options, restricted stock units, and performance share units to employees and directors",
    "During {year}, {company} granted {shares} stock options with a weighted-average exercise price of {currency_code}{price} per share",
    "Total unrecognized compensation cost related to unvested awards was {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}",
]

stock_comp_valuation_templates = [
    "The fair value of stock options is estimated using the  with assumptions for volatility, risk-free interest rate, and expected term",
    "{company} uses a {model} to value performance share units with market conditions",
    "Restricted stock units are valued based on the closing stock price on the grant date",
    "The weighted-average grant-date fair value of options granted during {year} was {currency_code}{amount} per share",
]

# ============ PENSION AND POSTRETIREMENT BENEFITS ============

pension_templates = [
    "{company} sponsors defined benefit pension plans covering certain employees, with plan assets of {currency_code}{assets} {money_unit} and projected benefit obligations of {currency_code}{obligations} {money_unit} as of {month} {end_day}, {year}",
    "Pension expense for {year} was {currency_code}{amount} {money_unit}, including service cost, interest cost, and expected return on plan assets",
    "The funded status of {company}'s pension plans resulted in a net liability of {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}",
    "During {year}, {company} contributed {currency_code}{amount} {money_unit} to its defined benefit pension plans",
]

opeb_templates = [
    "{company} provides postretirement medical and life insurance benefits to eligible retirees",
    "The accumulated postretirement benefit obligation was {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}",
    "Net periodic postretirement benefit cost for {year} totaled {currency_code}{amount} {money_unit}",
    "{company}'s postretirement benefit plans are unfunded, with liabilities recorded in other long-term liabilities",
]

# ============ COMMITMENTS AND CONTINGENCIES ============

purchase_commitment_templates = [
    "{company} has purchase commitments with suppliers totaling approximately {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}",
    "Outstanding purchase orders and contractual obligations for inventory and capital expenditures totaled {currency_code}{amount} {money_unit} at year-end {year}",
    "{company} is obligated under various supply agreements to purchase minimum quantities totaling {currency_code}{amount} {money_unit} over the next {years} years",
    "As of {month} {end_day}, {year}, {company} had non-cancellable purchase commitments of {currency_code}{amount} {money_unit}",
]

guarantee_templates = [
    "{company} has provided guarantees and indemnifications related to {guarantee_type} with a maximum potential exposure of {currency_code}{amount} {money_unit}",
    "Product warranty obligations totaled {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}",
    "{company} accrues warranty costs based on historical claims experience and specific identified warranty issues",
    "Warranty expense for {year} was {currency_code}{amount} {money_unit}, with payments of {currency_code}{payments} {money_unit}",
]

guarantee_types = [
    "product performance, lease obligations, and customer financing",
    "residual value guarantees and performance bonds",
    "environmental remediation and divested business obligations",
    "intellectual property indemnifications and debt guarantees",
]

# ============ RESTRUCTURING ============

restructuring_templates = [
    "During {year}, {company} initiated a restructuring plan to {purpose}, resulting in charges of {currency_code}{amount} {money_unit}",
    "Restructuring charges of {currency_code}{amount} {money_unit} were recorded in {year}, primarily related to {expense_type}",
    "{company} announced a cost reduction initiative in {month} {year} expected to generate annual savings of {currency_code}{amount} {money_unit}",
    "As of {month} {end_day}, {year}, the remaining restructuring liability was {currency_code}{amount} {money_unit}",
]

restructuring_purposes = [
    "streamline operations and reduce costs",
    "consolidate manufacturing facilities",
    "optimize the organizational structure",
    "align resources with strategic priorities",
]

restructuring_expense_types = [
    "employee severance and benefits",
    "facility closure costs and asset impairments",
    "contract termination costs and severance",
    "workforce reductions and lease terminations",
]

# ============ ACQUISITIONS (NON-DERIVATIVE ASPECTS) ============

acquisition_templates = [
    "In {month} {year}, {company} acquired {target} for total consideration of {currency_code}{amount} {money_unit} in cash",
    "{company} completed the acquisition of {target} during {year} for {currency_code}{amount} {money_unit}, which was funded through {funding}",
    "During {year}, {company} acquired {target} to expand its {purpose}",
    "The acquisition of {target} in {year} resulted in {currency_code}{goodwill} {money_unit} of goodwill and {currency_code}{intangibles} {money_unit} of identifiable intangible assets",
]

acquisition_purposes = [
    "product portfolio and market presence",
    "technology capabilities and customer base",
    "geographic reach and distribution channels",
    "manufacturing capacity and operational efficiency",
]

acquisition_funding = [
    "cash on hand and borrowings under the credit facility",
    "available cash reserves",
    "a combination of cash and debt financing",
    "existing liquidity",
]
# ============ STOCK ==========================
# Stock issuance for debt costs
stock_debt_issuance_templates = [
    "In conjunction with its {month} {year} {financing_type}, {company} issued at closing {shares1} shares of common stock (valued at {currency_code}{value1}) and upon extension of the maturity date {shares2} shares of common stock (valued at {currency_code}{value2}), which were recorded as debt issuance costs",
    "{company} issued {shares} shares of common stock valued at {currency_code}{value} in connection with {financing_type} during {year}, recorded as debt issuance costs",
    "During {year}, {company} issued {shares} shares of common stock (valued at {currency_code}{value}) as part of {financing_type}, with the value recorded as a debt issue cost",
    "In {month} {year}, {company} completed {financing_type} and issued {shares} shares of common stock valued at {currency_code}{value} as consideration, which was capitalized as debt issuance costs",
    "Upon closing of the {financing_type} in {month} {year}, {shares} shares were issued as transaction costs and recorded in additional paid-in capital",
    "{company} capitalized {shares} shares of common stock valued at {currency_code}{value} as debt issuance costs related to the {financing_type}",
]

# Registration statement and resale concerns
registration_statement_templates = [
    "Such sales also may inhibit our ability to obtain future equity related financing on acceptable terms. In {month} {year}, {company} will file a registration statement to register the shares of common stock issuable upon conversion of the convertible notes and upon exercise of the warrants to permit the resale of these shares of common stock",
    "{company} filed a registration statement on Form S-3 in {month} {year} to register {shares} shares of common stock underlying convertible securities for resale by holders",
    "In {month} {year}, {company} registered {shares} shares of common stock issuable upon conversion of notes and exercise of warrants pursuant to registration rights agreements",
    "The registration statement filed in {year} covers {shares} shares issuable upon conversion and exercise of outstanding securities, permitting resale by security holders",
    "{company} is obligated to file a registration statement within {days} days following {month} {year} covering shares issuable upon conversion of notes and warrants",
]

# Market impact of registered shares
market_impact_templates = [
    "Upon the effective date of the registration statement, the holders of the convertible notes may sell all or a portion of the shares of common stock they receive by conversion of the notes and warrants directly in the market or through one or more underwriters, broker-dealers, or agents",
    "A large number of shares of common stock would be available for resale by the note holders upon effectiveness of the registration statement, which could depress the market price of {company}'s common stock",
    "The resale of {shares} shares registered under the registration statement could adversely affect the market price of {company}'s common stock",
    "Upon effectiveness of the registration statement, holders may resell {shares} shares, potentially causing downward pressure on the stock price",
    "The registration of {shares} shares for resale by holders could result in substantial dilution and negatively impact the trading price of the common stock",
    "Sales of substantial amounts of common stock in the public market following effectiveness of the registration statement could adversely affect prevailing market prices",
]

# Warrant and option adjustment templates
warrant_adjustment_templates = [
    "The original exercisable shares of {shares} and exercise price of {currency_code}{price} was adjusted to {shares1} and {currency_code}{price2}, respectively, to account for the {month} {year} Private Placement and the Amendment Agreement",
    "Anti-dilution provisions resulted in adjustment of warrant exercise price from {currency_code}{price} to {currency_code}{price2} and shares from {shares} to {shares1} following the {year} financing",
    "Pursuant to anti-dilution protection, {shares} warrants at {currency_code}{price} per share were adjusted to {shares1} warrants at {currency_code}{price2} per share effective {month} {year}",
    "The {month} {year} down-round financing triggered adjustments to outstanding warrants, changing the exercise price from {currency_code}{price} to {currency_code}{price2}",
    "Weighted-average anti-dilution adjustments modified warrant terms to {shares1} shares at {currency_code}{price2} from {shares} shares at {currency_code}{price}",
]

# Fair value measurement templates
fair_value_snapshot_templates = [
    "The fair value of the shares are {currency_code}{value1} and {currency_code}{value2}, in {month} {year}",
    "As of {month} {end_day}, {year}, the fair value of shares underlying convertible instruments was {currency_code}{value}",
    "Fair value of shares reserved for issuance totaled {currency_code}{value} at {month} {end_day}, {year}",
    "The {shares} shares reserved for conversion and exercise had an aggregate fair value of {currency_code}{value} as of {month} {year}",
    "{company} valued the {shares} shares underlying convertible securities at {currency_code}{value} based on the closing stock price on {month} {end_day}, {year}",
]

# Share reservation templates
share_reservation_templates = [
    "In addition, {company} has reserved {shares1} shares of the common stock for issuance upon the exercise of outstanding warrants and {shares2} shares of the common stock for issuance upon the exercise of stock options",
    "{company} has reserved a total of {shares} shares for issuance under equity incentive plans and upon exercise of warrants and convertible securities",
    "As of {month} {end_day}, {year}, {shares1} shares were reserved for warrant exercises and {shares2} shares for option exercises under equity plans",
    "{company} maintains a reserve of {shares} shares for potential issuance upon conversion, exercise, or settlement of outstanding equity instruments",
    "{shares} shares of authorized common stock are reserved for issuance pursuant to outstanding equity awards, warrants, and convertible instruments as of {year}",
]

# Outstanding options disclosure
outstanding_options_templates = [
    "As of {month} {end_day}, {year}, there are {shares} issued and outstanding options to purchase common stock. To the extent that outstanding warrants and options are exercised, the percentage ownership of common stock of {company}'s stockholders will be diluted",
    "Outstanding stock options totaled {shares} as of {month} {end_day}, {year}, with a weighted-average exercise price of {currency_code}{price}",
    "As of {year} year-end, {shares} stock options were outstanding and exercisable, representing potential dilution to existing shareholders",
    "{company} had {shares} options outstanding at {month} {end_day}, {year}, of which {shares1} were vested and exercisable",
    "Stock options to purchase {shares} shares were outstanding as of {month} {end_day}, {year}, with expiration dates ranging from {year} to {end_year}",
]

# Dilution concern templates
dilution_concern_templates = [
    "In the event of the exercise of a substantial number of warrants and options, within a reasonably short period of time after the right to exercise commences, the resulting increase in the amount of the common stock in the trading market could substantially adversely affect the market price of the common stock or {company}'s ability to raise money through the sale of equity securities",
    "Exercise of outstanding warrants and options representing {shares} shares could result in significant dilution to existing stockholders and negatively impact the stock price",
    "The potential issuance of {shares} shares upon exercise of warrants and conversion of notes could dilute current shareholders by approximately {pct}%",
    "Substantial dilution may occur if holders exercise warrants for {shares} shares and convert notes into {shares1} shares of common stock",
    "Current stockholders face potential dilution from {shares} shares underlying warrants, options, and convertible securities as of {month} {end_day}, {year}",
    "If all outstanding warrants and options were exercised, {shares} additional shares would be issued, representing {pct}% dilution to current shareholders",
]

# Capital raising impact templates
capital_raising_impact_templates = [
    "The overhang of {shares} shares underlying convertible securities may impair {company}'s ability to raise capital through future equity offerings",
    "Potential dilution from outstanding warrants and options could adversely affect the terms of future financings or {company}'s ability to access capital markets",
    "The existence of {shares} shares reserved for issuance may make it more difficult for {company} to obtain financing on favorable terms",
    "Future equity financings may be more difficult to complete due to the dilutive effect of {shares} shares underlying outstanding securities",
]

warrant_debt_issuance_templates = [
    "In the same financing, {company} issued warrants to purchase {shares1} shares of its common stock (valued at {currency_code}{value1}) and warrants to purchase {shares2} shares of its common stock (valued at {currency_code}{value2}) related to extensions of the maturity dates",
    "{company} issued warrants to purchase {shares} shares of common stock (valued at {currency_code}{value}) in conjunction with {financing_type} in {month} {year}",
    "Warrants to purchase {shares} shares of common stock were issued as part of the financing arrangement, valued at {currency_code}{value} and recorded as debt issuance costs",
    "In connection with {financing_type}, {company} granted warrants for {shares} shares valued at {currency_code}{value}, with the value recorded as debt issue costs",
    "Additional warrants to purchase {shares} shares of {company} common stock were issued on {month} {year} in consideration for the extension to that date",
    "In connection with the extension to {month} {year}, {company} offered two alternatives of consideration. Holders of {shares1} common stock of the notes elected to reduce the exercise price of their warrants, or to to receive additional warrants to purchase {shares2} shares of common stock",
    "{company} reduced the exercise price by {currency_code}{value1} per share for all warrants issued in connection with the issuance or extensions of the notes",
    "In consideration of this extension, {company} issued {shares} shares of common stock at a price of {value} per share and warrants to purchase {shares1} shares of common stock at a price to be determined in the future, between {currency_code}{value1} and {currency_code}{value2} per share, on or before {month} {year}",
    "Also in {month} {year}, {company} exchanged a {currency_code}{value} note payable for units of common stock and warrants to purchase common stock at a price of {currency_code}{value1} per unit",
    "In addition, the financial advisor on the debt offering received an additional {shares} warrants with the {month} offering for a total of approximately {value}",
    "If all of the warrants are exercised and the debt is fully converted to {company} stock, current stockholders will experience a significant dilution in their ownership of {company} ",
    "Based on the terms of the debt offering both the notes and warrants are subject to anti-dilution provisions and can potentially become more dilutive to {company} stock. Further dilution may occur in the event of a default {currency_code}{value} payable",
]

warrant_amortization_templates = [
    "The value of the warrants related to these financings was recorded as debt issue costs and the amortization of such warrant costs was included in interest expense, which was capitalized as a cost of {asset_type}",
    "Warrant costs totaling {currency_code}{value} were recorded as debt issuance costs and amortized to interest expense over the term of the debt",
    "{company} amortizes debt issuance costs, including the value of warrants issued, to interest expense using the effective interest method",
    "Amortization of warrant-related debt issuance costs totaled {currency_code}{value} for the year ended {month} {end_day}, {year}",
    "The relative fair value of the warrants was recorded as a debt discount and is being amortized to non-cash interest expense over the life of the {debt_types_list} using the effective interest method",
    "The initial value of the warrants was recorded in Additional Paid-In Capital and, as they are classified as equity, they are not subsequently remeasured",
    "Amortization of the debt discount related to the warrants issued with the {debt_types_list} totaled {currency_code}{value} and {currency_code}{value2} for the years ended {year} and {prev_year}, respectively",
    "The warrants are exercisable for a term of five years at an exercise price of {currency_code}{price} per share, subject to anti-dilution provisions similar to the provisions set forth in the Notes and expire on {month} {year}",
]


non_cash_settlement_templates = [
    "In {year}, {company} issued {shares} shares of common stock (valued at {currency_code}{value}) in settlement of invoices for previously rendered {service_type}",
    "{company} settled outstanding {service_type} payables totaling {currency_code}{value} through the issuance of {shares} shares of common stock during {year}",
    "During {year}, {company} issued {shares} shares valued at {currency_code}{value} to settle {service_type} obligations",
    "{shares} shares of common stock were issued in {month} {year} to satisfy {currency_code}{value} in outstanding {service_type} fees",
]


financing_types = [
    "Bridge Financing",
    "short-term bridge financing",
    "mezzanine financing",
    "subordinated debt financing",
    "convertible debt financing",
    "senior secured financing",
]

service_types = [
    "legal services",
    "consulting services",
    "professional services",
    "advisory services",
    "accounting and audit services",
]

# Balance sheet changes templates
balance_sheet_change_templates = [
    "Accounts payable increased by {currency_code}{amount} {money_unit} to {currency_code}{ending} {money_unit} as of {month} {end_day}, {year}, primarily due to {reason}",
    "Accounts receivable decreased {currency_code}{amount} {money_unit} during {year}, reflecting {reason}",
    "Inventories increased {currency_code}{amount} {money_unit} from {month} {end_day}, {prev_year} to {month} {end_day}, {year} due to {reason}",
    "Accrued liabilities increased by {currency_code}{amount} {money_unit} year-over-year, primarily attributable to {reason}",
    "Prepaid expenses and other current assets decreased {currency_code}{amount} {money_unit} as of {month} {end_day}, {year} compared to the prior year",
]

working_capital_templates = [
    "Working capital was {currency_code}{amount} {money_unit} at {month} {end_day}, {year}, compared to {currency_code}{prev_amount} {money_unit} at {month} {end_day}, {prev_year}",
    "Changes in operating assets and liabilities resulted in a {currency_code}{direction} of {currency_code}{amount} {money_unit} in cash from operations during {year}",
    "{company}'s working capital increased by {currency_code}{amount} {money_unit} during {year}, driven primarily by {reason}",
    "Net changes in operating assets and liabilities used {currency_code}{amount} {money_unit} of cash during {year}",
]

ar_templates = [
    "Trade accounts receivable totaled {currency_code}{amount} {money_unit} at {month} {end_day}, {year}, representing {days} days sales outstanding",
    "The allowance for doubtful accounts was {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}, compared to {currency_code}{prev_amount} {money_unit} in the prior year",
    "Days sales outstanding decreased from {prev_days} days to {days} days during {year}",
    "{company} recorded bad debt expense of {currency_code}{amount} {money_unit} during {year}",
    "Accounts receivable, net of allowances, increased {currency_code}{amount} {money_unit} to {currency_code}{ending} {money_unit} at year-end {year}",
]

ap_templates = [
    "Accounts payable increased {currency_code}{amount} {money_unit} from the prior year, reflecting {reason}",
    "{company} extended payment terms with certain vendors during {year}, resulting in an increase in accounts payable of {currency_code}{amount} {money_unit}",
    "Accounts payable was {currency_code}{amount} {money_unit} at {month} {end_day}, {year}, down from {currency_code}{prev_amount} {money_unit} at {month} {end_day}, {prev_year}",
    "Days payable outstanding increased to {days} days at year-end {year} from {prev_days} days in the prior year",
    "Changes in accounts payable provided {currency_code}{amount} {money_unit} of cash during {year}",
]

accrued_liabilities_templates = [
    "Accrued compensation increased by {currency_code}{amount} {money_unit} at {month} {end_day}, {year} due to {reason}",
    "Accrued expenses totaled {currency_code}{amount} {money_unit} at year-end {year}, an increase of {currency_code}{change} {money_unit} from the prior year",
    "The increase in accrued liabilities of {currency_code}{amount} {money_unit} was primarily related to {reason}",
    "Other accrued liabilities decreased {currency_code}{amount} {money_unit} during {year}, mainly due to {reason}",
]

other_current_assets_templates = [
    "Other current assets increased {currency_code}{amount} {money_unit} to {currency_code}{ending} {money_unit} at {month} {end_day}, {year}, primarily due to {reason}",
    "Prepaid expenses decreased by {currency_code}{amount} {money_unit} during {year}",
    "Other receivables totaled {currency_code}{amount} {money_unit} at year-end {year}",
    "Current assets, excluding cash, increased {currency_code}{amount} {money_unit} year-over-year",
]

other_liabilities_templates = [
    "Other long-term liabilities increased by {currency_code}{amount} {money_unit} during {year}, primarily related to {reason}",
    "{company}'s current liabilities totaled {currency_code}{amount} {money_unit} at {month} {end_day}, {year}",
    "Total liabilities increased from {currency_code}{prev_amount} {money_unit} to {currency_code}{amount} {money_unit} during {year}",
    "Non-current liabilities decreased {currency_code}{amount} {money_unit} to {currency_code}{ending} {money_unit} at year-end {year}",
]

retained_earnings_templates = [
    "Retained earnings increased by {currency_code}{amount} {money_unit} during {year}, reflecting net income of {currency_code}{ni} {money_unit} less dividends of {currency_code}{div} {money_unit}",
    "Accumulated deficit was {currency_code}{amount} {money_unit} at {month} {end_day}, {year}",
    "{company} reported a net loss of {currency_code}{amount} {money_unit} for {year}, increasing accumulated deficit to {currency_code}{ending} {money_unit}",
    "Retained earnings totaled {currency_code}{amount} {money_unit} at year-end {year}",
]

stockholders_equity_templates = [
    "Total stockholders' equity increased {currency_code}{amount} {money_unit} to {currency_code}{ending} {money_unit} at {month} {end_day}, {year}",
    "Stockholders' equity was {currency_code}{amount} {money_unit} at {month} {end_day}, {year}, compared to {currency_code}{prev_amount} {money_unit} at {month} {end_day}, {prev_year}",
    "The increase in stockholders' equity of {currency_code}{amount} {money_unit} was primarily due to {reason}",
    "Total equity increased by {currency_code}{amount} {money_unit} during {year}",
]

cash_flow_statement_templates = [
    "Cash used in operating activities was {currency_code}{amount} {money_unit} for the year ended {month} {end_day}, {year}",
    "Net cash provided by operating activities totaled {currency_code}{amount} {money_unit} in {year}, compared to {currency_code}{prev_amount} {money_unit} in {prev_year}",
    "Cash flows from investing activities used {currency_code}{amount} {money_unit} during {year}, primarily for {reason}",
    "{company} generated {currency_code}{amount} {money_unit} in cash from operations during {year}",
    "Free cash flow was {currency_code}{amount} {money_unit} for {year}, defined as cash from operations less capital expenditures",
]

balance_sheet_reasons = [
    "timing of vendor payments",
    "increased sales volume",
    "seasonal working capital requirements",
    "timing of collections from customers",
    "inventory build-up to support growth",
    "payment of annual bonuses",
    "timing of payroll and tax payments",
    "increased business activity",
    "changes in payment terms",
]

accrued_reasons = [
    "annual incentive compensation accruals",
    "timing of payroll payments",
    "increased headcount",
    "accrual of performance bonuses",
    "timing of tax payments",
    "warranty accruals",
    "restructuring accruals",
]

other_asset_reasons = [
    "prepaid insurance and maintenance contracts",
    "deposits with vendors",
    "income tax refunds receivable",
    "prepaid software licenses",
    "advances to suppliers",
]

liability_reasons = [
    "deferred compensation arrangements",
    "uncertain tax positions",
    "environmental remediation obligations",
    "asset retirement obligations",
    "long-term incentive plan accruals",
]

equity_reasons = [
    "net income and stock issuances",
    "net income partially offset by dividends paid",
    "the public offering completed in {month} {year}",
    "net loss for the year",
    "retention of earnings",
]
# Add these template arrays after the stock_comp_valuation_templates (around line 240)

# CEO and executive compensation templates
ceo_compensation_templates = [
    "{company}'s Chief Executive Officer received total compensation of {currency_code}{amount} {money_unit} for {year}, consisting of {currency_code}{salary} {money_unit} in base salary, {currency_code}{bonus} {money_unit} in cash bonuses, and {currency_code}{equity} {money_unit} in equity awards",
    "For the year ended {month} {end_day}, {year}, the CEO's compensation package totaled {currency_code}{amount} {money_unit}, including base salary of {currency_code}{salary} {money_unit} and performance-based incentives of {currency_code}{bonus} {money_unit}",
    "Total compensation for the Chief Executive Officer was {currency_code}{amount} {money_unit} in {year}, compared to {currency_code}{prev_amount} {money_unit} in {prev_year}",
    "The CEO received {currency_code}{amount} {money_unit} in total compensation during {year}, comprised of salary, annual incentive compensation, and long-term equity grants",
]

executive_compensation_templates = [
    "Total compensation for {company}'s five highest-paid executives was {currency_code}{amount} {money_unit} for {year}",
    "The named executive officers received aggregate compensation of {currency_code}{amount} {money_unit} in {year}, including {currency_code}{equity} {money_unit} in stock-based awards",
    "Compensation for senior management totaled {currency_code}{amount} {money_unit} during {year}, representing {increase_decrease} of {change}% from the prior year",
    "Executive compensation expense, including salaries, bonuses, and equity awards, totaled {currency_code}{amount} {money_unit} for the year ended {month} {end_day}, {year}",
]

equity_grant_templates = [
    "In {month} {year}, the CEO was granted {shares} restricted stock units with a grant-date fair value of {currency_code}{amount} {money_unit}, vesting over {years} years",
    "{company} granted the Chief Executive Officer {shares} stock options in {year} with an exercise price of {currency_code}{price} per share and a ten-year term",
    "Performance share units representing {shares} shares at target were awarded to the CEO in {year}, with vesting contingent upon achievement of {metric}",
    "The CEO received a grant of {shares} restricted shares valued at {currency_code}{amount} {money_unit} during {year}, subject to {vesting_period} vesting",
]

performance_metrics = [
    "revenue growth and earnings per share targets",
    "total shareholder return relative to peer companies",
    "operating margin and return on invested capital goals",
    "strategic objectives and financial performance targets",
    "revenue, EBITDA, and market share milestones",
]

vesting_periods = [
    "three-year cliff",
    "four-year ratable",
    "three-year graded",
    "performance-based",
    "time-based annual",
]

severance_templates = [
    "{company} maintains change-in-control agreements with executive officers providing for severance payments equal to {multiple} times base salary and target bonus upon qualifying termination",
    "Under the CEO's employment agreement, the executive is entitled to severance of {currency_code}{amount} {money_unit} upon termination without cause",
    "Change-in-control provisions in executive employment agreements provide for accelerated vesting of equity awards and cash severance payments",
    "{company}'s severance arrangements with named executive officers could result in payments totaling {currency_code}{amount} {money_unit} upon a change in control",
]

employment_agreement_templates = [
    "{company} entered into an employment agreement with its Chief Executive Officer in {month} {year} providing for an annual base salary of {currency_code}{salary} {money_unit} and target annual bonus of {bonus_pct}% of salary",
    "The CEO's employment agreement, effective {month} {year}, includes a base salary of {currency_code}{salary} {money_unit} with annual merit increase eligibility and participation in long-term incentive programs",
    "Under the terms of the CEO employment agreement, the executive receives an annual base salary of {currency_code}{salary} {money_unit}, subject to annual review by the Board of Trustees",
    "The employment agreement with the Chief Executive Officer provides for base compensation of {currency_code}{salary} {money_unit} and eligibility for annual performance bonuses up to {bonus_pct}% of base salary",
]

compensation_committee_templates = [
    "The Compensation Committee of the Board of Directors reviews and approves all executive compensation, including salary, bonuses, and equity grants",
    "Executive compensation decisions are made by the Compensation Committee based on peer group benchmarking and company performance",
    "The Compensation Committee engaged {consultant} as its independent compensation consultant to advise on executive pay practices",
    "Annual executive compensation is determined by the Compensation Committee after considering financial performance, individual contributions, and market data",
]

say_on_pay_templates = [
    "At the {year} annual meeting, shareholders approved {company}'s executive compensation program with {pct}% support",
    "{company}'s say-on-pay proposal received {pct}% approval from shareholders at the annual meeting held in {month} {year}",
    "Shareholders voted to approve executive compensation on an advisory basis, with {pct}% of votes cast in favor",
    "The advisory vote on executive compensation was approved by {pct}% of shares voted at the {year} annual meeting",
]

deferred_comp_templates = [
    "Certain executives participate in a non-qualified deferred compensation plan allowing deferral of up to {pct}% of base salary and {bonus_pct}% of bonuses",
    "{company} maintains a deferred compensation plan for executives with a total liability of {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}",
    "Executive officers may elect to defer receipt of cash bonuses and equity awards under {company}'s non-qualified deferred compensation plan",
    "Deferred compensation obligations to executives totaled {currency_code}{amount} {money_unit} at year-end {year}, primarily invested in mutual fund equivalents",
]

perquisites_templates = [
    "Perquisites provided to executive officers include car allowances, financial planning services, and executive health screenings, totaling {currency_code}{amount} for the CEO in {year}",
    "The CEO received perquisites valued at {currency_code}{amount} during {year}, consisting primarily of {perq_type}",
    "Executive perquisites are limited and totaled {currency_code}{amount} for all named executive officers in aggregate for {year}",
    "{company} provides minimal perquisites to executives, with the CEO receiving {currency_code}{amount} in {year} for {perq_type}",
]

perq_types = [
    "security services and travel expenses",
    "automobile allowance and financial planning",
    "club memberships and travel-related expenses",
    "tax preparation and financial advisory services",
    "company aircraft usage for business travel",
]

clawback_templates = [
    "{company} has adopted a clawback policy allowing recovery of incentive compensation in the event of a financial restatement",
    "Executive compensation is subject to recoupment under {company}'s clawback policy in cases of misconduct or financial restatement",
    "The Board may require reimbursement of performance-based compensation under the clawback policy if performance goals are not actually achieved",
    "Incentive compensation paid to executives is subject to clawback provisions as required by the Dodd-Frank Act and SEC regulations",
]
# ========== MARKET PRICES AND TRADING ==========
stock_price_templates = [
    '{company} \'s common stock trades on the {exchange} under the ticker symbol "{ticker}"',
    "Shares of common stock closed at {currency_code}{price} on {month} {end_day}, {year}, compared to {currency_code}{prev_price} at {month} {end_day}, {prev_year}",
    "{company}'s stock price ranged from a low of {currency_code}{low} to a high of {currency_code}{high} during {year}",
    "Average daily trading volume was approximately {volume} shares during {year}",
    "{company}'s market capitalization was approximately {currency_code}{market_cap} {money_unit} as of {month} {end_day}, {year}",
    "Shares outstanding totaled {shares} as of {month} {end_day}, {year}",
    "The closing stock price on {month} {end_day}, {year} represented a {direction} of {pct}% from the prior year-end closing price",
]

exchanges = [
    "New York Stock Exchange",
    "NASDAQ Global Select Market",
    "NASDAQ Capital Market",
    "NYSE American",
    "London Stock Exchange",
]


trading_volume_templates = [
    "During {year}, approximately {volume} shares were traded on public exchanges",
    "{company}'s shares experienced {volatility} trading activity during {year}",
    "Average daily trading volume increased {pct}% in {year} compared to {prev_year}",
    "Trading liquidity {improved_decreased} during {year}, with average daily volume of {volume} shares",
]

volatility_levels = ["elevated", "moderate", "reduced", "increased", "stable"]

# ========== ABOUT {company} / BUSINESS DESCRIPTION ==========
company_description_templates = [
    "{company} is a {industry} company that {business_activity}",
    "{company} operates in the {industry} sector, providing {products_services} to customers in {geography}",
    "{company} was founded in {founding_year} and is headquartered in {city}, {state}",
    "{company} is a leading provider of {products_services} serving the {market_segment} market",
    "{company}'s principal business activities include {activities}",
    "{company} employs approximately {employees} people across {locations} locations worldwide as of {month} {end_day}, {year}",
    "{company} operates through {segments} reportable segments: {segment_names}",
    "{company}'s mission is to {mission_statement}",
]

industries = [
    "technology",
    "healthcare",
    "manufacturing",
    "consumer goods",
    "financial services",
    "biotechnology",
    "telecommunications",
    "energy",
    "retail",
    "industrial",
]

business_activities = [
    "develops, manufactures, and sells innovative products",
    "provides technology solutions and services to enterprise customers",
    "manufactures and distributes consumer products globally",
    "delivers healthcare services and medical devices",
    "operates a diversified portfolio of businesses",
]

geographies = [
    "North America, Europe, and Asia",
    "over 50 countries worldwide",
    "the United States and international markets",
    "global markets",
    "developed and emerging markets",
]

cities = [
    "San Francisco",
    "New York",
    "Boston",
    "Chicago",
    "Austin",
    "Seattle",
    "Atlanta",
]
states = [
    "California",
    "New York",
    "Massachusetts",
    "Illinois",
    "Texas",
    "Washington",
    "Georgia",
]

segment_examples = [
    "Commercial, Consumer, and International",
    "Products, Services, and Solutions",
    "Domestic and International Operations",
    "Technology, Healthcare, and Industrial",
]

# ========== HEDGE FUNDS AND INSTITUTIONAL OWNERSHIP ==========
institutional_ownership_templates = [
    "As of {month} {end_day}, {year}, institutional investors held approximately {pct}% of {company}'s outstanding shares",
    "{fund_name} reported a {pct}% ownership stake in {company} as of {month} {end_day}, {year}",
    "{company}'s largest shareholders include {fund_name} ({pct}%), {fund_name2} ({pct2}%), and other institutional investors",
    "Beneficial ownership by institutional investors increased to {pct}% as of {month} {end_day}, {year}",
    "Hedge funds and asset managers collectively own approximately {pct}% of outstanding common stock",
    "{fund_name} disclosed a {pct}% position in {company} in its {form} filing dated {month} {year}",
    "Institutional ownership decreased from {prev_pct}% to {pct}% during {year}",
    "{company}'s top ten institutional shareholders hold approximately {pct}% of outstanding shares",
]


sec_forms = ["Schedule 13G", "Schedule 13D", "Form 13F"]

insider_ownership_templates = [
    "Directors and executive officers collectively beneficially own approximately {pct}% of outstanding common stock as of {month} {end_day}, {year}",
    "{company}'s Chief Executive Officer owns {shares} shares, representing {pct}% of shares outstanding",
    "Insider transactions during {year} included {action} of {shares} shares by executive officers and directors",
    "As of {month} {end_day}, {year}, executive officers and directors held options to purchase {shares} shares of common stock",
]

insider_actions = [
    "purchases",
    "sales",
    "exercises",
    "grants",
    "net purchases",
    "net sales",
]

# ========== FORWARD-LOOKING STATEMENTS ==========
forward_looking_templates = [
    "This report contains forward-looking statements within the meaning of the Private Securities Litigation Reform Act of 1995",
    "Forward-looking statements include, but are not limited to, statements regarding {topics}",
    'Words such as "{words}" and similar expressions identify forward-looking statements',
    "These forward-looking statements are subject to risks and uncertainties that could cause actual results to differ materially from those projected",
    "{company} cautions that forward-looking statements are not guarantees of future performance and involve known and unknown risks",
    "{company} undertakes no obligation to update or revise forward-looking statements, whether as a result of new information, future events, or otherwise",
    "Forward-looking statements are based on management's current expectations and assumptions as of the date of this report",
    "Factors that could cause actual results to differ from forward-looking statements include {risk_factors}",
    "Investors should not place undue reliance on forward-looking statements, which speak only as of {month} {end_day}, {year}",
    "All forward-looking statements are qualified in their entirety by reference to the risk factors discussed in Item 1A of this report",
]

forward_looking_topics = [
    "expected financial performance, growth strategies, and market opportunities",
    "anticipated product launches, regulatory approvals, and business development initiatives",
    "projected capital expenditures, cost reduction initiatives, and operational improvements",
    "expected market conditions, competitive dynamics, and customer demand",
]

forward_looking_words = [
    "expects, anticipates, intends, plans, believes, seeks, estimates, may, will, should, would, could",
    "projects, forecasts, targets, goals, likely, potential, continue, future, outlook",
    "positioned, strategy, opportunity, momentum, trajectory",
]

risk_factors_examples = [
    "economic conditions, competitive pressures, regulatory changes, and operational challenges",
    "market volatility, supply chain disruptions, technological changes, and geopolitical events",
    "customer demand fluctuations, pricing pressures, and execution risks",
    "cybersecurity threats, intellectual property risks, and litigation uncertainties",
]

safe_harbor_templates = [
    "Statements in this report that are not historical facts constitute forward-looking statements subject to the safe harbor provisions of the Private Securities Litigation Reform Act",
    "{company} includes forward-looking statements to provide investors with its current expectations and projections, but cautions that such statements involve risks",
    "Safe harbor statement: Except for historical information, this report contains forward-looking statements that involve substantial risks and uncertainties",
    "This document contains forward-looking statements that are protected by the safe harbor provisions for such statements",
]

# ========== ANALYST COVERAGE AND ESTIMATES ==========
analyst_coverage_templates = [
    "{company} is currently covered by {number} equity research analysts",
    "Analyst consensus estimates for {year} project earnings per share of {currency_code}{eps} and revenue of {currency_code}{revenue} {money_unit}",
    "The average analyst price target is {currency_code}{target}, representing {direction} of {pct}% from current levels",
    "{number} analysts have buy ratings, {number2} have hold ratings, and {number3} have sell ratings on the stock",
    "Analyst estimates for {year} range from {currency_code}{low} to {currency_code}{high} per share",
    "{company} does not provide guidance but is followed by several sell-side analysts who publish earnings estimates",
]

# ========== CREDIT RATINGS ==========
credit_rating_templates = [
    "{company}'s senior unsecured debt is rated {rating} by {agency} and {rating2} by {agency2}",
    "{agency} maintains a {rating} credit rating on {company} with a {outlook} outlook",
    "As of {month} {end_day}, {year}, {company} holds investment-grade credit ratings from major rating agencies",
    "{company}'s credit ratings are {rating} ({agency}), {rating2} ({agency2}), and {rating3} ({agency3})",
    "In {month} {year}, {agency} {action} {company}'s credit rating to {rating}",
    "{company} targets maintaining investment-grade credit metrics and ratings",
]

credit_agencies = ["Standard & Poor's", "Moody's", "Fitch Ratings"]
credit_ratings = ["BBB+", "BBB", "BBB-", "A-", "A", "Baa1", "Baa2", "Baa3"]
rating_outlooks = ["stable", "positive", "negative", "under review"]
rating_actions = ["upgraded", "downgraded", "affirmed", "revised"]

# ========== DIVIDEND AND CAPITAL ALLOCATION ==========
dividend_policy_templates = [
    "{company} has paid consecutive quarterly dividends since {year}",
    "In {month} {year}, the Board of Directors declared a quarterly dividend of {currency_code}{amount} per share, payable on {month} {end_day}, {year}",
    "The dividend payout ratio was {pct}% for {year}, compared to {prev_pct}% in {prev_year}",
    "{company} targets returning {pct}% to {pct2}% of free cash flow to shareholders through dividends and share repurchases",
    "Annual dividends totaled {currency_code}{amount} per share in {year}, representing a yield of {pct}% based on year-end stock price",
    "{company} does not currently pay a dividend and retains earnings to fund growth initiatives",
    "Dividend policy is reviewed annually by the Board of Directors based on earnings, cash flows, and capital allocation priorities",
]

share_repurchase_templates = [
    "During {year}, {company} repurchased {shares} shares of common stock for {currency_code}{amount} {money_unit}",
    "The Board of Directors authorized a {currency_code}{amount} {money_unit} share repurchase program in {month} {year}",
    "As of {month} {end_day}, {year}, {currency_code}{remaining} {money_unit} remained available under the current repurchase authorization",
    "Share repurchases totaled {currency_code}{amount} {money_unit} in {year}, compared to {currency_code}{prev_amount} {money_unit} in {prev_year}",
    "{company} opportunistically repurchases shares based on market conditions, capital requirements, and alternative investment opportunities",
    "No shares were repurchased during {year} as {company} prioritized debt reduction and organic growth investments",
]

# ========== COMPETITIVE LANDSCAPE ==========
competition_templates = [
    "{company} operates in a highly competitive industry characterized by {characteristics}",
    "Principal competitors include {competitor1}, {competitor2}, and {competitor3}",
    "{company} competes based on {factors}",
    "Market share in {company}'s primary markets remained relatively stable at approximately {pct}% during {year}",
    "Competitive pressures have intensified due to {reasons}",
    "{company} believes it maintains competitive advantages through {advantages}",
    "Industry consolidation during {year} included the merger of {competitor1} and {competitor2}",
]

competitive_characteristics = [
    "rapid technological change, evolving customer preferences, and new market entrants",
    "price competition, product innovation, and service quality",
    "consolidation, globalization, and regulatory complexity",
    "low barriers to entry and commoditization pressures",
]

competitive_factors = [
    "product quality, innovation, customer service, and brand reputation",
    "pricing, technology, distribution capabilities, and scale",
    "breadth of product portfolio, technical expertise, and customer relationships",
    "operational efficiency, time to market, and total cost of ownership",
]

competitive_advantages = [
    "proprietary technology, strong brand recognition, and established customer relationships",
    "economies of scale, operational excellence, and global footprint",
    "intellectual property portfolio, innovation capabilities, and market leadership",
    "vertically integrated operations, cost structure, and distribution network",
]

# ========== REGULATORY AND COMPLIANCE ==========
regulatory_templates = [
    "{company} is subject to extensive regulation by {regulators} governing {areas}",
    "Compliance with environmental, health, and safety regulations resulted in costs of approximately {currency_code}{amount} {money_unit} during {year}",
    "Changes in regulatory requirements could materially impact {company}'s business operations and financial results",
    "{company} maintains compliance programs and internal controls to ensure adherence to applicable laws and regulations",
    "Regulatory approvals obtained during {year} include {approvals}",
    "Pending regulatory matters include {matters}",
    "{company} incurred {currency_code}{amount} {money_unit} in regulatory compliance costs during {year}",
]

regulators = [
    "the SEC, FDA, and EPA",
    "federal, state, and international regulatory authorities",
    "the FTC, DOJ, and industry-specific agencies",
    "various governmental and regulatory bodies",
]

regulatory_areas = [
    "product safety, environmental protection, and consumer protection",
    "data privacy, cybersecurity, and financial reporting",
    "employment practices, antitrust, and trade compliance",
    "marketing practices, product labeling, and quality standards",
]

# ========== INSURANCE AND RISK MANAGEMENT ==========
insurance_templates = [
    "{company} maintains insurance coverage for property, casualty, general liability, and other risks in amounts considered adequate",
    "Self-insurance reserves totaled {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}",
    "{company} self-insures certain risks including {risks} and purchases insurance for catastrophic losses",
    "Insurance recoveries during {year} totaled {currency_code}{amount} {money_unit} related to {incident}",
    "{company}'s insurance program includes coverage for {coverage_types} with policy limits and deductibles based on industry practices",
    "Risk retention levels are evaluated annually based on claims experience and insurance market conditions",
]

self_insured_risks = [
    "workers' compensation, general liability, and employee health benefits",
    "product liability, auto liability, and property damage below certain thresholds",
    "employment practices liability and certain cyber risks",
]

coverage_types = [
    "property damage, business interruption, product liability, and directors and officers liability",
    "cyber liability, errors and omissions, fiduciary liability, and environmental liability",
    "general liability, auto liability, workers' compensation, and excess umbrella coverage",
]


# ========== FOREIGN CURRENCY RISK/TRANSLATION (NON-DERIVATIVE) ==========

foreign_currency_exposure_templates = [
    "{company} operates in multiple countries and is exposed to foreign currency exchange rate fluctuations {major_currency} in that affect reported revenues and expenses",
    "{company}'s international operations subject it to foreign currency risks, primarily related to the {major_currency}, {currency2}, and {currency3}",
    "Foreign currency transaction in {major_currency} gains and losses are recorded in {location} as incurred",
    "Substantially all of {company}'s foreign subsidiaries use {major_currency} as their local currency",
    "{company}'s results of operations are affected by changes in foreign currency exchange rates, particularly movements in the {major_currency} and {currency2}",
]

foreign_currency_translation_templates = [
    "Assets and liabilities of foreign subsidiaries are translated to {major_currency} at period-end exchange rates, while income and expenses are translated at average exchange rates for the period",
    "Translation adjustments resulting from the process of translating foreign currency financial statements into {major_currency} are recorded in accumulated other comprehensive income",
    "The cumulative translation adjustment recorded in accumulated other comprehensive income was {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}",
    "Foreign currency translation adjustments decreased stockholders' equity by {currency_code}{amount} {money_unit} during {year}",
    "{company} recorded a foreign currency translation loss of {currency_code}{amount} {money_unit} in other comprehensive income for the year ended {month} {end_day}, {year}",
    "The weakening of the {major_currency} against the {currency2} resulted in an unfavorable translation impact of {currency_code}{amount} {money_unit} in {year}",
    "Changes in foreign exchange rates resulted in translation gains of {currency_code}{amount} {money_unit} recorded in other comprehensive income during {year}",
]

foreign_currency_transaction_templates = [
    "Foreign currency transaction gains (losses) included in {location} totaled {currency_code}{amount} {money_unit} for the year ended {month} {end_day}, {year}",
    "{company} recognized foreign exchange losses of {currency_code}{amount} {money_unit} during {year}, primarily related to intercompany balances denominated in {major_currency}",
    "{company} recorded foreign currency transaction losses of {currency_code}{amount} {money_unit} in {year} compared to gains of {currency_code}{prev_amount} {money_unit} in {prev_year}",
    "Foreign exchange gains and losses on remeasurement of monetary assets and liabilities totaled {currency_code}{amount} {money_unit} in {year}",
    "Transaction gains and losses on foreign currency ({major_currency}) denominated receivables and payables are recognized in earnings as exchange rates fluctuate",
]

functional_currency_templates = [
    "The functional currency for most of {company}'s foreign subsidiaries is the local currency of the country in which the subsidiary operates",
    "For subsidiaries operating in highly inflationary economies, the {major_currency} is used as the functional currency",
    "{company} determines the functional currency of each subsidiary based on the primary economic environment in which the entity operates",
    "The functional currencies of {company}'s significant foreign operations include the {major_currency}, {currency2}, and {currency3}",
    "Remeasurement of foreign subsidiary financial statements from local currency to functional currency resulted in gains of {currency_code}{amount} {money_unit} in {year}",
]

fx_impact_on_results_templates = [
    "Foreign currency exchange rate fluctuations had an unfavorable impact on revenues of approximately {currency_code}{amount} {money_unit}, or {pct}%, during {year}",
    "Changes in foreign exchange rates negatively impacted operating income by {currency_code}{amount} {money_unit} in {year}",
    "Foreign currency movements had a favorable effect on revenues of {pct}% in {year}, primarily due to strengthening of the {major_currency}",
    "Excluding the impact of foreign currency translation, revenues would have increased {pct}% in {year} compared to {prev_year}",
    "The translation impact of changes in foreign exchange rates decreased reported revenues by {currency_code}{amount} {money_unit} year-over-year",
    "On a constant currency basis, revenues increased {pct}% compared to the prior year, versus {reported_pct}% on a reported basis",
]

intercompany_fx_templates = [
    "{company} has intercompany loans denominated in various currencies that are remeasured each reporting period with gains and losses recorded in earnings",
    "Intercompany foreign currency transactions resulted in remeasurement losses of {currency_code}{amount} {money_unit} during {year}",
    "{company} has {currency_code}{amount} {money_unit} in intercompany receivables denominated in {major_currency} as of {month} {end_day}, {year}",
    "Remeasurement of intercompany balances denominated in currencies other than the functional currency resulted in losses of {currency_code}{amount} {money_unit} in {year}",
]

# ========== COMMODITY PRICES/RISK/INVENTORY (NON-DERIVATIVE) ==========

commodity_price_exposure_templates = [
    "{company}'s operating results are affected by changes in commodity prices, particularly {commodity} and {commodity2}",
    "{company} is exposed to price volatility for key raw materials including {commodity}, {commodity2}, and {commodity3}",
    "Commodity price fluctuations, particularly for {commodity}, can significantly impact {company}'s cost structure and margins",
    "Raw material costs are subject to market volatility, with {commodity} prices ranging from {currency_code}{low_price} to {currency_code}{high_price} per {unit} during {year}",
    "{company}'s operations are sensitive to changes in {commodity} prices, which can affect both revenue and cost of sales",
]

commodity_cost_impact_templates = [
    "Commodity price increases added approximately {currency_code}{amount} {money_unit} to cost of goods sold during {year}",
    "Changes in {commodity} prices unfavorably impacted gross margin by {pct} percentage points in {year}",
    "{company} experienced cost inflation of {currency_code}{amount} {money_unit} in {year}, primarily driven by higher {commodity} and {commodity2} prices",
    "Commodity costs increased {pct}% year-over-year, driven primarily by {commodity} price appreciation",
    "Raw material price increases, particularly for {commodity}, reduced gross profit margin from {prev_pct}% to {pct}% in {year}",
    "{company} absorbed {currency_code}{amount} {money_unit} in commodity cost inflation during {year} through operational efficiencies and pricing actions",
]

commodity_inventory_valuation_templates = [
    "{company} maintains inventory of {commodity} and {commodity2} to support production requirements, exposing {company} to price risk",
    "As of {month} {end_day}, {year}, {company} held {volume} {unit} of {commodity} inventory valued at {currency_code}{amount} million",
    "{company} recorded an inventory writedown of {currency_code}{amount} {money_unit} in {year} due to declines in {commodity} market prices",
    "Commodity inventory is stated at the lower of cost or net realizable value, with cost determined using the {method} method",
    "{company}'s inventory includes {currency_code}{amount} {money_unit} of raw materials subject to commodity price volatility",
    "{company} recognized a {currency_code}{amount} {money_unit} charge related to excess and obsolete {commodity} inventory in {year}",
]

commodity_pricing_strategies_templates = [
    "{company} generally seeks to pass through commodity cost changes to customers through pricing mechanisms, though timing differences can affect margins",
    "{company} has implemented price increases totaling {pct}% to offset {commodity} cost inflation during {year}",
    "Pricing adjustments are typically implemented with a {months}-month lag following changes in {commodity} costs",
    "{company} utilizes index-based pricing formulas for certain products to mitigate the impact of {commodity} price volatility",
    "Customer contracts include provisions that allow {company} to adjust prices in response to significant {commodity} cost movements",
]

commodity_supply_risk_templates = [
    "{company} sources {commodity} from multiple suppliers to mitigate supply chain disruption risk",
    "{company} maintains strategic inventory of {commodity} to buffer against potential supply disruptions",
    "Supply constraints for {commodity} during {year} resulted in increased costs and temporary production delays",
    "{company} has long-term supply agreements for {commodity} covering approximately {pct}% of anticipated requirements",
    "{company} is exposed to concentration risk as {pct}% of {commodity} is sourced from a single region",
]

commodity_exposure_quantification_templates = [
    "A {pct}% change in {commodity} prices would impact annual cost of sales by approximately {currency_code}{amount} {money_unit}",
    "{company} estimates that commodity price volatility could affect operating income by {currency_code}{amount} {money_unit} annually",
    "Each {currency_code}{change} per {unit} change in {commodity} prices impacts annual costs by approximately {currency_code}{amount} {money_unit}",
    "Commodity exposure is concentrated in {commodity} ({pct}% of raw material spend) and {commodity2} ({pct2}% of raw material spend)",
]

physical_commodity_operations_templates = [
    "{company} owns and operates {commodity} production facilities with annual capacity of {volume} {unit}",
    "{company} produced {volume} {unit} of {commodity} during {year}, a {pct}% increase from the prior year",
    "{company}'s {commodity} operations generated revenues of {currency_code}{amount} {money_unit} in {year}",
    "Production costs for {commodity} averaged {currency_code}{cost} per {unit} in {year}, compared to {currency_code}{prev_cost} in {prev_year}",
    "{company} maintains proved reserves of {volume} {unit} of {commodity} as of {month} {end_day}, {year}",
]
 
```

# Main functions
## Shared
```{python}
def pick_company_name(company_name: str) -> str:
    return random.choices([company_name, "The Company"], weights=[0.75, 0.25], k=1)[0]


def generate_value(haveZero=True, upperlimit=1000):
    """Generate a random previous notional value with chance of being zero,
    and optional rounding for variability. Returns int if whole, else float."""
    if haveZero:
        chance = 0.1
    else:
        chance = 0
        
    upperlimit = int(upperlimit)
    value = 0.0 if random.random() < chance else (1
    if upperlimit <= 1 else random.randint(1, upperlimit))

    if random.random() < 0.5:
        divisor = random.choice([10, 100])
        decimals = random.randint(1, 2)
        value = round(value / divisor, decimals)

    # Cast to int if it's a whole number with 50% chance
    if isinstance(value, float) and value.is_integer() and random.random() < 0.5:
        value = int(value)

    return value


def cleanup(paragraph: str, checkBracket: bool = True):
    pattern_we_s.sub("Our", paragraph)
    paragraph = pattern_we_is.sub("We are", paragraph)
    if random.random() < 0.25:  # Chance to replace values with nil
        paragraph = pattern_nil.sub(
            random.choice([" nil", " 0", " 0.0", " 0.00"]), paragraph
        )

    if random.random() < 0.5:
        paragraph = pattern_notional.sub("", paragraph)
    paragraph = pattern_spaces.sub(" ", paragraph)  # Remove extra whitespace
    paragraph = pattern_dots.sub("", paragraph)  # Remove double periods

    if paragraph.find("{") != -1 or (paragraph.find("[") != -1 and checkBracket):
        print("Error in format", paragraph)
    return paragraph
```

## Derivative Liabilties/Warrants
```{python}
def generate_derivative_liability_paragraph(
    label_type,
    max_past_years=random.randint(1, 3),
    year_range=(1990, 2025),
    max_len=random.randint(2, 4),
    company_name=None,
):
    """
    Generate synthetic paragraphs for derivative liabilities/warrants (label 4)
    or embedded derivatives (label 6).

    Args:
        label_type (int): 4 for derivative liabilities/warrants, 6 for embedded derivatives
        year_range (tuple): (min_year, max_year) for reporting year
        max_len (int): Maximum number of sentences

    Returns:
        tuple: (paragraph_text, label)
    """

    current_year = random.randint(year_range[0], year_range[1])
    reporting_year = current_year

    all_sentences = []
    currency_code = random.choice(currency_codes)
    money_units = random.choice(money_unit_list)
    major_currency = random.choice(all_currencies)
    if company_name is None:
        # ~ 75% chance of company name
        if random.random() < 0.85:
            company_name = random.choice(company_names)
        else:
            company_name = "The Company"
    target_companies = [name for name in company_names if name != company_name]

    # ============ LABELS 4 & 5: DERIVATIVE LIABILITIES AND WARRANTS ============
    if label_type in [4, 5]:

        is_past = label_type == 5  # True for label 5, False for label 4

        # For label 5 (past), use historical years
        if is_past:
            past_years = sorted(
                random.sample(
                    range(current_year - 5, current_year),
                    random.randint(1, max_past_years),
                )
            )
            settlement_year = random.choice([current_year - 1, current_year])

        if random.random() < 0.5:
            template = random.choice(warrant_issuance_templates)
            shares = random.choice([50000, 100000, 250000, 500000, 750000, 1000000])
            price = round(random.uniform(1.50, 25.00), 2)
            month = random.choice(months)

            if is_past:
                # Use past years for label 5
                year = random.choice(past_years)
            else:
                # Use current or recent year for label 4
                year = random.choice([current_year, current_year - 1])

            event = random.choice(warrant_events)
            expiry_year = year + random.randint(3, 7)
            sentence = template.format(
                company=pick_company_name(company_name),
                currency_code=currency_code,
                shares=f"{shares:,}",
                price=price,
                month=month,
                year=year,
                event=event,
                expiry_year=expiry_year,
            )
            all_sentences.append(sentence)

        # Add fair value measurement (0-1)
        template = random.choice(warrant_fv_templates)
        amount = round(random.uniform(0.5, 15.0), 1)
        end_day = random.randint(28, 31)
        month = random.choice(months)
        model = random.choice(valuation_models)
        verb = random.choice(assessment_verbs)
        sentence = template.format(
            amount=amount,
            company=pick_company_name(company_name),
            model=model,
            verb=verb,
            currency_code=currency_code,
            month=month,
            end_day=end_day,
            year=current_year,
            money_unit=money_units,
        )
        all_sentences.append(sentence)

        # Add liability classification (0-1)
        template = random.choice(warrant_liability_templates)
        location = random.choice(balance_sheet_locations)
        event = random.choice(warrant_events)
        sentence = template.format(
            location=location, company=pick_company_name(company_name), event=event
        )
        all_sentences.append(sentence)

        # Add general derivative liability (0-1) - only for label 4
        if not is_past:
            template = random.choice(deriv_liability_general_templates)
            amount = round(random.uniform(2.0, 20.0), 1)
            prev_amount = round(amount * random.uniform(0.7, 1.4), 1)
            gain_loss = random.choice(["gain", "loss"])
            model = random.choice(valuation_models)
            sentence = template.format(
                year=current_year,
                amount=amount,
                prev_amount=prev_amount,
                gain_loss=gain_loss,
                month=random.choice(months),
                company=pick_company_name(company_name),
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                model=model,
                end_day=random.randint(28, 31),
            )
            all_sentences.append(sentence)

        # Add down round features (0-1) - only for label 4
        if not is_past and random.random() < 0.4:
            sentence = random.choice(down_round_templates)
            all_sentences.append(sentence.format(company=pick_company_name(company_name)))

        # Add earnout liability (0-1)
        if random.random() < 0.3:
            if is_past:
                # Use past earnout template for label 5
                template = random.choice(earnout_past_templates)
                target = random.choice(target_companies)
                amount = round(random.uniform(5.0, 50.0), 1)
                year = random.choice(past_years)

                sentence = template.format(
                    target=target,
                    amount=amount,
                    year=year,
                    settlement_year=settlement_year,
                    month=random.choice(months),
                    company=pick_company_name(company_name),
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                )
            else:
                # Use current earnout template for label 4
                template = random.choice(earnout_templates)
                target = random.choice(target_companies)
                amount = round(random.uniform(5.0, 50.0), 1)
                year = current_year + random.randint(1, 3)

                sentence = template.format(
                    target=target,
                    amount=amount,
                    year=year,
                    company=pick_company_name(company_name),
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    month=random.choice(months),
                    end_day=random.randint(28, 31),
                )
            all_sentences.append(sentence)

        # Add past-specific templates for label 5
        if is_past:
            for _ in range(0, max_len):
                # Add warrant liability extinguishment (0-1)
                if random.random() < 0.6:
                    template = random.choice(warrant_liability_extinguishment_templates)
                    amount = round(random.uniform(1.0, 10.0), 1)
                    year = random.choice(past_years)

                    sentence = template.format(
                        amount=amount,
                        year=year,
                        month=random.choice(months),
                        settlement_year=settlement_year,
                        company=pick_company_name(company_name),
                        currency_code=currency_code,
                        major_currency=major_currency,
                        money_unit=money_units,
                        end_day=random.randint(28, 31),
                    )
                    all_sentences.append(sentence)
        label = label_type

    # ============ LABELS 6 & 7: EMBEDDED DERIVATIVES ============
    elif label_type in [6, 7]:

        is_past = label_type == 7  # True for label 7, False for label 6

        # For label 7 (past), use historical years
        if is_past:
            past_years = sorted(
                random.sample(
                    range(current_year - 5, current_year),
                    random.randint(1, max_past_years),
                )
            )
            settlement_year = random.choice([current_year - 1, current_year])

        # Add embedded derivative identification (1)
        template = random.choice(embedded_identification_templates)
        host_contract = random.choice(host_contracts)
        sentence = template.format(
            host_contract=host_contract,
            company=pick_company_name(company_name),
            verb=random.choice(assessment_verbs),
        )
        all_sentences.append(sentence)

        # Add embedded derivative types (0-1)
        if random.random() < 0.6:
            template = random.choice(embedded_types_templates)
            embedded_type = random.choice(embedded_types)
            host_contract = random.choice(host_contracts)
            location = random.choice(balance_sheet_locations)

            sentence = template.format(
                embedded_type=embedded_type,
                host_contract=host_contract,
                location=location,
                company=pick_company_name(company_name),
            )
            all_sentences.append(sentence)

        # Add convertible debt scenario (0-1)
        if random.random() < 0.5:
            if is_past:
                # Use redemption template for label 7
                template = random.choice(convertible_debt_redemption_templates)
                principal = random.choice([50, 100, 150, 200, 250, 500])
                embedded_fv = round(principal * random.uniform(0.05, 0.15), 1)
                amount = embedded_fv
                month = random.choice(months)
                end_day = random.randint(28, 31)
                year = random.choice(past_years)
                gain_loss = random.choice(["gain", "loss"])
                maturity_year = random.randint(current_year, current_year + 5)
                sentence = template.format(
                    principal=principal,
                    embedded_fv=embedded_fv,
                    amount=amount,
                    month=month,
                    end_day=end_day,
                    year=year,
                    settlement_year=settlement_year,
                    maturity_year=maturity_year,
                    company=pick_company_name(company_name),
                    currency_code=currency_code,
                    money_unit=money_units,
                    gain_loss=gain_loss,
                )
            else:
                # Use issuance template for label 6
                template = random.choice(convertible_debt_templates)
                principal = random.choice([50, 100, 150, 200, 250, 500])
                embedded_fv = round(principal * random.uniform(0.05, 0.15), 1)
                month = random.choice(months)
                year = random.choice([current_year, current_year - 1, current_year - 2])

                sentence = template.format(
                    principal=principal,
                    embedded_fv=embedded_fv,
                    month=month,
                    year=year,
                    company=pick_company_name(company_name),
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                )
            all_sentences.append(sentence)

        # Add fair value measurement (1) - only for label 6
        if not is_past:
            template = random.choice(embedded_fv_templates)
            amount = round(random.uniform(5.0, 50.0), 1)
            prev_amount = round(amount * random.uniform(0.7, 1.3), 1)
            change_direction = "increase" if amount > prev_amount else "decrease"

            sentence = template.format(
                amount=amount,
                year=current_year,
                month=random.choice(months),
                prev_amount=prev_amount,
                prev_year=current_year - 1,
                change_direction=change_direction,
                company=pick_company_name(company_name),
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
            all_sentences.append(sentence)

        # Add valuation methodology (0-1) - only for label 6
        if not is_past and random.random() < 0.6:
            template = random.choice(embedded_valuation_templates)
            model = random.choice(valuation_models)
            assumptions = random.choice(valuation_assumptions)

            sentence = template.format(
                model=model, assumptions=assumptions, company=pick_company_name(company_name)
            )
            all_sentences.append(sentence)

        # Add fair value change (0-1) - only for label 6
        if not is_past and random.random() < 0.5:
            template = random.choice(embedded_fv_change_templates)
            gain_loss = random.choice(["gain", "loss"])
            amount = round(random.uniform(1.0, 20.0), 1)
            location = random.choice(balance_sheet_locations)

            sentence = template.format(
                year=current_year,
                gain_loss=gain_loss,
                month=random.choice(months),
                amount=amount,
                location=location,
                company=pick_company_name(company_name),
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
            all_sentences.append(sentence)

        # Add clearly and closely related analysis (0-1) - only for label 6
        if not is_past and random.random() < 0.4:
            sentence = random.choice(ccr_analysis_templates)
            verb = random.choice(assessment_verbs)
            sentence = sentence.format(verb=verb, company=pick_company_name(company_name))
            all_sentences.append(sentence)

        # Add settlement activity (0-1)
        if random.random() < 0.3:
            template = random.choice(embedded_settlement_templates)
            month = random.choice(months)
            quarter = random.choice(quarters)
            principal = random.choice([25, 50, 100, 150])
            amount = round(random.uniform(2.0, 15.0), 1)
            gain_loss = random.choice(["gain", "loss"])

            year_to_use = settlement_year if is_past else current_year

            sentence = template.format(
                month=month,
                year=year_to_use,
                quarter=quarter,
                principal=principal,
                amount=amount,
                gain_loss=gain_loss,
                company=pick_company_name(company_name),
                currency_code=currency_code,
                money_unit=money_units,
            )
            all_sentences.append(sentence)

        # Add embedded FX derivatives (0-1) - only for label 6
        if not is_past and random.random() < 0.3:
            template = random.choice(embedded_fx_templates)
            host_contract = random.choice(host_contracts)
            currency_pair = random.choice(currency_pairs)
            sentence = template.format(
                host_contract=host_contract,
                currency_pair=currency_pair,
                company=pick_company_name(company_name),
            )
            all_sentences.append(sentence)

        # Add past-specific templates for label 7
        if is_past:
            # Add embedded past templates (1-2)
            for _ in range(random.randint(1, 2)):
                template = random.choice(embedded_past_templates)
                host_contract = random.choice(host_contracts)
                verb = random.choice(hedge_use_verbs)
                month = random.choice(months)
                end_day = random.randint(28, 31)
                year = random.choice(past_years)
                sentence = template.format(
                    host_contract=host_contract,
                    verb=verb,
                    year=year,
                    settlement_year=settlement_year,
                    month=month,
                    current_year=current_year,
                    company=pick_company_name(company_name),
                    end_day=end_day,
                )
                all_sentences.append(sentence)

            # Add no longer outstanding statement (0-1)
            if random.random() < 0.7:
                template = random.choice(embedded_no_longer_outstanding_templates)
                amount = round(random.uniform(5.0, 40.0), 1)
                month = random.choice(months)
                end_day = random.randint(28, 31)
                sentence = template.format(
                    settlement_year=settlement_year,
                    current_year=current_year,
                    month=month,
                    end_day=end_day,
                    amount=amount,
                    company=pick_company_name(company_name),
                    currency_code=currency_code,
                    money_unit=money_units,
                )
                all_sentences.append(sentence)

        label = label_type

    elif label_type == 3:
        label = 3
        for _ in range(0, max_len):
            template = random.choice(
                equity_warrant_templates + equity_warrant_activity_templates
            )
            shares = random.choice([50000, 100000, 250000, 500000, 1000000])
            net_shares = int(shares * 0.7)
            price = round(random.uniform(5.00, 50.00), 2)
            amount = round((shares * price) / 1000000, 1)
            expiry_year = current_year + random.randint(2, 5)
            year = current_year - random.randint(0, 5)
            month = random.choice(months)
            event = random.choice(warrant_events)
            prev_month = random.choice(months)
            value = round(shares * random.uniform(0.25, 0.75), 0)

            sentence = template.format(
                shares=f"{shares:,}",
                net_shares=f"{net_shares:,}",
                price=price,
                expiry_year=expiry_year,
                year=year,
                amount=amount,
                month=month,
                prev_month=prev_month,
                prev_year=year - random.randint(1, 2),
                company=pick_company_name(company_name),
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                event=event,
                quarter=random.choice(quarters),
                value=value,
            )
            all_sentences.append(sentence)
        # Non-cash transactions and equity dilution
        for _ in range(0, max_len):
            noncash_type = random.choice(
                [
                    "stock_debt",
                    "registration",
                    "market_impact",
                    "warrant_adjustment",
                    "fair_value",
                    "share_reservation",
                    "outstanding_options",
                    "dilution_concern",
                    "capital_raising",
                ]
            )
            month = random.choice(months)
            year = random.choice([current_year, current_year - 1])
            end_day = random.randint(28, 31)

            if noncash_type == "stock_debt":
                template = random.choice(stock_debt_issuance_templates)
                shares = random.choice([10000, 15000, 20000, 25000, 50000])
                shares1 = random.choice([10000, 15000, 20000, 25000])
                shares2 = int(shares1 * random.uniform(0.4, 0.6))
                value = round(shares * random.uniform(8, 15) / 1000, 0)
                value1 = round(shares1 * random.uniform(8, 15) / 1000, 0)
                value2 = round(shares2 * random.uniform(2, 8) / 1000, 0)
                financing_type = random.choice(financing_types)

                sentence = template.format(
                    company=pick_company_name(company_name),
                    month=month,
                    year=year,
                    financing_type=financing_type,
                    shares=f"{shares:,}",
                    shares1=f"{shares1:,}",
                    shares2=f"{shares2:,}",
                    value=f"{value:,}",
                    value1=f"{value1:,}",
                    value2=f"{value2:,}",
                    currency_code=currency_code,
                )

            elif noncash_type == "registration":
                template = random.choice(registration_statement_templates)
                shares = random.choice([500000, 1000000, 1500000, 2000000, 3000000])
                days = random.choice([30, 60, 90, 120])

                sentence = template.format(
                    company=pick_company_name(company_name),
                    month=month,
                    year=year,
                    shares=f"{shares:,}",
                    days=days,
                )

            elif noncash_type == "market_impact":
                template = random.choice(market_impact_templates)
                shares = random.choice([500000, 1000000, 2000000, 3000000])

                sentence = template.format(
                    company=pick_company_name(company_name), shares=f"{shares:,}"
                )

            elif noncash_type == "warrant_adjustment":
                template = random.choice(warrant_adjustment_templates)
                shares = random.choice([100000, 200000, 333334, 500000])
                shares1 = int(shares * random.uniform(1.2, 1.8))
                price = round(random.uniform(2.00, 10.00), 2)
                price2 = round(price * random.uniform(0.5, 0.8), 2)

                sentence = template.format(
                    month=month,
                    year=year,
                    shares=f"{shares:,}",
                    shares1=f"{shares1:,}",
                    price=f"{price:.2f}",
                    price2=f"{price2:.2f}",
                    currency_code=currency_code,
                )

            elif noncash_type == "fair_value":
                template = random.choice(fair_value_snapshot_templates)
                shares = random.choice([500000, 1000000, 1500000])
                value = round(shares * random.uniform(3, 12) / 1000000, 1)
                value1 = round(random.uniform(2, 10), 1)
                value2 = round(random.uniform(2, 10), 1)

                sentence = template.format(
                    company=pick_company_name(company_name),
                    month=month,
                    year=year,
                    end_day=end_day,
                    shares=f"{shares:,}",
                    value=f"{value:.1f}",
                    value1=f"{value1:.1f}",
                    value2=f"{value2:.1f}",
                    currency_code=currency_code,
                )

            elif noncash_type == "share_reservation":
                template = random.choice(share_reservation_templates)
                shares = random.choice([1000000, 2000000, 3000000, 5000000])
                shares1 = random.choice([500000, 750000, 1000000])
                shares2 = random.choice([250000, 500000, 750000])

                sentence = template.format(
                    company=pick_company_name(company_name),
                    month=month,
                    year=year,
                    end_day=end_day,
                    shares=f"{shares:,}",
                    shares1=f"{shares1:,}",
                    shares2=f"{shares2:,}",
                )

            elif noncash_type == "outstanding_options":
                template = random.choice(outstanding_options_templates)
                shares = random.choice([500000, 750000, 1000000, 1500000])
                shares1 = int(shares * random.uniform(0.4, 0.7))
                price = round(random.uniform(5.00, 25.00), 2)
                end_year = year + random.randint(5, 10)

                sentence = template.format(
                    company=pick_company_name(company_name),
                    month=month,
                    year=year,
                    end_day=end_day,
                    end_year=end_year,
                    shares=f"{shares:,}",
                    shares1=f"{shares1:,}",
                    price=f"{price:.2f}",
                    currency_code=currency_code,
                )

            elif noncash_type == "dilution_concern":
                template = random.choice(dilution_concern_templates)
                shares = random.choice([1000000, 2000000, 3000000, 5000000])
                shares1 = int(shares * random.uniform(0.5, 0.8))
                pct = round(random.uniform(10, 35), 1)

                sentence = template.format(
                    company=pick_company_name(company_name),
                    month=month,
                    year=year,
                    end_day=end_day,
                    shares=f"{shares:,}",
                    shares1=f"{shares1:,}",
                    pct=pct,
                )

            elif noncash_type == "capital_raising":
                template = random.choice(capital_raising_impact_templates)
                shares = random.choice([1000000, 2000000, 3000000])

                sentence = template.format(
                    company=pick_company_name(company_name), shares=f"{shares:,}"
                )

            all_sentences.append(sentence)

    else:
        raise ValueError("Must be 3 4 5 6 7")

    # Shuffle and select
    random.shuffle(all_sentences)
    selected_sentences = all_sentences[:max_len]
    selected_sentences = [s[0].upper() + s[1:] if s else "" for s in all_sentences]
    # Create paragraph
    paragraph = (
        f"<reportingYear>{reporting_year}</reportingYear> "
        + ". ".join(selected_sentences)
        + "."
    )
    # Clean up common formatting issues
    paragraph = cleanup(paragraph)
    return paragraph, label
```

## Hedges
```{python}
def generate_labeled_hedge_paragraph(
    has_active_derivative,
    swapType=None,  # Added parameter
    year_range=(1990, 2025),
    max_past_years=3,
    max_len=random.randint(2, 3),
    include_policy=None,
    company_name=None,
):
    """
        Generate a synthetic hedge paragraph with known label.

        Args:
            has_active_derivative (bool or None):
                - True: firm has active derivative in reporting year (label=0)
                - False: firm does not have active derivative (label=1)
                - None: policy/disclosure only, no specific positions (label=2)
            swap_type (str): Type of derivative ('ir', 'fx', 'cp', 'gen')
            year_range (tuple): (min_year, max_year) for the reporting year
            max_past_years (int): Max number of prior years to include
            max_len (int): Maximum number of sentences
            include_policy (bool): Whether to include policy sentences with labels 0/1
                                  If None, randomly decides (70% chance)
            company_name (str): Company name to use

        Returns:
            tuple: (paragraph_text, label) where label {
      "id2label": {
        "0": "Derivative",
        "1": "IR_Hedge",
        "2": "FX_Hedge",
        "3": "CP_Hedge",
        "4": "Equity_or_Warrant",
        "5": "Embedded_Derivative",
        "6": "Current",
        "7": "Historic",
        "8": "Speculative_or_Policy",
        "9": "Debt_Context",
        "10": "FX_Context",
        "11": "Equity_Context",
        "12": "Commodity_or_Inventory_Context",
        "13": "Embedded_Context",
        "14": "Speculative_Context",
        "15": "General_Context",
        "16": "Irrelevant"
      }
    }
    """

    labels  = [0 for _ range(16)]  
    # Decide whether to include policy statements for labels 0 and 1
    if include_policy is None:
        include_policy = random.random() < 0.15

    # If label 2 (policy only), override to ensure policy is included
    if has_active_derivative is None:
        include_policy = True

    if company_name is None:
        # ~ 75% chance of company name
        if random.random() < 0.75:
            company_name = random.choice(company_names)
        else:
            company_name = "The Company"

    # Determine swap type if not provided
    if swapType is None:
        swapType = random.choice(["ir", "fx", "cp", "gen", "mixed"])

    # Handle mixed swap types
    if swapType == "mixed":
        # Select 2-3 types to mix
        num_types = random.randint(2, 3)
        selected_types = random.sample(["ir", "fx", "cp"], num_types)

        # Combine swap_types from selected categories
        swap_types = []
        for st in selected_types:
            swap_types.extend(derivative_keywords[st])
        swap_types = list(dict.fromkeys(swap_types))  # Remove duplicates

        # Store which types we're mixing for later use
        mixed_types = selected_types
    else:
        swap_types = derivative_keywords[swapType]
        mixed_types = None

    money_units = random.choice(money_unit_list)
    currency_code = random.choice(currency_codes)
    major_currency = random.choice(all_currencies)

    # Set up years
    current_year = random.randint(year_range[0], year_range[1])
    reporting_year = current_year
    num_past_years = random.randint(1, max_past_years)
    past_years = sorted(
        random.sample(range(current_year - 5, current_year), num_past_years)
    )

    commodity = random.choice(commodities)

    all_sentences = []
    
    # Determine label
    if has_active_derivative is None:
        if swapType == "gen":
            label = 2  # Gen/Unknown Hedge Der. Speculative/Policy
        elif swapType == "ir":
            label = 14  # IR Hedge Speculative/Policy
        elif swapType == "fx":
            label = 15  # FX Hedge Speculative/Policy
        elif swapType == "cp":
            label = 16  # CP Hedge Speculative/Policy

    elif has_active_derivative is True:
        if swapType == "gen":
            label = 0  # Gen/Unknown Hedge Der.
        elif swapType == "ir":
            label = 8  # IR Hedge
        elif swapType == "fx":
            label = 10  # FX Hedge
        elif swapType == "cp":
            label = 12  # CP Hedge

    else:
        if swapType == "gen":
            label = 1  # Gen/Unknown Hedge Der. Historic
        elif swapType == "ir":
            label = 9  # IR Hedge Historic
        elif swapType == "fx":
            label = 11  # FX Hedge Historic
        elif swapType == "cp":
            label = 13  # CP Hedge Historic

    def generate_fx_policy(current=False):
        sentences = []
        if current:
            verbs = hedge_use_verbs
            mit_verbs = hedge_mitigation_verbs
        else:
            verbs = hedge_may_use_verbs
            mit_verbs = hedge_may_mitigation_verbs
        selected_fx = []
        for _ in range(3):
            selected_fx.append(random.choice(swap_types))
            if random.random() < 0.5:
                break
        selected_fx_list = (
            ", ".join(selected_fx[:-1]) + " and " + selected_fx[-1]
            if len(selected_fx) > 1
            else selected_fx[0]
        )
        # Context sentences
        template = random.choice(fx_context_templates)
        sentences.append(template.format(company=pick_company_name(company_name)))

        # Impact sentences
        template = random.choice(fx_impact_templates)
        verb = random.choice(hedge_change_verbs)
        sentences.append(
            template.format(
                company=pick_company_name(company_name),
                major_currency=major_currency,
                verb=verb,
            )
        )

        # Mitigation sentences
        template = random.choice(fx_mitigation_templates)
        verb = random.choice(mit_verbs)
        swap_verb = random.choice(verbs)
        sentences.append(
            template.format(
                company=pick_company_name(company_name),
                verb=verb,
                swap_types=selected_fx_list,
                swap_verb=swap_verb,
                major_currency=major_currency,
            )
        )
        # May use hedge
        template = random.choice(fx_may_use_templates)
        verb = random.choice(verbs)
        sentences.append(
            template.format(
                company=pick_company_name(company_name),
                verb=verb,
                swap_types=selected_fx_list,
            )
        )
        # Alternative management (0-1)
        template = random.choice(fx_alternative_management_templates)
        may_verb = random.choice(hedge_may_use_verbs)
        use_verb = random.choice(verbs)
        sentences.append(
            template.format(
                may_verb=may_verb,
                use_verb=use_verb,
                swap_types=selected_fx_list,
                company=pick_company_name(company_name),
            )
        )
        # Generic hedge (0-1)
        template = random.choice(fx_generic_hedge_templates)
        verb = random.choice(verbs)
        hedge_type = random.choice(hedge_types)
        sentences.append(
            template.format(
                company=pick_company_name(company_name),
                verb=verb,
                hedge_type=hedge_type,
                swap_types=selected_fx_list,
            )
        )

        # Specific hedge (0-1)
        template = random.choice(fx_specific_hedge_templates)
        swap_type = random.choice(swap_types)
        notional_currency = random.choice(currency_codes)
        notional_amount = generate_value(False)
        expiry_year = current_year + 1
        currency_pair = random.choice(currency_pairs)
        hedged_item = random.choice(hedged_items)
        sentence = template.format(
            company=pick_company_name(company_name),
            swap_type=swap_type,
            notional_currency=notional_currency,
            notional_amount=notional_amount,
            money_unit=money_units,
            expiry_year=expiry_year,
            currency_pair=currency_pair,
            hedged_item=hedged_item,
        )
        sentences.append(sentence)

        # Cash pooling arrangements (0-1)
        template = random.choice(fx_cash_pooling_templates)
        verb = random.choice(verbs)
        sentences.append(
            template.format(
                company=pick_company_name(company_name),
                verb=verb,
                major_currency=major_currency,
            )
        )

        # Debt optimization strategies (0-1)
        template = random.choice(fx_debt_optimization_templates)
        verb = random.choice(verbs)
        sentence = template.format(
            company=pick_company_name(company_name),
            verb=verb,
            currency_code=currency_code,
            swap_type=random.choice(swap_types),
            swap_types=selected_fx_list,
        )
        sentences.append(sentence)

        # Collar strategy
        template = random.choice(fx_strategy_templates)
        swap_type = random.choice(swap_types)
        verb = random.choice(hedge_use_verbs)
        collar_year = random.choice(past_years) if past_years else current_year
        if current:
            collar_year = current_year
        sentence = template.format(
            company=pick_company_name(company_name),
            verb=verb,
            swap_type=swap_type,
            quarter=random.choice(quarters),
            month=random.choice(months),
            year=collar_year,
            major_currency=major_currency,
        )
        sentences.append(sentence)
        return sentences

    def generate_ir_policy(current=False):
        sentences = []
        if current:
            verbs = hedge_use_verbs
            mit_verbs = hedge_mitigation_verbs
        else:
            verbs = hedge_may_use_verbs
            mit_verbs = hedge_may_mitigation_verbs
        selected_ir = []
        for _ in range(3):
            selected_ir.append(random.choice(swap_types))
            if random.random() < 0.5:
                break
        selected_ir_list = (
            ", ".join(selected_ir[:-1]) + " and " + selected_ir[-1]
            if len(selected_ir) > 1
            else selected_ir[0]
        )
        # Context sentences
        verb = random.choice(verbs)
        template = random.choice(ir_context_templates)
        sentences.append(
            template.format(
                company=pick_company_name(company_name),
                verb=verb,
                swap_types=selected_ir_list,
            )
        )
        template = random.choice(fx_ir_context_templates)
        sentences.append(template.format(company=pick_company_name(company_name)))
        # Mitigation sentences
        template = random.choice(fx_ir_mitigation_templates)
        verb = random.choice(mit_verbs)
        sentences.append(
            template.format(
                company=pick_company_name(company_name),
                verb=verb,
                swap_types=selected_ir_list,
            )
        )
        # May use hedge
        template = random.choice(ir_may_use_templates)
        verb = random.choice(verbs)
        swap_type = random.choice(swap_types)
        sentences.append(
            template.format(
                company=pick_company_name(company_name),
                verb=verb,
                swap_types=selected_ir_list,
            )
        )
        # Optional hedging template (0-1)
        template = random.choice(ir_optional_templates)
        verb = random.choice(verbs)
        swap_type = random.choice(swap_types)
        hedge_type = random.choice(hedge_types)
        sentence = template.format(
            company=pick_company_name(company_name),
            verb=verb,
            swap_types=selected_ir_list,
            hedge_type=hedge_type,
        )
        sentences.append(sentence)

        # Debt optimization (0-1)
        template = random.choice(ir_debt_optimization_templates)
        verb = random.choice(verbs)
        sentence = template.format(
            company=pick_company_name(company_name),
            verb=verb,
            swap_types=selected_ir_list,
        )
        sentences.append(sentence)
        return sentences

    def generate_cp_policy(commodity="commodity", current=False):
        sentences = []
        selected_cp = []
        for _ in range(3):
            selected_cp.append(random.choice(swap_types))
            if random.random() < 0.5:
                break
        selected_cp_list = (
            ", ".join(selected_cp[:-1]) + " and " + selected_cp[-1]
            if len(selected_cp) > 1
            else selected_cp[0]
        )
        selected_co = [commodity if not commodity == "commodity" else commodity]
        for _ in range(2):
            selected_co.append(random.choice(commodities))
            if random.random() < 0.5:
                break
        selected_co_list = (
            ", ".join(selected_co[:-1]) + " and " + selected_co[-1]
            if len(selected_co) > 1
            else selected_co[0]
        )
        selected_co_list = selected_co_list if random.random() < 0.85 else "commodity"
        if current:
            verbs = hedge_use_verbs
        else:
            verbs = hedge_may_use_verbs
        # Context sentences
        template = random.choice(cp_context_templates)
        verb = random.choice(verbs)
        swap_type = random.choice(swap_types)
        cost_type = random.choice(cost_types)
        volume = generate_value(False)
        volume_unit = random.choice(volume_units)
        months_ahead = random.randint(6, 24)
        price = generate_value(False, 100)
        pct = generate_value(False, 99)
        sentences.append(
            template.format(
                company=pick_company_name(company_name),
                verb=verb,
                commodity=selected_co_list,
                swap_types=selected_cp_list,
                cost_type=cost_type,
                currency_code=currency_code,
                months=months_ahead,
                volume=volume,
                volume_unit=volume_unit,
                price=price,
                pct=pct,
            )
        )

        # Impact sentences
        template = random.choice(cp_impact_templates)
        verb = random.choice(hedge_change_verbs)
        cost_type = random.choice(cost_types)
        sentences.append(
            template.format(
                company=pick_company_name(company_name),
                commodity=selected_co_list,
                verb=verb,
                cost_type=cost_type,
            )
        )

        # May use hedge
        template = random.choice(cp_may_use_templates)
        verb = random.choice(verbs)
        swap_type = random.choice(swap_types)
        sentences.append(
            template.format(
                company=pick_company_name(company_name),
                verb=verb,
                swap_types=selected_cp_list,
                commodity=selected_co_list,
            )
        )

        template = random.choice(cp_strategy_templates)
        verb = random.choice(hedge_use_verbs)
        swap_type = random.choice(swap_types)
        amount = generate_value(False)
        notional = generate_value(False)
        event_year = random.choice(past_years) if past_years else current_year
        cost_type = random.choice(cost_types)
        sentence = template.format(
            company=pick_company_name(company_name),
            verb=verb,
            swap_type=swap_type,
            commodity=selected_co_list,
            month=random.choice(months),
            year=event_year,
            quarter=random.choice(quarters),
            currency_code=currency_code,
            amount=amount,
            notional=notional,
            money_unit=money_units,
            cost_type=cost_type,
        )
        sentences.append(sentence)
        return sentences

    def generate_hedge_policy(current=False):
        sentences = []
        if current:
            verbs = hedge_use_verbs
            mit_verbs = hedge_mitigation_verbs
        else:
            verbs = hedge_may_use_verbs
            mit_verbs = hedge_may_mitigation_verbs
        # Context (0-1)
        template = random.choice(hedge_context_templates)
        sentences.append(template.format(company=pick_company_name(company_name)))

        # Impact (0-1)
        template = random.choice(hedge_impact_templates)
        verb = random.choice(hedge_change_verbs)
        sentences.append(
            template.format(
                company=pick_company_name(company_name),
                verb=verb,
            )
        )

        # Mitigation (0-1)
        template = random.choice(hedge_mitigation_templates)
        verb = random.choice(mit_verbs)
        sentences.append(
            template.format(company=pick_company_name(company_name), verb=verb)
        )

        # May use hedge
        may_use_template = random.choice(hedge_may_use_templates)
        verb = random.choice(verbs)
        swap_type = random.choice(swap_types)
        sentences.append(
            may_use_template.format(
                company=pick_company_name(company_name),
                verb=verb,
                swap_type=swap_type,
            )
        )

        # Risk
        materiality_choice = random.choice(materiality)
        template = random.choice(risk_templates)
        item = (
            random.choice(swap_types)
            if random.random() < 0.5
            else random.choice(risk_items_derivative)
        )
        template.format(
            item=item,
            company=pick_company_name(company_name),
            materiality=materiality_choice,
        )
        return sentences

    def generate_hedge_policy_update():
        sentences = []

        # ==============================
        # 1. ISSUANCE STATEMENT
        # ==============================
        template = random.choice(hedge_change_policy_templates)
        issuer = random.choice(shared_issuers)
        standard = random.choice(hedge_standards)
        topic = random.choice(
            [
                "derivatives and hedging",
                "hedging activities",
                "cash flow hedges",
                "fair value hedges",
            ]
        )
        purpose = random.choice(shared_purposes)
        description = random.choice(hedging_descriptions)
        extra = random.choice(hedging_additional_features)

        issue_month = random.choice(months)
        issue_year = random.randint(current_year - 8, current_year)
        effective_year = issue_year + random.randint(2, 4)
        eff_month = random.choice(months)
        eff_day = random.randint(15, 31)

        issuance_sentence = template.format(
            month=issue_month,
            year=issue_year,
            issuer=issuer,
            standard=standard,
            topic=topic,
            purpose=purpose,
            description=description,
            additional_feature=extra,
            eff_month=eff_month,
            eff_day=eff_day,
            eff_year=effective_year,
            company=pick_company_name(company_name),
        )
        sentences.append(issuance_sentence)

        # Optional: Add effective date
        if random.random() < 0.25:
            eff_line = random.choice(shared_effective_date_templates).format(
                company=pick_company_name(company_name),
                month=eff_month,
                day=random.randint(15, 31),
                end_day=random.randint(15, 31),
                year=effective_year,
            )
            sentences.append(eff_line)

        # Optional: Add transition/disclosure/practical expedient
        if random.random() < 0.2:
            trans_line = random.choice(shared_transition_templates).format(
                company=pick_company_name(company_name),
                method=random.choice(shared_adoption_methods),
                feature=random.choice(shared_transition_features),
            )
            sentences.append(trans_line)

        if random.random() < 0.2:
            disclosure_line = random.choice(shared_disclosure_change_templates).format(
                company=pick_company_name(company_name),
                disclosure_topic=random.choice(
                    ["derivative disclosures", "risk management strategies"]
                ),
                disclosure_topic2=random.choice(
                    ["hedge effectiveness", "notional amounts"]
                ),
                year=effective_year,
            )
            sentences.append(disclosure_line)

        if random.random() < 0.15:
            expedient_line = random.choice(shared_practical_expedient_templates).format(
                company=pick_company_name(company_name),
                expedient_description=random.choice(shared_transition_features),
            )
            sentences.append(expedient_line)

        # ==============================
        # 2. ADOPTION STATEMENT
        # ==============================
        adopt_template = random.choice(shared_adoption_status_templates)
        adopt_standard = random.choice(hedge_standards)
        adopt_method = random.choice(shared_adoption_methods)
        adopt_month = random.choice(months)
        adopt_day = random.randint(1, 28)
        adopt_year = random.randint(current_year - 8, current_year + 4)

        adoption_sentence = adopt_template.format(
            company=pick_company_name(company_name),
            standard=adopt_standard,
            method=adopt_method,
            month=adopt_month,
            day=adopt_day,
            year=adopt_year,
        )
        sentences.append(adoption_sentence)

        # Optional: Adoption impact
        if random.random() < 0.25:
            impact_line = random.choice(shared_adoption_impact_templates).format(
                company=pick_company_name(company_name),
                impact=random.choice(
                    [
                        "a reduction in earnings volatility",
                        "an increase in OCI from effective hedge portions",
                        "no material impact on the consolidated financial statements",
                    ]
                ),
            )
            sentences.append(impact_line)

        # ==============================
        # 3. EVALUATION STATEMENT
        # ==============================
        evaluation_sentence = random.choice(shared_evaluation_templates).format(
            company=pick_company_name(company_name)
        )
        sentences.append(evaluation_sentence)

        # Optional: Recently issued pronouncement
        if random.random() < 0.2:
            pronouncement = random.choice(shared_recent_pronouncement_templates).format(
                company=pick_company_name(company_name),
                issuer=random.choice(shared_issuers),
                standard=random.choice(hedge_standards),
                topic=random.choice(
                    [
                        "hedging relationships",
                        "cash flow hedge presentation",
                        "fair value hedge accounting",
                    ]
                ),
                month=random.choice(months),
                year=random.randint(current_year - 2, current_year),
                adoption_year=random.randint(current_year, current_year + 3),
            )
            sentences.append(pronouncement)

        return sentences

    def expire_hedge():
        sentences = []
        # Termination (0-1)
        if random.random() < 0.05:
            template = random.choice(hedge_termination_templates)
            swap_type = random.choice(swap_types)
            term_year = random.choice(past_years) if past_years else current_year
            verb = random.choice(hedge_use_verbs)
            sentence = template.format(
                company=pick_company_name(company_name),
                swap_type=swap_type,
                quarter=random.choice(quarters),
                month=random.choice(months),
                year=term_year,
                end_day=random.randint(28, 31),
                verb=verb,
            )
            sentences.append(sentence)

        # Expiration (0-1)
        elif random.random() < 0.05:
            template = random.choice(hedge_expiration_templates)
            verb = random.choice(hedge_use_verbs)
            swap_type = random.choice(swap_types)
            exp_year = random.choice(past_years) if past_years else current_year
            sentence = template.format(
                company=pick_company_name(company_name),
                verb=verb,
                swap_type=swap_type,
                quarter=random.choice(quarters),
                month=random.choice(months),
                year=exp_year,
            )
            sentences.append(sentence)
        elif random.random() < 0.05:
            template = random.choice(hedge_dedesignation_templates)
            swap_type = random.choice(swap_types)
            dedes_year = random.choice(past_years) if past_years else current_year
            sentence = template.format(
                company=pick_company_name(company_name),
                swap_type=swap_type,
                quarter=random.choice(quarters),
                month=random.choice(months),
                year=dedes_year,
                end_day=random.randint(28, 31),
            )
            sentences.append(sentence)
        return sentences

    def generate_additional_events():
        sentences = []
        template = random.choice(hedge_quarterly_event_templates)
        swap_type = random.choice(swap_types)
        past_year = random.choice(past_years)
        notional = generate_value(False)
        settlement = generate_value(False)
        sentence = template.format(
            company=pick_company_name(company_name),
            swap_type=swap_type,
            quarter=random.choice(quarters),
            month=random.choice(months),
            year=past_year,
            currency_code=currency_code,
            notional=notional,
            settlement=settlement,
            money_unit=money_units,
        )
        sentences.append(sentence)
        # Hedge transaction
        template = random.choice(hedge_transaction_templates)
        swap_type = random.choice(swap_types)
        notional = generate_value(False)
        sentences.append(
            template.format(
                company=pick_company_name(company_name),
                swap_type=swap_type,
                notional=notional,
                currency_code=currency_code,
                money_unit=money_units,
            )
        )
        template = random.choice(hedge_fv_position_templates)
        swap_type = random.choice(swap_types)
        position_type = random.choice(position_types)
        amount = generate_value(False)
        oci_amount = generate_value(False)
        oci_action = random.choice(oci_actions)
        sentence = template.format(
            company=pick_company_name(company_name),
            swap_type=swap_type,
            month=random.choice(months),
            end_day=random.randint(28, 31),
            year=current_year if has_active_derivative else current_year - 1,
            currency_code=currency_code,
            amount=amount,
            oci_amount=oci_amount,
            oci_action=oci_action,
            position_type=position_type,
            money_unit=money_units,
        )
        sentences.append(sentence)
        # Optional comparative (0-1)
        template = random.choice(hedge_optional_templates)
        verb = random.choice(hedge_use_verbs)
        swap_type = random.choice(swap_types)
        notional1 = generate_value(False) if has_active_derivative else 0
        notional2 = generate_value()
        year = current_year if has_active_derivative else current_year - 1
        prev_year = year - 1
        prev2_year = prev_year - 1
        sentence = template.format(
            company=pick_company_name(company_name),
            verb=verb,
            swap_type=swap_type,
            month=random.choice(months),
            end_day=random.randint(28, 31),
            year=year,
            prev_year=prev_year,
            prev2_year=prev2_year,
            currency_code=currency_code,
            notional1=notional1,
            notional2=notional2,
            money_unit=money_units,
        )
        sentences.append(sentence)
        return sentences

    def generate_derivative_sentences(positionOnly=False):
        """Generate derivative-related sentences for FX, IR, CP, or generic types."""
        sentences = []

        # --- Common fields ---
        verb = random.choice(hedge_use_verbs)
        swap_type = random.choice(swap_types)
        commodity = random.choice(commodities)
        cost_type = random.choice(cost_types)
        hedge_type = random.choice(hedge_types)

        month = random.choice(months)
        end_day = random.randint(28, 31)
        quarter = random.choice(quarters)

        selected_swap = []
        for _ in range(3):
            selected_swap.append(random.choice(swap_types))
            if random.random() < 0.5:
                break
        selected_swap_list = (
            ", ".join(selected_swap[:-1]) + " and " + selected_swap[-1]
            if len(selected_swap) > 1
            else selected_swap[0]
        )

        # --- FX: add currency description sentence (0-1 chance) ---
        if swapType == "fx" and random.random() < 0.6:
            selected = random.sample(major_currencies, random.randint(2, 3))
            if random.random() < 0.5:
                selected += random.sample(european_currencies, random.randint(1, 2))
            if random.random() < 0.4:
                selected += random.sample(asian_currencies, random.randint(1, 2))
            if random.random() < 0.3:
                selected += random.sample(americas_currencies, random.randint(1, 2))
            selected = list(dict.fromkeys(selected))
            currency_list = (
                ", ".join(selected[:-1]) + " and " + selected[-1]
                if len(selected) > 1
                else selected[0]
            )
            if random.random() < 0.3:
                currency_list += " and other European and Latin American currencies"
            sentences.append(
                random.choice(fx_currency_templates).format(
                    company=pick_company_name(company_name),
                    currencies=currency_list,
                )
            )
        # IR: Add a chance of debt
        if swapType == "ir" and random.random() < 0.15:
            debt_type_list = []
            # Build the debt type combination
            for _ in range(3):
                debt_type_list.append(random.choice(debt_types_list))
                if random.random() < 0.95:
                    break
            selected_debt = (
                ", ".join(debt_type_list[:-1]) + " and " + debt_type_list[-1]
                if len(debt_type_list) > 1
                else debt_type_list[0]
            )
            for _ in range(random.randint(1, 3)):
                template = random.choice(debt_templates)
                amount = generate_value(False)
                amount2 = generate_value(False)
                pct = generate_value(False, 8)
                pct2 = generate_value(False, 20)
                outstanding = random.randint(0, int(amount) // 2)
                debt_type = random.choice(debt_types_list)
                maturity_year = current_year + random.randint(3, 10)
                years = random.randint(3, 10)
                sentence = template.format(
                    amount=amount,
                    amount2=amount2,
                    year=maturity_year,
                    month=month,
                    outstanding=outstanding,
                    current_year=current_year,
                    debt_types=selected_debt,
                    debt_type=debt_type,
                    maturity_year=maturity_year,
                    company=pick_company_name(company_name),
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=end_day,
                    pct=pct,
                    pct2=pct2,
                    years=years,
                    hedge_type=hedge_type,
                )
                sentences.append(sentence)

        # --- Select appropriate template set ---
        chance = random.random() < 0.90 or not has_active_derivative or positionOnly
        if swapType == "fx":
            if chance:
                template = random.choice(fx_position_template)
            else:
                template = random.choice(fx_may_use_templates)
                verb = random.choice(hedge_use_verbs)
        elif swapType == "ir":
            if chance:
                template = random.choice(ir_position_template)
            else:
                template = random.choice(ir_may_use_templates)
                verb = random.choice(hedge_use_verbs)
        elif swapType == "cp":
            if chance:
                template = random.choice(cp_position_template)
            else:
                template = random.choice(cp_may_use_templates)
                verb = random.choice(hedge_use_verbs)
        else:
            if chance:
                # generic fallback
                template = random.choice(
                    hedge_position_templates
                    if random.random() < 0.85
                    else eq_position_templates
                )
            else:
                template = random.choice(hedge_may_use_templates)
                verb = random.choice(hedge_use_verbs)

        # --- Time logic ---
        year = current_year if has_active_derivative else current_year - 1
        prev_year, prev2_year = year - 1, year - 2
        old_year = random.choice(past_years) - 1 if past_years else prev_year
        future_year = (
            random.randint(current_year + 1, current_year + 5)
            if has_active_derivative
            else random.randint(old_year - 1, prev_year)
        )

        # --- Notionals ---
        notional = (
            generate_value(False)
            if has_active_derivative
            else (generate_value(False) if random.random() < 0.5 else 0)
        )
        prev_notional = generate_value()
        prev2_notional = generate_value()
        old_notional = generate_value(False)

        # --- Build main sentence ---
        sentence = template.format(
            company=pick_company_name(company_name),
            verb=verb,
            swap_type=swap_type,
            swap_types=selected_swap_list,
            commodity=commodity,
            month=month,
            end_day=end_day,
            quarter=quarter,
            year=year,
            prev_year=prev_year,
            prev2_year=prev2_year,
            old_year=old_year,
            future_year=future_year,
            currency_code=currency_code,
            notional=notional,
            prev_notional=prev_notional,
            prev2_notional=prev2_notional,
            old_notional=old_notional,
            money_unit=money_units,
            cost_type=cost_type,
            hedge_type=hedge_type,
        )
        sentences.append(sentence)

        # --- Expired hedges for non-active derivatives ---
        if not has_active_derivative:
            sentences.extend(expire_hedge())

        return sentences

    # Label 2: Policy/disclosure only (no specific positions)
    if has_active_derivative is None:
        # Accounting policy (always)
        act_template = random.choice(hedge_policy_templates)
        swap_type = (
            random.choice(swap_types) if random.random() < 0.5 else "derivatives"
        )
        hedge_type = random.choice(hedge_types)
        all_sentences.append(
            act_template.format(
                company=pick_company_name(company_name),
                swap_type=swap_type,
                hedge_type=hedge_type,
            )
        )

        # No trading policy (always)
        nt_template = random.choice(hedge_no_trading_templates)
        all_sentences.append(
            nt_template.format(
                company=pick_company_name(company_name),
                verb=random.choice(hedge_may_use_verbs),
            )
        )
        # Documentation (0-1)
        template = random.choice(hedge_documentation_templates)
        hedge_type = random.choice(hedge_types)
        all_sentences.append(
            template.format(
                company=pick_company_name(company_name),
                hedge_type=hedge_type,
            )
        )

        # Effectiveness (0-1)
        template = random.choice(hedge_effectiveness_templates)
        hedge_type = random.choice(hedge_types)
        swap_type = random.choice(swap_types)
        metric = random.choice(hedge_metrics)
        frequency = random.choice(frequencies)
        verb = random.choice(assessment_verbs)
        method = random.choice(hedge_methods)
        standard = random.choice(hedge_standards)
        sentence = template.format(
            company=pick_company_name(company_name),
            hedge_type=hedge_type,
            swap_type=swap_type,
            metric=metric,
            frequency=frequency,
            verb=verb,
            method=method,
            standard=standard,
        )
        all_sentences.append(sentence)

        # Ineffectiveness (0-1)
        template = random.choice(hedge_ineffectiveness_templates)
        frequency = random.choice(frequencies)
        all_sentences.append(
            template.format(
                company=pick_company_name(company_name),
                frequency=frequency,
            )
        )

        # Discontinuation (0-1)
        template = random.choice(hedge_discontinuation_templates)
        all_sentences.append(
            template.format(
                company=pick_company_name(company_name),
            )
        )

        # Counterparty risk (0-1)
        template = random.choice(hedge_counterparty_templates)
        all_sentences.append(template.format(company=pick_company_name(company_name)))
    # Labels 0 and 1: Specific positions
    else:
        # Past event (0-1)
        if random.random() < 0.10:
            template = random.choice(hedge_no_such_outstanding_template)
            swap_type = random.choice(swap_types)
            verb = random.choice(hedge_use_verbs)
            year = current_year if not has_active_derivative else current_year - 1
            prev_year = year - 1
            prev2_year = prev_year - 1
            sentence = template.format(
                company=pick_company_name(company_name),
                verb=verb,
                swap_type=swap_type,
                month=random.choice(months),
                end_day=random.randint(28, 31),
                year=year,
                prev_year=prev_year,
                prev2_year=prev2_year,
                quarter=random.choice(quarters),
            )
            all_sentences.append(sentence)

        # Main generator
        all_sentences.extend(generate_derivative_sentences())

    # Shuffle and select sentences
    random.shuffle(all_sentences)
    if has_active_derivative is None:
        selected_sentences = all_sentences[:max_len]
    else:
        selected_sentences = all_sentences
    # Context sentences
    if include_policy or len(selected_sentences) < 2:
        if (
            has_active_derivative is not None
            and random.random() < 0.33
            or len(selected_sentences) < 2
        ):
            if random.random() < 0.35:
                sentences = generate_additional_events()
            else:
                sentences = generate_derivative_sentences(True)
        else:
            if swapType == "cp":
                sentences = generate_cp_policy(commodity, has_active_derivative)
            elif swapType == "ir":
                sentences = generate_ir_policy(has_active_derivative)
                # Pick only 1-2 sentences
                random.shuffle(sentences)
            elif swapType == "fx":
                sentences = generate_fx_policy(has_active_derivative)
            else:
                if random.random() < 0.5:
                    sentences = generate_hedge_policy(has_active_derivative)
                else:
                    sentences = generate_hedge_policy_update()
        sentences = sentences[: random.randint(1, 2)]
        selected_sentences.extend(sentences)
        random.shuffle(selected_sentences)
    # Capitalize first letter of each sentence
    selected_sentences = [
        s[0].upper() + s[1:] if s and len(s) > 0 else "" for s in selected_sentences
    ]

    # Create paragraph
    paragraph = (
        f"<reportingYear>{reporting_year}</reportingYear> "
        + ". ".join(selected_sentences)
        + "."
    )

    # Clean up common formatting issues
    paragraph = cleanup(paragraph)

    return paragraph, label
```

## Accounting Noise
```{python}


def generate_accounting_noise_paragraph(
    year_range=(1990, 2025), max_len=random.randint(2, 4), company_name=None
):
    """
    Generate synthetic accounting paragraphs that are pure noise - nothing to do with derivatives.
    This is Label 3: accounting discussions about lawsuits, equity warrants, balance sheet items,
    revenue recognition, inventory, PP&E, leases, etc. - but NO derivative instruments.

    Args:
        year_range (tuple): (min_year, max_year) for reporting year
        max_len (int): Maximum number of sentences

    Returns:
        tuple: (paragraph_text, label=3)
    """

    if company_name is None:
        if random.random() < 0.85:
            company_name = random.choice(company_names)
        else:
            company_name = "The Company"

    acquisition_targets = [name for name in company_names if name != company_name]
    current_year = random.randint(year_range[0], year_range[1])
    reporting_year = current_year
    all_sentences = []
    money_units = random.choice(money_unit_list)
    currency_code = random.choice(currency_codes)
    major_currency = random.choice(all_currencies)
    target_companies = [name for name in company_names if name != company_name]

    def generate_other_policy_update():
        sentences = []

        # ==============================
        # 1. ISSUANCE STATEMENT
        # ==============================
        template = random.choice(general_policy_templates)
        issuer = random.choice(shared_issuers)
        standard = random.choice(other_standard_names)
        topic = random.choice(shared_topics)
        purpose = random.choice(shared_purposes)
        description = random.choice(general_descriptions)
        extra = random.choice(general_additional_features)

        issue_month = random.choice(months)
        issue_year = random.randint(current_year - 5, current_year)
        effective_year = issue_year + random.randint(2, 4)
        eff_month = random.choice(months)
        eff_day = random.randint(15, 31)

        issuance_sentence = template.format(
            month=issue_month,
            year=issue_year,
            issuer=issuer,
            standard=standard,
            topic=topic,
            purpose=purpose,
            description=description,
            additional_feature=extra,
            eff_month=eff_month,
            eff_day=eff_day,
            eff_year=effective_year,
            company=pick_company_name(company_name),
        )
        sentences.append(issuance_sentence)

        # Optional: Add effective date, transition, disclosure, expedient
        if random.random() < 0.3:
            eff_line = random.choice(shared_effective_date_templates).format(
                company=pick_company_name(company_name),
                month=eff_month,
                day=random.randint(1, 28),
                end_day=random.randint(15, 31),
                year=effective_year,
            )
            sentences.append(eff_line)

        if random.random() < 0.2:
            trans_line = random.choice(shared_transition_templates).format(
                company=pick_company_name(company_name),
                method=random.choice(shared_adoption_methods),
                feature=random.choice(shared_transition_features),
            )
            sentences.append(trans_line)

        if random.random() < 0.25:
            disclosure_line = random.choice(shared_disclosure_change_templates).format(
                company=pick_company_name(company_name),
                disclosure_topic=random.choice(
                    [
                        "lease assets",
                        "revenue recognition policies",
                        "credit loss assumptions",
                    ]
                ),
                disclosure_topic2=random.choice(
                    ["disaggregation of revenue", "allowance methodology"]
                ),
                year=effective_year,
            )
            sentences.append(disclosure_line)

        if random.random() < 0.15:
            expedient_line = random.choice(shared_practical_expedient_templates).format(
                company=pick_company_name(company_name),
                expedient_description=random.choice(shared_transition_features),
            )
            sentences.append(expedient_line)

        # ==============================
        # 2. ADOPTION STATEMENT
        # ==============================
        adopt_template = random.choice(shared_adoption_status_templates)
        adopt_standard = random.choice(other_standard_names)
        adopt_method = random.choice(shared_adoption_methods)
        adopt_month = random.choice(months)
        adopt_day = random.randint(1, 28)
        adopt_year = random.randint(current_year - 8, current_year + 4)

        adoption_sentence = adopt_template.format(
            company=pick_company_name(company_name),
            standard=adopt_standard,
            method=adopt_method,
            month=adopt_month,
            day=adopt_day,
            year=adopt_year,
        )
        sentences.append(adoption_sentence)

        # Optional: Adoption impact
        if random.random() < 0.3:
            impact_line = random.choice(shared_adoption_impact_templates).format(
                company=pick_company_name(company_name),
                impact=random.choice(
                    [
                        "recognition of additional lease liabilities",
                        "a change in timing of revenue recognition",
                        "no material impact on consolidated results",
                    ]
                ),
            )
            sentences.append(impact_line)

        # ==============================
        # 3. EVALUATION STATEMENT
        # ==============================
        evaluation_sentence = random.choice(shared_evaluation_templates).format(
            company=pick_company_name(company_name)
        )
        sentences.append(evaluation_sentence)

        # Optional: Recently issued pronouncement
        if random.random() < 0.25:
            pronouncement = random.choice(shared_recent_pronouncement_templates).format(
                company=pick_company_name(company_name),
                issuer=random.choice(shared_issuers),
                standard=random.choice(other_standard_names),
                topic=random.choice(shared_topics),
                month=random.choice(months),
                year=random.randint(current_year - 2, current_year),
                adoption_year=random.randint(current_year, current_year + 3),
            )
            sentences.append(pronouncement)

        # Risk
        materiality_choice = random.choice(materiality)
        template = random.choice(risk_templates)
        item = random.choice(risk_items_other)
        sentence = template.format(
            item=item,
            company=pick_company_name(company_name),
            materiality=materiality_choice,
        )
        sentences.append(sentence)
        return sentences

    # ================== SENTENCE GENERATION ==================
    # Litigation (0-2 sentences)
    num_litigation = random.randint(1, 3)
    for _ in range(num_litigation):
        sentences = []
        template = random.choice(litigation_templates)
        case_type = random.choice(case_types)
        court = random.choice(courts)
        sentence = template.format(
            year=current_year,
            case_types=case_type,
            company=pick_company_name(company_name),
            court=court,
            currency_code=currency_code,
            major_currency=major_currency,
            money_unit=money_units,
            month=random.choice(months),
            end_day=random.randint(28, 31),
        )
        sentences.append(sentence)
        if random.random() < 0.5:
            template = random.choice(litigation_assessment_templates)
            verb = random.choice(assessment_verbs)
            sentence = template.format(
                company=pick_company_name(company_name), verb=verb
            )
            sentences.append(sentence)
        if random.random() < 0.5:
            template = random.choice(guarantee_templates)
            amount = round(random.uniform(10, 100), 1)
            payments = round(amount * random.uniform(0.1, 0.3), 1)
            guarantee_type = random.choice(guarantee_types)
            sentence = template.format(
                amount=amount,
                year=current_year,
                month=random.choice(months),
                payments=payments,
                guarantee_type=guarantee_type,
                company=pick_company_name(company_name),
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
            sentences.append(sentence)
        all_sentences.append(sentences)

    # Restructuring (0-1)
    template = random.choice(restructuring_templates)
    amount = round(random.uniform(10, 80), 1)
    purpose = random.choice(restructuring_purposes)
    expense_type = random.choice(restructuring_expense_types)
    month = random.choice(months)
    sentence = template.format(
        year=current_year,
        amount=amount,
        purpose=purpose,
        expense_type=expense_type,
        month=month,
        company=pick_company_name(company_name),
        currency_code=currency_code,
        major_currency=major_currency,
        money_unit=money_units,
        end_day=random.randint(28, 31),
    )
    all_sentences.append([sentence])

    # Non-cash transactions (0-1)
    sentences = []
    if random.random() < 0.8:
        # Warrant issuance as debt costs
        template = random.choice(warrant_debt_issuance_templates)
        month = random.choice(months)
        year = random.choice([current_year, current_year - 1])
        financing_type = random.choice(financing_types)
        shares1 = random.choice([100000, 200000, 333334, 400000, 496875])
        shares2 = random.choice([20834, 50000, 100000, 150000])
        value1 = round(shares1 * random.uniform(0.25, 0.75), 0)
        value2 = round(shares2 * random.uniform(0.15, 0.50), 0)
        shares = shares1
        value = value1

        sentence = template.format(
            month=month,
            year=year,
            end_day=random.randint(28, 31),
            financing_type=financing_type,
            shares1=f"{shares1:,}",
            shares2=f"{shares2:,}",
            value1=f"{value1:,}",
            value2=f"{value2:,}",
            shares=f"{shares:,}",
            value=f"{value:,}",
            company=pick_company_name(company_name),
            currency_code=currency_code,
            major_currency=major_currency,
            money_unit=money_units,
        )
        sentences.append(sentence)

    if random.random() < 0.5:
        # Warrant amortization
        template = random.choice(warrant_amortization_templates)
        asset_type = random.choice(asset_types)
        value = round(random.uniform(50, 500), 0)
        value2 = round(random.uniform(50, 500), 0)
        sentence = template.format(
            asset_type=asset_type,
            value=f"{value:,}",
            value2=f"{value:,}",
            year=current_year,
            prev_year=current_year - 1,
            month=random.choice(months),
            end_day=random.randint(28, 31),
            debt_types_list=random.choice(debt_types_list),
            company=pick_company_name(company_name),
            currency_code=currency_code,
            major_currency=major_currency,
            money_unit=money_units,
            price=random.choice([5000, 10000, 15000, 17500, 20000]),
        )
        sentences.append(sentence)
    if random.random() < 0.5:
        # Non-cash settlements
        template = random.choice(non_cash_settlement_templates)
        shares = random.choice([5000, 10000, 15000, 17500, 20000])
        value = round(shares * random.uniform(4, 8), 0)
        service_type = random.choice(service_types)
        month = random.choice(months)
        year = random.choice([current_year, current_year - 1])

        sentence = template.format(
            shares=f"{shares:,}",
            value=f"{value:,}",
            service_type=service_type,
            month=month,
            end_day=random.randint(28, 31),
            year=year,
            company=pick_company_name(company_name),
            currency_code=currency_code,
            major_currency=major_currency,
            money_unit=money_units,
        )
        sentences.append(sentence)
    all_sentences.append(sentences)

    # Acquisitions (0-1)
    template = random.choice(acquisition_templates)
    target = random.choice(acquisition_targets)
    amount = round(random.uniform(50, 500), 1)
    goodwill = round(amount * random.uniform(0.3, 0.5), 1)
    intangibles = round(amount * random.uniform(0.2, 0.4), 1)
    month = random.choice(months)
    purpose = random.choice(acquisition_purposes)
    funding = random.choice(acquisition_funding)
    sentence = template.format(
        month=month,
        year=current_year,
        target=target,
        amount=amount,
        goodwill=goodwill,
        intangibles=intangibles,
        purpose=purpose,
        funding=funding,
        company=pick_company_name(company_name),
        currency_code=currency_code,
        major_currency=major_currency,
        money_unit=money_units,
        end_day=random.randint(28, 31),
    )
    all_sentences.append([sentence])

    # Lawsuits (0-1)
    template = random.choice(specific_lawsuit_templates)
    month = random.choice(months)
    year = random.choice([current_year, current_year - 1])
    dismiss_year = year + 1
    court = random.choice(courts)
    allegation = random.choice(allegations)
    amount = random.choice([10, 25, 50, 75, 100, 150, 200])
    quarter = random.choice(quarters)

    sentence = template.format(
        month=month,
        year=year,
        dismiss_year=dismiss_year,
        court=court,
        allegation=allegation,
        amount=amount,
        quarter=quarter,
        company=pick_company_name(company_name),
        currency_code=currency_code,
        major_currency=major_currency,
        money_unit=money_units,
        end_day=random.randint(28, 31),
    )
    all_sentences.append([sentence])

    # Revenue recognition (0-1)
    sentences = []
    sentence = random.choice(revenue_recognition_templates)
    sentence = sentence.format(company=pick_company_name(company_name))
    sentences.append(sentence)
    if random.random() < 0.75:
        template = random.choice(deferred_revenue_templates)
        amount = round(random.uniform(10, 100), 1)
        prev_amount = round(amount * random.uniform(0.8, 1.2), 1)
        sentence = template.format(
            year=current_year,
            month=random.choice(months),
            amount=amount,
            prev_amount=prev_amount,
            company=pick_company_name(company_name),
            currency_code=currency_code,
            major_currency=major_currency,
            money_unit=money_units,
            end_day=random.randint(28, 31),
        )
        sentences.append(sentence)
    all_sentences.append(sentences)

    # Inventory (0-1)
    sentences = []
    template = random.choice(inventory_templates)
    method = random.choice(inventory_methods)
    amount = round(random.uniform(50, 300), 1)
    reserve = round(amount * random.uniform(0.05, 0.15), 1)
    selected_co = []
    for _ in range(3):
        selected_co.append(random.choice(commodities))
        if random.random() < 0.5:
            break
    selected_co_list = (
        ", ".join(selected_co[:-1]) + " and " + selected_co[-1]
        if len(selected_co) > 1
        else selected_co[0]
    )
    sentence = template.format(
        method=method,
        year=current_year,
        month=random.choice(months),
        amount=amount,
        reserve=reserve,
        company=pick_company_name(company_name),
        currency_code=currency_code,
        major_currency=major_currency,
        money_unit=money_units,
        end_day=random.randint(28, 31),
        items=selected_co_list,
    )
    sentences.append(sentence)
    if random.random() < 0.75:
        template = random.choice(inventory_writedown_templates)
        amount = round(random.uniform(2, 20), 1)
        prev_amount = round(random.uniform(amount, amount + 20), 1)
        sentence = template.format(
            year=current_year,
            amount=amount,
            company=pick_company_name(company_name),
            currency_code=currency_code,
            major_currency=major_currency,
            money_unit=money_units,
            month=random.choice(months),
            end_day=random.randint(28, 31),
            prev_amount=prev_amount,
            items=selected_co_list,
        )
        sentences.append(sentence)
    all_sentences.append(sentences)

    # PP&E (0-1)
    sentences = []
    template = random.choice(ppe_templates)
    amount = round(random.uniform(100, 500), 1)
    purpose = random.choice(capex_purposes)
    sentence = template.format(
        month=random.choice(months),
        end_day=random.randint(28, 31),
        amount=amount,
        year=current_year,
        company=pick_company_name(company_name),
        currency_code=currency_code,
        major_currency=major_currency,
        money_unit=money_units,
        purpose=purpose,
    )
    sentences.append(sentence)
    if random.random() < 0.7:
        template = random.choice(capex_templates)
        amount = round(random.uniform(20, 150), 1)
        purpose = random.choice(capex_purposes)
        sentence = template.format(
            year=current_year,
            month=random.choice(months),
            amount=amount,
            purpose=purpose,
            company=pick_company_name(company_name),
            currency_code=currency_code,
            major_currency=major_currency,
            money_unit=money_units,
        )
        sentences.append(sentence)
    if random.random() < 0.7:
        template = random.choice(impairment_templates)
        amount = round(random.uniform(5, 50), 1)
        asset_type = random.choice(asset_types)
        quarter = random.choice(quarters)
        sentence = template.format(
            amount=amount,
            year=current_year,
            month=random.choice(months),
            quarter=quarter,
            asset_type=asset_type,
            company=pick_company_name(company_name),
            currency_code=currency_code,
            major_currency=major_currency,
            money_unit=money_units,
            end_day=random.randint(28, 31),
        )
        sentences.append(sentence)
    all_sentences.append(sentences)

    # Leases (0-1)
    sentences = []
    template = random.choice(lease_templates)
    min_term = random.randint(1, 3)
    max_term = random.randint(5, 15)
    amount = round(random.uniform(50, 200), 1)
    liability = round(amount * random.uniform(1.0, 1.1), 1)
    adoption_year = random.randint(2019, 2020)
    sentence = template.format(
        min_term=min_term,
        max_term=max_term,
        year=current_year,
        month=random.choice(months),
        amount=amount,
        liability=liability,
        adoption_year=adoption_year,
        company=pick_company_name(company_name),
        currency_code=currency_code,
        major_currency=major_currency,
        money_unit=money_units,
        end_day=random.randint(28, 31),
    )
    sentences.append(sentence)
    if random.random() < 0.7:
        template = random.choice(lease_commitment_templates)
        amount = round(random.uniform(100, 800), 1)
        amount2 = round(random.uniform(100, 600), 1)
        amount3 = round(random.uniform(100, 400), 1)
        pv_amount = round(random.uniform(100, 900), 1)
        years = round(random.uniform(3, 8), 1)
        rate = (round(random.uniform(3.0, 7.0), 1),)
        sentence = template.format(
            amount=amount,
            amount2=amount2,
            amount3=amount3,
            year=current_year,
            next_year=current_year + 1,
            next2_year=current_year + 2,
            years=years,
            month=random.choice(months),
            rate=rate,
            company=pick_company_name(company_name),
            currency_code=currency_code,
            major_currency=major_currency,
            money_unit=money_units,
            end_day=random.randint(28, 31),
            pv_amount=pv_amount,
        )
        sentences.append(sentence)
    all_sentences.append(sentences)

    # Goodwill and Intangibles (0-1)
    sentences = []
    template = random.choice(goodwill_templates)
    amount = round(random.uniform(200, 1000), 1)
    quarter = random.choice(quarters)
    sentence = template.format(
        amount=amount,
        year=current_year,
        quarter=quarter,
        company=pick_company_name(company_name),
        currency_code=currency_code,
        major_currency=major_currency,
        money_unit=money_units,
        month=random.choice(months),
        end_day=random.randint(28, 31),
        verb=random.choice(assessment_verbs),
    )
    sentences.append(sentence)
    template = random.choice(intangible_templates)
    amount = round(random.uniform(50, 300), 1)
    years = round(random.uniform(5, 12), 1)
    intangible_type = random.choice(intangible_types)
    sentence = template.format(
        intangible_types=intangible_type,
        amount=amount,
        year=current_year,
        month=random.choice(months),
        years=years,
        company=pick_company_name(company_name),
        currency_code=currency_code,
        major_currency=major_currency,
        money_unit=money_units,
        end_day=random.randint(28, 31),
    )
    sentences.append(sentence)
    all_sentences.append(sentences)

    # Debt (0-1)
    for _ in range(2):
        sentences = []
        debt_type_list = []

        # Build the debt type combination
        for _ in range(3):
            debt_type_list.append(random.choice(debt_types_list))
            if random.random() < 0.5:
                break

        selected_debt = (
            ", ".join(debt_type_list[:-1]) + " and " + debt_type_list[-1]
            if len(debt_type_list) > 1
            else debt_type_list[0]
        )

        # --- Generate multiple related debt statements ---
        for _ in range(random.randint(5, 10)):  # Boost debt related topics
            amount = generate_value(False)
            amount2 = generate_value(False)
            pct = generate_value(False, 8)
            pct2 = generate_value(False, 20)
            outstanding = random.randint(0, int(amount) // 2)
            debt_type = random.choice(debt_types_list)
            maturity_year = current_year + random.randint(3, 10)
            years = random.randint(3, 10)
            template = random.choice(debt_templates)
            sentence = template.format(
                amount=amount,
                amount2=amount2,
                year=maturity_year,
                month=random.choice(months),
                outstanding=outstanding,
                current_year=current_year,
                debt_types=selected_debt,
                debt_type=debt_type,
                maturity_year=maturity_year,
                company=pick_company_name(company_name),
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                pct=pct,
                pct2=pct2,
                years=years,
            )
            sentences.append(sentence)

        # --- Add a covenant / compliance statement at the end ---
        if random.random() < 0.5:
            template = random.choice(debt_covenant_templates)
            ratio = round(random.uniform(2.5, 4.0), 1)
            coverage = round(random.uniform(2.0, 4.0), 1)
            covenant_sentence = template.format(
                year=current_year,
                month=random.choice(months),
                end_day=random.randint(28, 31),
                ratio=ratio,
                coverage=coverage,
                company=pick_company_name(company_name),
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
            )
            sentences.append(covenant_sentence)

        # --- Merge into a single coherent text block ---
        merged_text = ". ".join(sentences)
        all_sentences.append([merged_text])

    # Income taxes (0-1)
    sentences = []
    template = random.choice(tax_templates)
    amount = round(random.uniform(20, 150), 1)
    rate = round(random.uniform(15, 30), 1)
    prev_rate = round(rate * random.uniform(0.9, 1.1), 1)
    source = random.choice(tax_sources)
    start_year = current_year + 1
    end_year = current_year + random.randint(10, 20)
    sentence = template.format(
        amount=amount,
        year=current_year,
        rate=rate,
        month=random.choice(months),
        prev_rate=prev_rate,
        sources=source,
        start_year=start_year,
        end_year=end_year,
        company=pick_company_name(company_name),
        currency_code=currency_code,
        major_currency=major_currency,
        money_unit=money_units,
        end_day=random.randint(28, 31),
    )
    sentences.append(sentence)
    if random.random() < 0.5:
        template = random.choice(uncertain_tax_templates)
        amount = round(random.uniform(5, 50), 1)
        sentence = template.format(
            amount=amount,
            year=current_year,
            month=random.choice(months),
            end_day=random.randint(28, 31),
            company=pick_company_name(company_name),
            currency_code=currency_code,
            major_currency=major_currency,
            money_unit=money_units,
        )
        sentences.append(sentence)
    all_sentences.append(sentences)

    # Pension (0-1)
    sentences = []
    template = random.choice(pension_templates)
    assets = round(random.uniform(200, 800), 1)
    obligations = round(assets * random.uniform(1.0, 1.2), 1)
    amount = round(random.uniform(20, 100), 1)
    sentence = template.format(
        assets=assets,
        obligations=obligations,
        year=current_year,
        month=random.choice(months),
        amount=amount,
        company=pick_company_name(company_name),
        currency_code=currency_code,
        major_currency=major_currency,
        money_unit=money_units,
        end_day=random.randint(28, 31),
    )
    sentences.append(sentence)
    if random.random() < 0.5:
        template = random.choice(opeb_templates)
        amount = round(random.uniform(50, 200), 1)
        sentence = template.format(
            amount=amount,
            year=current_year,
            month=random.choice(months),
            end_day=random.randint(28, 31),
            company=pick_company_name(company_name),
            currency_code=currency_code,
            major_currency=major_currency,
            money_unit=money_units,
        )
        sentences.append(sentence)
    all_sentences.append(sentences)

    # Commitments (0-1)
    sentences = []
    template = random.choice(purchase_commitment_templates)
    amount = round(random.uniform(50, 300), 1)
    years = random.randint(3, 7)
    sentence = template.format(
        amount=amount,
        year=current_year,
        years=years,
        month=random.choice(months),
        end_day=random.randint(28, 31),
        company=pick_company_name(company_name),
        currency_code=currency_code,
        major_currency=major_currency,
        money_unit=money_units,
    )
    sentences.append(sentence)
    if random.random() < 0.5:
        template = random.choice(guarantee_templates)
        amount = round(random.uniform(10, 100), 1)
        payments = round(amount * random.uniform(0.1, 0.3), 1)
        guarantee_type = random.choice(guarantee_types)
        sentence = template.format(
            amount=amount,
            year=current_year,
            month=random.choice(months),
            payments=payments,
            guarantee_type=guarantee_type,
            company=pick_company_name(company_name),
            currency_code=currency_code,
            major_currency=major_currency,
            money_unit=money_units,
            end_day=random.randint(28, 31),
        )
        sentences.append(sentence)
    all_sentences.append(sentences)

    # Restructuring (0-1)
    template = random.choice(restructuring_templates)
    amount = round(random.uniform(10, 80), 1)
    purpose = random.choice(restructuring_purposes)
    expense_type = random.choice(restructuring_expense_types)
    month = random.choice(months)
    sentence = template.format(
        year=current_year,
        amount=amount,
        purpose=purpose,
        expense_type=expense_type,
        month=month,
        company=pick_company_name(company_name),
        currency_code=currency_code,
        major_currency=major_currency,
        money_unit=money_units,
        end_day=random.randint(28, 31),
    )
    all_sentences.append([sentence])

    # Acquisitions (0-1)
    template = random.choice(acquisition_templates)
    target = random.choice(acquisition_targets)
    amount = round(random.uniform(50, 500), 1)
    goodwill = round(amount * random.uniform(0.3, 0.5), 1)
    intangibles = round(amount * random.uniform(0.2, 0.4), 1)
    month = random.choice(months)
    purpose = random.choice(acquisition_purposes)
    funding = random.choice(acquisition_funding)
    sentence = template.format(
        month=month,
        year=current_year,
        target=target,
        amount=amount,
        goodwill=goodwill,
        intangibles=intangibles,
        purpose=purpose,
        funding=funding,
        company=pick_company_name(company_name),
        currency_code=currency_code,
        major_currency=major_currency,
        money_unit=money_units,
        end_day=random.randint(28, 31),
    )
    all_sentences.append([sentence])

    # Balance sheet changes (0-2 sentences)
    num_bs_changes = random.randint(0, 2)
    for _ in range(num_bs_changes):
        sentences = []

        if random.random() < 0.5:
            template = random.choice(ar_templates)
            amount = round(random.uniform(10, 150), 1)
            prev_amount = round(amount * random.uniform(0.8, 1.2), 1)
            ending = round(random.uniform(50, 300), 1)
            days = random.randint(35, 75)
            prev_days = random.randint(40, 80)

            sentence = template.format(
                money_unit=money_units,
                currency_code=currency_code,
                end_day=random.randint(28, 31),
                month=random.choice(months),
                company=pick_company_name(company_name),
                amount=amount,
                prev_amount=prev_amount,
                ending=ending,
                year=current_year,
                prev_year=current_year - 1,
                days=days,
                prev_days=prev_days,
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(ap_templates)
            amount = round(random.uniform(5, 100), 1)
            prev_amount = round(amount * random.uniform(0.7, 1.3), 1)
            days = random.randint(30, 60)
            prev_days = random.randint(25, 55)
            reason = random.choice(balance_sheet_reasons)

            sentence = template.format(
                money_unit=money_units,
                end_day=random.randint(28, 31),
                currency_code=currency_code,
                month=random.choice(months),
                company=pick_company_name(company_name),
                amount=amount,
                prev_amount=prev_amount,
                year=current_year,
                prev_year=current_year - 1,
                days=days,
                prev_days=prev_days,
                reason=reason,
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(accrued_liabilities_templates)
            amount = round(random.uniform(5, 80), 1)
            change = round(random.uniform(2, 30), 1)
            reason = random.choice(accrued_reasons)

            sentence = template.format(
                amount=amount,
                change=change,
                year=current_year,
                currency_code=currency_code,
                reason=reason,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                month=random.choice(months),
                company=pick_company_name(company_name),
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(working_capital_templates)
            amount = round(random.uniform(50, 300), 1)
            prev_amount = round(amount * random.uniform(0.8, 1.2), 1)
            direction = random.choice(["use", "source"])
            reason = random.choice(balance_sheet_reasons)

            sentence = template.format(
                amount=amount,
                prev_amount=prev_amount,
                direction=direction,
                currency_code=currency_code,
                year=current_year,
                prev_year=current_year - 1,
                reason=reason,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                month=random.choice(months),
                company=pick_company_name(company_name),
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(other_current_assets_templates)
            amount = round(random.uniform(5, 50), 1)
            ending = round(random.uniform(20, 100), 1)
            reason = random.choice(other_asset_reasons)

            sentence = template.format(
                amount=amount,
                ending=ending,
                year=current_year,
                currency_code=currency_code,
                reason=reason,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                month=random.choice(months),
                company=pick_company_name(company_name),
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(other_liabilities_templates)
            amount = round(random.uniform(10, 100), 1)
            prev_amount = round(amount * random.uniform(0.8, 1.2), 1)
            ending = round(random.uniform(50, 200), 1)
            reason = random.choice(liability_reasons)

            sentence = template.format(
                amount=amount,
                prev_amount=prev_amount,
                currency_code=currency_code,
                ending=ending,
                year=current_year,
                reason=reason,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                month=random.choice(months),
                company=pick_company_name(company_name),
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            if random.random() < 0.5:
                template = random.choice(stockholders_equity_templates)
                amount = round(random.uniform(20, 200), 1)
                prev_amount = round(amount * random.uniform(0.7, 1.3), 1)
                ending = round(random.uniform(100, 500), 1)
                reason = random.choice(equity_reasons)
                month = random.choice(months)

                sentence = template.format(
                    amount=amount,
                    prev_amount=prev_amount,
                    ending=ending,
                    year=current_year,
                    currency_code=currency_code,
                    prev_year=current_year - 1,
                    reason=reason.format(
                        month=month, year=current_year, end_day=random.randint(28, 31)
                    ),
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                    month=random.choice(months),
                    company=pick_company_name(company_name),
                )
            else:
                template = random.choice(retained_earnings_templates)
                amount = round(random.uniform(50, 500), 1)
                ni = round(random.uniform(30, 200), 1)
                div = round(random.uniform(5, 50), 1)
                ending = round(random.uniform(100, 600), 1)

                sentence = template.format(
                    amount=amount,
                    ni=ni,
                    div=div,
                    ending=ending,
                    year=current_year,
                    money_unit=money_units,
                    currency_code=currency_code,
                    end_day=random.randint(28, 31),
                    month=random.choice(months),
                    company=pick_company_name(company_name),
                )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(cash_flow_statement_templates)
            amount = round(random.uniform(20, 200), 1)
            prev_amount = round(amount * random.uniform(0.7, 1.3), 1)
            reason = random.choice(balance_sheet_reasons)

            sentence = template.format(
                amount=amount,
                prev_amount=prev_amount,
                year=current_year,
                prev_year=current_year - 1,
                currency_code=currency_code,
                reason=reason,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                month=random.choice(months),
                company=pick_company_name(company_name),
            )
            sentences.append(sentence)

        if random.random() < 0.5:  # general balance sheet changes
            template = random.choice(balance_sheet_change_templates)
            amount = round(random.uniform(5, 100), 1)
            ending = round(random.uniform(50, 200), 1)
            reason = random.choice(balance_sheet_reasons)

            sentence = template.format(
                amount=amount,
                ending=ending,
                year=current_year,
                prev_year=current_year - 1,
                currency_code=currency_code,
                reason=reason,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                month=random.choice(months),
                company=pick_company_name(company_name),
            )
            sentences.append(sentence)

        random.shuffle(sentences)
        sentences = sentences[: random.randint(1, len(sentences))] if len(sentences) > 2 else sentences
        merged_text = ". ".join(sentences)
        all_sentences.append([merged_text])

    # CEO and executive compensation (0-2 sentences)
    num_exec_comp = random.randint(0, 2)
    for _ in range(num_exec_comp):
        sentences = []

        if random.random() < 0.5:
            template = random.choice(ceo_compensation_templates)
            total_amount = round(random.uniform(8, 25), 1)
            salary = round(random.uniform(1, 2), 1)
            bonus = round(random.uniform(2, 6), 1)
            equity = round(total_amount - salary - bonus, 1)
            prev_amount = round(total_amount * random.uniform(0.8, 1.2), 1)

            sentence = template.format(
                amount=total_amount,
                salary=salary,
                bonus=bonus,
                equity=equity,
                prev_amount=prev_amount,
                prev_year=current_year - 1,
                year=current_year,
                company=pick_company_name(company_name),
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                month=random.choice(months),
                end_day=random.randint(28, 31),
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(executive_compensation_templates)
            amount = round(random.uniform(30, 80), 1)
            equity = round(amount * random.uniform(0.4, 0.6), 1)
            change = round(random.uniform(5, 20), 1)
            increase_decrease = random.choice(["an increase", "a decrease"])

            sentence = template.format(
                amount=amount,
                equity=equity,
                year=current_year,
                increase_decrease=increase_decrease,
                change=change,
                company=pick_company_name(company_name),
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                month=random.choice(months),
                end_day=random.randint(28, 31),
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(equity_grant_templates)
            shares = random.choice([50000, 75000, 100000, 150000, 200000])
            amount = round(random.uniform(3, 12), 1)
            price = round(random.uniform(30, 150), 2)
            years = random.choice([3, 4, 5])
            month = random.choice(months)
            metric = random.choice(performance_metrics)
            vesting = random.choice(vesting_periods)

            sentence = template.format(
                month=month,
                year=current_year,
                shares=f"{shares:,}",
                amount=amount,
                price=price,
                years=years,
                metric=metric,
                vesting_period=vesting,
                company=pick_company_name(company_name),
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(severance_templates)
            multiple = random.choice([2, 2.5, 3])
            amount = round(random.uniform(5, 20), 1)

            sentence = template.format(
                multiple=multiple,
                amount=amount,
                year=current_year,
                company=pick_company_name(company_name),
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                month=random.choice(months),
                end_day=random.randint(28, 31),
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(employment_agreement_templates)
            salary = round(random.uniform(0.8, 2.0), 1)
            bonus_pct = random.choice([100, 125, 150, 200])
            month = random.choice(months)

            sentence = template.format(
                month=month,
                year=random.choice([current_year, current_year - 1, current_year - 2]),
                salary=salary,
                bonus_pct=bonus_pct,
                company=pick_company_name(company_name),
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(compensation_committee_templates)
            consultant = random.choice(acquisition_targets)
            sentence = template.format(consultant=consultant)
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(say_on_pay_templates)
            pct = round(random.uniform(75, 95), 1)
            month = random.choice(months)

            sentence = template.format(
                year=current_year,
                pct=pct,
                month=month,
                company=pick_company_name(company_name),
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(deferred_comp_templates)
            pct = random.choice([50, 75, 100])
            bonus_pct = random.choice([50, 100])
            amount = round(random.uniform(10, 50), 1)

            sentence = template.format(
                pct=pct,
                bonus_pct=bonus_pct,
                amount=amount,
                year=current_year,
                company=pick_company_name(company_name),
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                month=random.choice(months),
                end_day=random.randint(28, 31),
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(perquisites_templates)
            amount = random.choice([50, 75, 100, 150, 200])
            perq_type = random.choice(perq_types)

            sentence = template.format(
                amount=f"{amount:,}",
                year=current_year,
                perq_type=perq_type,
                company=pick_company_name(company_name),
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                month=random.choice(months),
                end_day=random.randint(28, 31),
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(clawback_templates)
            sentence = template.format(company=pick_company_name(company_name))
            sentences.append(sentence)
        if random.random() < 0.5:
            template = random.choice(stock_comp_templates)
            amount = round(random.uniform(10, 80), 1)
            shares = random.choice([50000, 100000, 250000, 500000])
            price = round(random.uniform(20, 100), 2)
            sentence = template.format(
                amount=amount,
                year=current_year,
                month=random.choice(months),
                shares=f"{shares:,}",
                price=price,
                company=pick_company_name(company_name),
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
            sentences.append(sentence)
        if random.random() < 0.5:
            template = random.choice(stock_comp_valuation_templates)
            amount = round(random.uniform(5, 25), 2)
            model = random.choice(valuation_models)
            sentence = template.format(
                year=current_year,
                month=random.choice(months),
                amount=amount,
                company=pick_company_name(company_name),
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                model=model,
            )
            sentences.append(sentence)
        random.shuffle(sentences)
        sentences = sentences[: random.randint(1, len(sentences))] if len(sentences) > 2 else sentences
        merged_text = ". ".join(sentences)
        all_sentences.append([merged_text])

    # Market prices and trading (0-1)
    category = random.choice(["stock_price", "trading_volume"])
    if category == "stock_price":
        template = random.choice(stock_price_templates)
        exchange = random.choice(exchanges)
        ticker = ''.join(random.choices(string.ascii_uppercase, k=random.randint(3, 4)))
        price = round(random.uniform(10, 200), 2)
        prev_price = round(price * random.uniform(0.7, 1.3), 2)
        low = round(price * random.uniform(0.6, 0.9), 2)
        high = round(price * random.uniform(1.1, 1.5), 2)
        volume = random.choice([500000, 1000000, 2000000, 5000000])
        market_cap = round(random.uniform(500, 5000), 0)
        shares = random.choice([50, 75, 100, 150, 200])
        direction = "increase" if price > prev_price else "decrease"
        pct = abs(round(((price - prev_price) / prev_price) * 100, 1))
        month = random.choice(months)
        end_day = random.randint(28, 31)

        sentence = template.format(
            exchange=exchange,
            ticker=ticker,
            currency_code=currency_code,
            price=price,
            prev_price=prev_price,
            low=low,
            high=high,
            volume=f"{volume:,}",
            market_cap=f"{market_cap:,}",
            money_unit=money_units,
            shares=f"{shares:,}",
            direction=direction,
            pct=pct,
            month=month,
            end_day=end_day,
            year=current_year,
            prev_year=current_year - 1,
            company=pick_company_name(company_name),
        )
    else:
        template = random.choice(trading_volume_templates)
        volume = random.choice([500000, 1000000, 2000000, 3000000])
        volatility = random.choice(volatility_levels)
        pct = round(random.uniform(5, 50), 1)
        improved_decreased = random.choice(["improved", "decreased"])

        sentence = template.format(
            year=current_year,
            prev_year=current_year - 1,
            volume=f"{volume:,}",
            volatility=volatility,
            pct=pct,
            improved_decreased=improved_decreased,
            company=pick_company_name(company_name),
        )
    all_sentences.append([sentence])

    # Company description (0-1)
    template = random.choice(company_description_templates)
    industry = random.choice(industries)
    business_activity = random.choice(business_activities)
    products_services = random.choice(
        ["products and services", "solutions", "technology platforms"]
    )
    geography = random.choice(geographies)
    founding_year = random.randint(1950, 2010)
    city = random.choice(cities)
    state = random.choice(states)
    market_segment = random.choice(
        ["enterprise", "consumer", "industrial", "healthcare"]
    )
    activities = random.choice(business_activities)
    employees = random.choice([5000, 10000, 25000, 50000, 100000])
    locations = random.randint(50, 500)
    segments = random.choice([2, 3, 4])
    segment_names = random.choice(segment_examples)
    mission = (
        "deliver innovative solutions that create value for customers and shareholders"
    )
    month = random.choice(months)
    end_day = random.randint(28, 31)

    sentence = template.format(
        industry=industry,
        business_activity=business_activity,
        company=pick_company_name(company_name),
        products_services=products_services,
        geography=geography,
        founding_year=founding_year,
        city=city,
        state=state,
        market_segment=market_segment,
        activities=activities,
        employees=f"{employees:,}",
        locations=locations,
        month=month,
        end_day=end_day,
        year=current_year,
        segments=segments,
        segment_names=segment_names,
        mission_statement=mission,
    )
    all_sentences.append([sentence])

    # Institutional/hedge fund ownership (0-1)
    category = random.choice(["institutional", "insider"])
    if category == "institutional":
        template = random.choice(institutional_ownership_templates)
        fund_name = random.choice(target_companies)
        fund_name2 = random.choice([f for f in target_companies if f != fund_name])
        pct = round(random.uniform(5, 15), 1)
        pct2 = round(random.uniform(3, 10), 1)
        prev_pct = round(pct * random.uniform(0.8, 1.2), 1)
        form = random.choice(sec_forms)
        month = random.choice(months)
        end_day = random.randint(28, 31)

        sentence = template.format(
            month=month,
            end_day=end_day,
            year=current_year,
            pct=pct,
            pct2=pct2,
            prev_pct=prev_pct,
            fund_name=fund_name,
            fund_name2=fund_name2,
            form=form,
            company=pick_company_name(company_name),
        )
    else:
        template = random.choice(insider_ownership_templates)
        pct = round(random.uniform(1, 8), 1)
        shares = random.choice([500000, 1000000, 2000000])
        action = random.choice(insider_actions)
        month = random.choice(months)
        end_day = random.randint(28, 31)

        sentence = template.format(
            pct=pct,
            shares=f"{shares:,}",
            action=action,
            month=month,
            end_day=end_day,
            year=current_year,
            company=pick_company_name(company_name),
        )

    all_sentences.append([sentence])

    # Forward-looking statements (0-1)
    category = random.choice(["forward_looking", "safe_harbor"])

    if category == "forward_looking":
        template = random.choice(forward_looking_templates)
        topics = random.choice(forward_looking_topics)
        words = random.choice(forward_looking_words)
        risk_factors = random.choice(risk_factors_examples)
        month = random.choice(months)
        end_day = random.randint(28, 31)

        sentence = template.format(
            topics=topics,
            words=words,
            company=pick_company_name(company_name),
            risk_factors=risk_factors,
            month=month,
            end_day=end_day,
            year=current_year,
        )
    else:
        sentence = random.choice(safe_harbor_templates)
    sentence = sentence.format(company=pick_company_name(company_name))
    all_sentences.append([sentence])

    # Analyst coverage (0-1)
    template = random.choice(analyst_coverage_templates)
    number = random.randint(8, 25)
    number2 = random.randint(3, 12)
    number3 = random.randint(0, 5)
    eps = round(random.uniform(1.50, 8.00), 2)
    revenue = round(random.uniform(500, 5000), 0)
    target = round(random.uniform(50, 200), 2)
    direction = random.choice(["upside", "downside"])
    pct = round(random.uniform(10, 40), 1)
    low = round(eps * 0.8, 2)
    high = round(eps * 1.2, 2)

    sentence = template.format(
        number=number,
        number2=number2,
        number3=number3,
        year=current_year,
        currency_code=currency_code,
        eps=eps,
        revenue=f"{revenue:,}",
        money_unit=money_units,
        target=target,
        direction=direction,
        pct=pct,
        low=low,
        high=high,
        company=pick_company_name(company_name),
    )

    all_sentences.append([sentence])

    # Credit ratings (0-1)
    template = random.choice(credit_rating_templates)
    agency = random.choice(credit_agencies)
    agency2 = random.choice([a for a in credit_agencies if a != agency])
    agency3 = random.choice([a for a in credit_agencies if a not in [agency, agency2]])
    rating = random.choice(credit_ratings)
    rating2 = random.choice(credit_ratings)
    rating3 = random.choice(credit_ratings)
    outlook = random.choice(rating_outlooks)
    action = random.choice(rating_actions)
    month = random.choice(months)
    end_day = random.randint(28, 31)

    sentence = template.format(
        rating=rating,
        rating2=rating2,
        rating3=rating3,
        agency=agency,
        agency2=agency2,
        agency3=agency3,
        outlook=outlook,
        action=action,
        month=month,
        end_day=end_day,
        year=current_year,
        company=pick_company_name(company_name),
    )

    all_sentences.append([sentence])

    # Dividend/capital allocation (0-1)
    for _ in range(1):
        sentences = []
        template = random.choice(dividend_policy_templates)
        amount = round(random.uniform(0.25, 2.00), 2)
        pct = round(random.uniform(20, 60), 1)
        pct2 = round(random.uniform(30, 70), 1)
        prev_pct = round(pct * random.uniform(0.9, 1.1), 1)
        yield_pct = round(random.uniform(1.5, 4.5), 1)
        month = random.choice(months)
        end_day = random.randint(1, 28)
        start_year = random.randint(1990, 2010)

        sentence = template.format(
            year=start_year,
            month=month,
            end_day=end_day,
            currency_code=currency_code,
            amount=amount,
            pct=pct,
            pct2=pct2,
            prev_pct=prev_pct,
            prev_year=current_year - 1,
            company=pick_company_name(company_name),
        )
        sentences.append(sentence)
        template = random.choice(share_repurchase_templates)
        shares = random.choice([1000000, 2000000, 5000000, 10000000])
        amount = round(random.uniform(50, 500), 0)
        prev_amount = round(amount * random.uniform(0.7, 1.3), 0)
        remaining = round(random.uniform(100, 400), 0)
        month = random.choice(months)
        end_day = random.randint(28, 31)

        sentence = template.format(
            year=current_year,
            shares=f"{shares:,}",
            currency_code=currency_code,
            amount=f"{amount:,}",
            prev_amount=f"{prev_amount:,}",
            remaining=f"{remaining:,}",
            money_unit=money_units,
            month=month,
            end_day=end_day,
            prev_year=current_year - 1,
            company=pick_company_name(company_name),
        )
        sentences.append(sentence)
        random.shuffle(sentences)
        sentences = sentences[: random.randint(1, len(sentences))] if len(sentences) > 2 else sentences
        merged_text = ". ".join(sentences)
        all_sentences.append([merged_text])

    # Competition (0-1)
    template = random.choice(competition_templates)
    characteristics = random.choice(competitive_characteristics)
    competitor1 = random.choice(target_companies)
    competitor2 = random.choice([c for c in target_companies if c != competitor1])
    competitor3 = random.choice(
        [c for c in target_companies if c not in [competitor1, competitor2]]
    )
    factors = random.choice(competitive_factors)
    pct = round(random.uniform(10, 35), 1)
    reasons = "new market entrants, pricing pressures, and technological disruption"
    advantages = random.choice(competitive_advantages)

    sentence = template.format(
        characteristics=characteristics,
        competitor1=competitor1,
        competitor2=competitor2,
        competitor3=competitor3,
        factors=factors,
        pct=pct,
        year=current_year,
        reasons=reasons,
        advantages=advantages,
        company=pick_company_name(company_name),
    )

    all_sentences.append([sentence])

    # Regulatory (0-1)
    template = random.choice(regulatory_templates)
    regulators_list = random.choice(regulators)
    areas = random.choice(regulatory_areas)
    amount = round(random.uniform(5, 50), 1)
    approvals = "product registrations and environmental permits"
    matters = "regulatory audits and compliance reviews"

    sentence = template.format(
        regulators=regulators_list,
        areas=areas,
        currency_code=currency_code,
        amount=amount,
        money_unit=money_units,
        year=current_year,
        approvals=approvals,
        matters=matters,
        company=pick_company_name(company_name),
    )

    all_sentences.append([sentence])

    # Insurance (0-1)
    template = random.choice(insurance_templates)
    amount = round(random.uniform(10, 100), 1)
    risks = random.choice(self_insured_risks)
    incident = random.choice(
        ["property damage", "business interruption", "product liability claims"]
    )
    coverage_types_list = random.choice(coverage_types)
    month = random.choice(months)
    end_day = random.randint(28, 31)

    sentence = template.format(
        currency_code=currency_code,
        amount=amount,
        money_unit=money_units,
        month=month,
        end_day=end_day,
        year=current_year,
        risks=risks,
        incident=incident,
        coverage_types=coverage_types_list,
        company=pick_company_name(company_name),
    )
    all_sentences.append([sentence])

    all_sentences.append(generate_other_policy_update())

    noise = generate_sec_noise(
        company=pick_company_name(company_name),
        currency_unit=money_units,
        month=random.choice(months),
        year=current_year,
    )
    all_sentences.append(noise)

    # Foreign currency risk/translation (0-2 sentences)
    num_fx = random.randint(1, 2)
    for _ in range(num_fx):
        sentences = []

        currency2 = random.choice([c for c in all_currencies if c != major_currency])
        currency3 = random.choice(
            [c for c in all_currencies if c not in [major_currency, currency2]]
        )
        month = random.choice(months)
        end_day = random.randint(28, 31)
        location = random.choice(balance_sheet_locations)
        if random.random() < 0.5:
            template = random.choice(foreign_currency_exposure_templates)
            sentence = template.format(
                company=pick_company_name(company_name),
                major_currency=major_currency,
                currency2=currency2,
                currency3=currency3,
                location=location,
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(foreign_currency_translation_templates)
            amount = generate_value(False)
            sentence = template.format(
                company=pick_company_name(company_name),
                currency_code=currency_code,
                amount=amount,
                month=month,
                end_day=end_day,
                year=current_year,
                major_currency=major_currency,
                currency2=currency2,
                money_unit=money_units,
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(foreign_currency_transaction_templates)
            amount = generate_value(False)
            prev_amount = generate_value(False, amount)
            sentence = template.format(
                company=pick_company_name(company_name),
                currency_code=currency_code,
                amount=amount,
                prev_amount=prev_amount,
                location=location,
                month=month,
                end_day=end_day,
                year=current_year,
                prev_year=current_year - 1,
                major_currency=major_currency,
                money_unit=money_units,
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(functional_currency_templates)
            amount = generate_value(False)
            sentence = template.format(
                company=pick_company_name(company_name),
                major_currency=major_currency,
                currency2=currency2,
                currency3=currency3,
                currency_code=currency_code,
                amount=amount,
                year=current_year,
                money_unit=money_units,
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(fx_impact_on_results_templates)
            amount = generate_value(False)
            pct = generate_value(False, 10)
            reported_pct = round(pct + random.uniform(-2, 2), 1)
            sentence = template.format(
                company=pick_company_name(company_name),
                currency_code=currency_code,
                amount=amount,
                money_unit=money_units,
                pct=pct,
                reported_pct=reported_pct,
                year=current_year,
                prev_year=current_year - 1,
                major_currency=major_currency,
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(intercompany_fx_templates)
            amount = generate_value(False)
            sentence = template.format(
                company=pick_company_name(company_name),
                currency_code=currency_code,
                amount=amount,
                money_unit=money_units,
                major_currency=major_currency,
                month=month,
                end_day=end_day,
                year=current_year,
            )
            sentences.append(sentence)
        random.shuffle(sentences)
        sentences = sentences[: random.randint(1, len(sentences))] if len(sentences) > 2 else sentences
        merged_text = ". ".join(sentences)
        all_sentences.append([merged_text])

    # Commodity prices/risk/inventory (0-2 sentences)
    num_commodity = random.randint(1, 2)
    for _ in range(num_commodity):
        sentences = []

        commodity = random.choice(commodities)
        commodity2 = random.choice([c for c in commodities if c != commodity])
        commodity3 = random.choice(
            [c for c in commodities if c not in [commodity, commodity2]]
        )
        unit = random.choice(volume_units)
        month = random.choice(months)
        end_day = random.randint(28, 31)

        if random.random() < 0.5:
            template = random.choice(commodity_price_exposure_templates)
            low_price = generate_value(False, 100)
            high_price = round(low_price * random.uniform(1.3, 2.0), 2)
            sentence = template.format(
                company=pick_company_name(company_name),
                commodity=commodity,
                commodity2=commodity2,
                commodity3=commodity3,
                currency_code=currency_code,
                low_price=low_price,
                high_price=high_price,
                unit=unit,
                year=current_year,
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(commodity_cost_impact_templates)
            amount = generate_value(False, 150)
            pct = generate_value(False, 40)
            prev_pct = generate_value(False, 40)
            sentence = template.format(
                company=pick_company_name(company_name),
                currency_code=currency_code,
                amount=amount,
                money_unit=money_units,
                pct=pct,
                prev_pct=prev_pct,
                commodity=commodity,
                commodity2=commodity2,
                year=current_year,
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(commodity_inventory_valuation_templates)
            amount = generate_value(False, 100)
            volume = generate_value(False, 50000)
            method = random.choice(inventory_methods)
            sentence = template.format(
                company=pick_company_name(company_name),
                commodity=commodity,
                commodity2=commodity2,
                volume=f"{volume:,}",
                unit=unit,
                currency_code=currency_code,
                amount=amount,
                money_unit=money_units,
                month=month,
                end_day=end_day,
                year=current_year,
                method=method,
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(commodity_pricing_strategies_templates)
            pct = generate_value(False, 50)
            num_months = generate_value(False, 12)
            sentence = template.format(
                company=pick_company_name(company_name),
                pct=pct,
                months=num_months,
                commodity=commodity,
                year=current_year,
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(commodity_supply_risk_templates)
            pct = generate_value(False, 90)
            sentence = template.format(
                company=pick_company_name(company_name),
                commodity=commodity,
                pct=pct,
                year=current_year,
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(commodity_exposure_quantification_templates)
            pct = generate_value(False, 10)
            pct2 = generate_value(False, 25)
            amount = generate_value(False, 100)
            change = generate_value(False, 20)
            sentence = template.format(
                company=pick_company_name(company_name),
                pct=pct,
                pct2=pct2,
                commodity=commodity,
                commodity2=commodity2,
                currency_code=currency_code,
                amount=amount,
                money_unit=money_units,
                change=change,
                unit=unit,
            )
            sentences.append(sentence)

        if random.random() < 0.5:
            template = random.choice(physical_commodity_operations_templates)
            volume = generate_value(False, 10000)
            amount = generate_value(False, 500)
            pct = generate_value(False, 25)
            cost = generate_value(False, 80)
            prev_cost = round(cost * random.uniform(0.7, 1.2), 2)
            sentence = template.format(
                company=pick_company_name(company_name),
                commodity=commodity,
                volume=f"{volume:,}",
                unit=unit,
                year=current_year,
                prev_year=current_year-1,
                currency_code=currency_code,
                amount=amount,
                money_unit=money_units,
                pct=pct,
                cost=cost,
                prev_cost=prev_cost,
                month=month,
                end_day=end_day,
            )
            sentences.append(sentence)
        random.shuffle(sentences)
        sentences = sentences[: random.randint(1, len(sentences))] if len(sentences) > 2 else sentences
        merged_text = ". ".join(sentences)
        all_sentences.append([merged_text])

    # Shuffle and select
    random.shuffle(all_sentences)
    selected_sentences = []
    for i in range(max_len):
        sentence = all_sentences[i]
        selected_sentences.extend(sentence)
        if random.random() < 0.25 or len(sentence) > 400:
            break
    selected_sentences = [s[0].upper() + s[1:] if s else "" for s in selected_sentences]
    # Create paragraph
    paragraph = (
        f"<reportingYear>{reporting_year}</reportingYear> "
        + ". ".join(selected_sentences)
        + "."
    )
    # Clean up common formatting issues
    paragraph = cleanup(paragraph, False)

    return paragraph, 3


def generate_sec_noise(company, currency_unit, month, year):
    def generate_toc_line():
        template = random.choice(sec_toc_patterns)
        page_num = random.randint(1, 200)  # simulate TOC page numbers
        return (
            template.format(
                page=page_num,
                company=pick_company_name(company),
            )
            + " "
        )

    phrases = [
        "Commission file number " + str(random.randint(1, 99999)).zfill(5),
        f"ANNUAL REPORT PURSUANT TO SECTION {random.choice(['13','15(d)'])} OF THE SECURITIES EXCHANGE ACT OF 1934",
        f"Registrant's telephone number, including area code ({random.randint(100,999)}) {random.randint(100,999)}-{random.randint(1000,9999)}",
        f"For the fiscal year ended {month} {random.randint(28, 31)} {year}",
        f"For the transition period from {month} {random.randint(28, 31)} {year - 1} to {month} {random.randint(28, 31)} {year}",
        f"{company} (Exact Name , of Registrant as Specified in its Charter)",
        f"Indicate by check mark if the registrant is a well-known seasoned issuer. Yes {random.choice(['[x]','[]'])} No {random.choice(['[x]','[]'])}",
        f"Indicate by check mark whether the registrant (1) has filed all reports required to be filed by Section 13 or Section 15(d) of the Securities Exchange Act of 1934 during the preceding 12 months (or for such shorter period that the registrant was required to file such reports), and (2) has been subject to such filing requirements for the past 90 days. Yes {random.choice(['[x]','[]'])} No {random.choice(['[x]','[]'])}",
        f"Note — Checking the box above will not relieve any registrant required to file reports pursuant to Section 13 or 15(d) of the Exchange Act from their obligations under those Sections",
        f"Indicate by check mark whether the registrant has submitted electronically and posted on its corporate Website, if any, every Interactive Data File required to be submitted and posted to Rule 405 of Regulations S-T (§232.405 of this chapter) during the preceding 12 months (or for such shorter period that the registrant was required to submit and post such files). Yes {random.choice(['[x]','[]'])} No {random.choice(['[x]','[]'])}",
        f'Indicate by check mark whether the registrant is a large accelerated filer, an accelerated filer, a non-accelerated filer, or a smaller reporting company. See the definitions of "large accelerated filer," "accelerated filer" and "smaller reporting company" in Rule 12b-2 of the Exchange Act Yes {random.choice(['[x]','[]'])} No {random.choice(['[x]','[]'])}',
        f"The aggregate market value of the common shares held by non-affiliates was {currency_unit}{random.randint(10**6,10**9):,}",
        f"{random.randint(50_000_000,200_000_000):,} common shares outstanding as of {random.randint(1,12)}/{random.randint(1,28)}/{random.randint(2000,2024)}",
        f"Part III incorporates certain information by reference from the registrant's proxy statement for the {year} Annual Meeting of Shareholders expected to be held on {month} {random.randint(1,28)}, {year + 1} . Such proxy statement will be filed no later than 120 days after the close of the registrant's fiscal year ended {month} {random.randint(1,28)},  {year}.",
    ]

    gibberish = "".join(
        random.choices(string.ascii_lowercase + string.digits, k=random.randint(6, 12))
    ) + random.choice([".htm", ".txt"])

    # Randomly choose 8–15 fragments
    chunks = random.sample(
        headers + phrases + [gibberish] + [generate_toc_line()], k=random.randint(8, 15)
    )
    return chunks


# def deboost_keywords_batch(batch_id, batch_size=2, max_words_per_sentence=8, min_words_per_sentence=4):
#     """
#     Generate a single batch of deboost sentences.
#     This function is called by each worker thread.

#     Args:
#         batch_id: Identifier for this batch (for reproducibility if needed)
#         batch_size: Number of sentences per swap type
#         max_words_per_sentence: Maximum words in a sentence
#         min_words_per_sentence: Minimum words in a sentence

#     Returns:
#         List of (sentence, label) tuples
#     """
#     # Set random seed based on batch_id for reproducibility (optional)
#     # random.seed(batch_id)

#     sentences = []

#     # [Insert all the template definitions from previous version here]
#     derivative_specific = [
#         "equity swap", "forward contract", "futures contract", "swaption",
#         "total return swap", "credit default swap", "variance swap",
#         "basis swap", "credit spread option", "interest rate cap", "interest rate floor"
#     ]

#     gen_standalone = [
#         "option", "collar", "call", "put", "over-the-counter",
#         "receive-equity", "pay-fixed", "receive-floating", "pay-equity",
#         "pay-floating", "receive-fixed", "equity collar", "total return",
#         "swap", "future", "forward", "call option", "put option", "OTC",
#         "swaption", "cap", "floor", "straddle", "strangle"
#     ]

#     accounting_buzzwords = [
#         "interest rate", "average interest rate", "floating rate", "fixed rate",
#         "foreign currency", "currency", "exchange rate", "currency translation",
#         "commodity price", "market price", "spot price", "fair value",
#         "OCI", "other comprehensive income", "cash flow", "mark to market",
#         "notional amount", "exposure", "sensitivity", "risk management",
#         "assets", "liabilities", "contract", "debt", "warrant", "embedded",
#         "hedge accounting", "hedge effectiveness", "hedge designation",
#         "accumulated other comprehensive income", "fair value hierarchy",
#         "Level 1", "Level 2", "Level 3", "carrying value", "book value",
#         "hedge fund", "fund", "outstanding", "terminate", "expire", "termination", "expiration",
#         "dedesignation", "dedesignate", "swap", "forward", "future", "cap", "floor", "agreement"
#     ]

#     connectors = [
#         "and", "or", "with", "including", "related to", "consisting of",
#         "totaling", "aggregating", "measured at", "recorded in", "recognized in",
#         "as of", "during", "throughout", "within", "under"
#     ]

#     accounting_phrases = [
#         "recorded in the balance sheet",
#         "recognized in earnings",
#         "deferred in other comprehensive income",
#         "measured at fair value",
#         "designated as hedging instruments",
#         "subject to periodic assessment",
#         "evaluated for effectiveness",
#         "classified as Level 2",
#         "included in the consolidated financial statements",
#         "disclosed in the footnotes"
#     ]

#     commodity_specific_terms = []
#     for commodity in commodities:
#         commodity_specific_terms.extend([
#             f"{commodity} price",
#             f"{commodity} inventory",
#             f"{commodity} risk",
#             f"{commodity} market",
#             commodity]
#         )

#     # --- Label 3: Irrelevant / Unrelated Context ---
#     num_label_3 = batch_size // 4  # Adjust ratio as needed
#     for _ in range(num_label_3):
#         sentence_parts = []

#         if random.random() < 0.8:
#             sentence_parts.extend(random.sample(
#                 accounting_buzzwords,
#                 min(random.randint(2, 4), len(accounting_buzzwords))
#             ))

#         if random.random() < 0.6:
#             sentence_parts.append(random.choice(connectors))

#         sentence_parts.extend(random.sample(
#             accounting_buzzwords,
#             min(random.randint(1, 3), len(accounting_buzzwords))
#         ))
#         if random.random() < 0.3:
#             sentence_parts.extend(random.sample(commodity_specific_terms, random.randint(1, 3)))

#         if random.random() < 0.3:
#             sentence_parts.append(random.choice(gen_standalone))
#             if random.random() < 0.5:
#                 sentence_parts.append(random.choice(connectors))
#                 sentence_parts.append(random.choice(gen_standalone))

#         if random.random() < 0.4:
#             sentence_parts.append(random.choice(accounting_phrases))

#         while len(sentence_parts) < min_words_per_sentence:
#             sentence_parts.append(random.choice(accounting_buzzwords))

#         sentence_parts = sentence_parts[:max_words_per_sentence + random.randint(0, 5)]

#         seen = set()
#         unique_parts = []
#         for part in sentence_parts:
#             if part not in seen:
#                 seen.add(part)
#                 unique_parts.append(part)

#         sentence = " ".join(unique_parts)
#         sentences.append((sentence, 3))

#     # --- Label 2: Gen/Unknown Hedge Der. Speculative/Policy ---
#     num_label_2 = batch_size // 4
#     for _ in range(num_label_2):
#         sentence_parts = []

#         sentence_parts.extend(random.sample(
#             gen_standalone,
#             min(random.randint(2, 4), len(gen_standalone))
#         ))

#         if random.random() < 0.6:
#             sentence_parts.append(random.choice(connectors))

#         if random.random() < 0.5:
#             sentence_parts.extend(random.sample(
#                 accounting_buzzwords,
#                 min(random.randint(1, 3), len(accounting_buzzwords))
#             ))

#         if random.random() < 0.2:
#             sentence_parts.append(random.choice(derivative_specific))

#         if random.random() < 0.5:
#             sentence_parts.append(random.choice(connectors))
#             sentence_parts.append(random.choice(accounting_phrases))


#         while len(sentence_parts) < min_words_per_sentence:
#             sentence_parts.append(random.choice(gen_standalone))

#         sentence_parts = sentence_parts[:max_words_per_sentence + random.randint(0, 5)]

#         seen = set()
#         unique_parts = []
#         for part in sentence_parts:
#             if part not in seen:
#                 seen.add(part)
#                 unique_parts.append(part)

#         sentence = " ".join(unique_parts)
#         sentences.append((sentence, 2))

#     # --- Labels 14/15/16: Type-specific ---
#     swap_types = {
#         "ir": 14,
#         "fx": 15,
#         "cp": 16
#     }
#     for prefix, label in swap_types.items():
#         for _ in range(batch_size):
#             sentence_parts = []

#             num_swaps = random.randint(2, 4)
#             for _ in range(num_swaps):
#                 swap_type = random.choice(derivative_keywords.get(prefix, []))
#                 sentence_parts.append(swap_type)

#             if random.random() < 0.7:
#                 sentence_parts.append(random.choice(connectors))

#             if random.random() < 0.4:
#                 sentence_parts.extend(random.sample(
#                     gen_standalone,
#                     min(random.randint(1, 2), len(gen_standalone))
#                 ))

#             if random.random() < 0.3:
#                 sentence_parts.extend(random.sample(
#                     accounting_buzzwords,
#                     min(random.randint(1, 3), len(accounting_buzzwords))
#                 ))

#             if random.random() < 0.2:
#                 other_prefix = random.choice([p for p in swap_types.keys() if p != prefix])
#                 cross_contamination = random.choice(derivative_keywords.get(other_prefix, []))
#                 sentence_parts.append(cross_contamination)

#             if random.random() < 0.5:
#                 sentence_parts.append(random.choice(accounting_phrases))

#             while len(sentence_parts) < min_words_per_sentence:
#                 swap_type = random.choice(derivative_keywords.get(prefix, []))
#                 sentence_parts.append(swap_type)

#             sentence_parts = sentence_parts[:max_words_per_sentence + random.randint(0, 6)]

#             seen = set()
#             unique_parts = []
#             for part in sentence_parts:
#                 if part not in seen:
#                     seen.add(part)
#                     unique_parts.append(part)

#             sentence = " ".join(unique_parts)
#             sentences.append((sentence, label))
#     random.shuffle(sentences)
#     return sentences[:batch_size]


# def generate_deboost_dataset_concurrent(
#     total_batches=100,
#     batch_size=20,
#     max_workers=8,
#     max_words_per_sentence=8,
#     min_words_per_sentence=4
# ):
#     """
#     Generate deboost dataset using concurrent processing with tqdm progress bar.

#     Args:
#         total_batches: Number of batches to generate
#         batch_size: Size of each batch
#         max_workers: Number of parallel workers
#         max_words_per_sentence: Max words per sentence
#         min_words_per_sentence: Min words per sentence

#     Returns:
#         List of (sentence, label) tuples
#     """
#     all_sentences = []

#     # Create progress bar
#     with tqdm(total=total_batches, desc="Generating deboost sentences", unit="batch") as pbar:
#         # Use ThreadPoolExecutor for I/O-bound or CPU-bound tasks
#         with ThreadPoolExecutor(max_workers=max_workers) as executor:
#             # Submit all tasks
#             futures = {
#                 executor.submit(
#                     deboost_keywords_batch,
#                     batch_id=i,
#                     batch_size=batch_size,
#                     max_words_per_sentence=max_words_per_sentence,
#                     min_words_per_sentence=min_words_per_sentence
#                 ): i for i in range(total_batches)
#             }

#             # Process completed tasks
#             for future in as_completed(futures):
#                 batch_id = futures[future]
#                 try:
#                     batch_sentences = future.result()
#                     all_sentences.extend(batch_sentences)
#                     pbar.update(1)
#                 except Exception as e:
#                     print(f"\nError in batch {batch_id}: {e}")
#                     pbar.update(1)

#     # Remove duplicates
#     all_sentences = list(set(all_sentences))
#     return all_sentences
```


```{python}
def generate(size_per_label=100, max_workers=8):
    all_samples = []
    swap_types = ["ir", "fx", "cp", "gen"]
    numSwaps = len(swap_types)
    count = size_per_label // numSwaps
    swap_counts = count * 3

    def submit_tasks(executor):
        futures = []
        # Parallel hedge generation
        for prefix in swap_types:
            for _ in range(swap_counts):
                futures.append(
                    executor.submit(
                        generate_labeled_hedge_paragraph,
                        has_active_derivative=True,
                        swapType=prefix,
                    )
                )
            for _ in range(swap_counts):
                futures.append(
                    executor.submit(
                        generate_labeled_hedge_paragraph,
                        has_active_derivative=False,
                        swapType=prefix,
                    )
                )
            for _ in range(count):
                futures.append(
                    executor.submit(
                        generate_labeled_hedge_paragraph,
                        has_active_derivative=None,
                        swapType=prefix,
                    )
                )

        # Parallel liability paragraphs
        for label_type in [4, 5, 6, 7, 3]:
            for _ in range(count // 2):
                futures.append(
                    executor.submit(
                        generate_derivative_liability_paragraph, label_type=label_type
                    )
                )

        # Parallel accounting noise
        for _ in range(size_per_label * 2):
            futures.append(executor.submit(generate_accounting_noise_paragraph))

        return futures

    # --- Parallel execution with tqdm progress bar ---
    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        futures = submit_tasks(executor)
        for future in tqdm(
            as_completed(futures),
            total=len(futures),
            desc="Generating samples",
        ):
            # try:
            paragraph, label = future.result()
            all_samples.append((paragraph, label))
            # except Exception as e:
            #     print(f"Error during generation: {e}")
    # Deboosting
    # all_samples.extend(generate_deboost_dataset_concurrent(size_per_label))

    # --- Create and sort DataFrame ---
    df_new = pd.DataFrame(all_samples, columns=["sentence", "label"])
    df_new.sort_values(by=["label", "sentence"], ascending=[True, True], inplace=True)
    df_new.reset_index(drop=True, inplace=True)

    # --- Write or append to Excel ---
    try:
        book = load_workbook(output_file)
        with pd.ExcelWriter(
            output_file, engine="openpyxl", mode="a", if_sheet_exists="overlay"
        ) as writer:
            df_new.to_excel(writer, sheet_name="Generated_Data", index=False)
    except FileNotFoundError:
        df_new.to_excel(output_file, sheet_name="Generated_Data", index=False)

    print(f"\n{len(all_samples)} samples written/appended to {output_file} (sorted)")

```

```{python}
generate(1000)
```

```{python}
company_name_df = pd.read_excel(company_name_file)
company_names = list(company_name_df["name"])
``` 

```{python}
df = pd.read_excel(output_file)
df.to_parquet(parquet_file, index=False)
```