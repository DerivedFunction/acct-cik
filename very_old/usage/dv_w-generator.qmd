```{python}
import random
import pandas as pd
from openpyxl import load_workbook
import re
```

```{python}

output_file = "../excel/training_data.xlsx"
company_name_file = "../excel/names.xlsx"
months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
    "Jan.",
    "Feb.",
    "Mar.",
    "Apr.",
    "May",
    "Aug.",
    "Sep.",
    "Oct.",
    "Nov.",
    "Dec.",
]

quarters = ["first", "second", "third", "fourth", "1st", "2nd", "3rd", "4th"]
# Currency codes for international flavor
currency_codes = ["$", "€", "£", "¥", "CHF ", "SGD ", "CAD ", "AUD "]
currency_pairs = [
    "EUR/USD",
    "EUR/GBP",
    "EUR/JPY",
    "EUR/CHF",
    "EUR/SGD",
    "USD/JPY",
    "GBP/USD",
    "USD/CAD",
    "AUD/USD",
    "USD/CNY",
]

major_currencies = [
    "the Euro",
    "the British pound",
    "the Swiss franc",
    "the Japanese yen",
    "the Canadian dollar",
    "the Australian dollar",
    "the Chinese yuan",
    "the U.S. Dollar",
]

european_currencies = [
    "the Euro",
    "the British pound",
    "the Swiss franc",
    "the Norwegian krone",
    "the Swedish krona",
    "the Polish zloty",
    "the Czech koruna",
    "the Hungarian forint",
]

asian_currencies = [
    "the Japanese yen",
    "the Chinese yuan",
    "the Indian rupee",
    "the South Korean won",
    "the Singapore dollar",
    "the Thai baht",
    "the Malaysian ringgit",
]

americas_currencies = [
    "the Canadian dollar",
    "the Mexican peso",
    "the Brazilian real",
    "the Argentine peso",
    "the Chilean peso",
    "the Colombian peso",
]
all_currencies = (
    set(major_currencies)
    | set(european_currencies)
    | set(asian_currencies)
    | set(americas_currencies)
)
all_currencies = list(all_currencies)
```

# Derivative liabilities and Warrants and Embedded Derivatives
```{python}

warrant_issuance_templates = [
    'In connection with the {event}, {company} issued warrants to purchase up to {shares} shares of common stock at an exercise price of {currency_code}{price} per share, in accordance with the guidance contained in FASB ASC 815 "Derivatives and Hedging" whereby under that provision the warrants do not meet the criteria for equity treatment and must be recorded as a liability',
    "During {month} {year}, {company} issued {shares} warrants exercisable at {currency_code}{price} per share in conjunction with {event} and is classified as a liability",
    "As part of {event}, {company} granted liability-classified warrants for {shares} shares with a strike price of {currency_code}{price}, expiring in {expiry_year}",
    "{company} issued {shares} warrants at an exercise price of {currency_code}{price} per share, are classified as liabilities the guidence of ASC 815, as consideration for {event}",
    "In {month} {year}, warrants to acquire {shares} shares at {currency_code}{price} per share were issued in connection with {event}, and are derivative liabilities",
    "Under the guidance in ASC 815-40, certain warrants issued at {year} do not meet the criteria for equity treatment"
]

# Warrant events/reasons
warrant_events = [
    "a debt financing transaction",
    "the series B preferred stock offering",
    "a credit facility agreement",
    "initial public offering",
    "a strategic partnership agreement",
    "the convertible note issuance",
    "a private placement",
    "the acquisition financing",
    "vendor financing arrangements",
]

# Warrant fair value measurement templates
warrant_fv_templates = [
    "The fair value of the warrants classifed as liabilities was determined to be {currency_code}{amount} {money_unit} using the  as of {date}",
    "At issuance, the warrant liabilities were valued at {currency_code}{amount} {money_unit} using a ",
    "{company} estimated the fair value of the warrants at {currency_code}{amount} {money_unit} as of {month} {end_day}, {year} using the {model} methodology",
    "Using a {model}, the warrant liabilities were fair valued at {currency_code}{amount} {money_unit} as of {date}",
    "The fair value of outstanding liability-classified warrants totaled {currency_code}{amount} {money_unit} at year-end {year}, {verb} using {model}",
    "The fair value of outstanding warrant liabilities totaled {currency_code}{amount} {money_unit} at year-end {year}, {verb} using {model}",
    "The fair value of the warrants classified as liabilities is estimated using the , with the following inputs as of {month} {year}",
    "The fair value of the warrant liabilities presented below were {verb} using {model}"
]


# Warrant liability classification templates
warrant_liability_templates = [
    "The warrants are classified as liabilities and marked to market each reporting period with changes in fair value recorded in {location}",
    "These warrants are recorded as liabilities at fair value, with subsequent changes recognized in {location}",
    "{company} accounts for the warrants as liabilities rather than equity measured at fair value through {location}",
    "After all relevant assessments, {company} determined that the warrants issued under the {event} require classification as a liability pursuant to ASC 840"
    "Warrant liabilities are remeasured to fair value at each balance sheet date with gains and losses recorded in {location}",
    "As the warrants contain certain provisions, they are classified as liabilities and adjusted to fair value quarterly through {location}",
    "Warrants accounted for as liabilities have the potential to be settled in cash or are not indexed to {company}'s own stock",
    "This warrant liability will be re-measured at each balance sheet date until the warrants are exercised or expire, and any change in fair value will be recognized in {company}'s {location}",
    "Any decrease or increase in the estimated fair value of the warrant liability since the most recent balance sheet date is recorded in {company}'s {location} as changes in fair value of derivative liabilities",
    "The amount of warrant liability was determined and recognized on {location} for the applicable reporting period based on the number of warrants that would have been issued",
]

fv_change_locations = [
    "other income (expense), net",
    "change in fair value of derivative liabilities",
    "other comprehensive income",
    "earnings",
    "the consolidated statements of operations",
    "statement of operations"
]

# Derivative liability general templates
deriv_liability_general_templates = [
    "Derivative liabilities consist primarily of warrant liabilities and are measured at fair value on a recurring basis using Level 3 inputs",
    "{company}'s derivative liabilities primarily relate to freestanding warrants and embedded conversion features that require bifurcation",
    "As of {month} {end_day}, {year}, derivative liabilities totaled {currency_code}{amount} {money_unit} compared to {currency_code}{prev_amount} {money_unit} in the prior year",
    "Changes in the fair value of derivative liabilities during {year} resulted in a {gain_loss} of {currency_code}{amount} {money_unit}",
    "{company} recognized derivative liabilities of {currency_code}{amount} {money_unit} related to warrants issued in connection with financing transactions during {year}",
    "{company}’s warrant liability is based on  utilizing management judgment and pricing inputs from observable and unobservable markets with less volume and transaction frequency than active markets",
    "The following table presents information about {company}'s warrant liabilities that are measured at fair value on a recurring basis at {month} {end_day}, {year} and indicates the fair value hierarchy of the valuation inputs"
]

# Down round feature templates
down_round_templates = [
    "The warrants contain down round provisions that adjust the exercise price if {company} issues equity securities at prices below the then-current exercise price",
    "Due to down round features that could result in a variable number of shares upon exercise, the warrants are classified as liabilities rather than equity",
    "The warrants include anti-dilution protection in the form of down round provisions, requiring liability classification under ASC 815-40",
    "Down round features embedded in the warrants preclude equity classification and require remeasurement at fair value each period",
]

# Earnout liability templates
earnout_templates = [
    "In connection with the acquisition of {target}, {company} recorded an earnout liability of {currency_code}{amount} {money_unit}, which will be settled in cash or shares based on achievement of revenue milestones through {year}",
    "{company} assumed earnout obligations valued at {currency_code}{amount} {money_unit} as part of the {target} acquisition, payable upon achievement of specified operational targets",
    "Contingent consideration arrangements from business combinations resulted in derivative liabilities of {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}",
    "The earnout liability related to the {target} acquisition was remeasured to {currency_code}{amount} {money_unit} during {year}, with the change recorded in other income (expense)",
]

# Embedded derivative identification templates
embedded_identification_templates = [
    "{company} has identified embedded derivatives within certain {host_contract} that require bifurcation and separate accounting under ASC 815",
    "Certain {host_contract} contain embedded features that meet the definition of derivatives and are not clearly and closely related to the host contract",
    "{company}'s {host_contract} include embedded derivative features that have been bifurcated and recorded separately at fair value",
    "Embedded derivatives have been identified within {host_contract} and are accounted for separately from the host instrument",
    "{company} evaluated {host_contract} and determined that certain embedded features require bifurcation under derivative accounting guidance",
    '{company} adopted SFAS 155, "Accounting for Certain Hybrid Instruments" to identify all embedded derivative features',
    "{company} measures a hybrid financial instrument in its entirety at fair value after having identified all embedded derivative features."
    "{company} identified and documented the embedded derivative features, and the irrevocably elected to measure and carry the {host_contract} at fair value" 
]

host_contracts = [
    "convertible debt instruments",
    "hybrid financial instruments",
    "convertible preferred stock",
    "redeemable preferred stock",
    "convertible notes payable",
    "customer contracts",
    "supplier agreements",
    "lease agreements with variable payments",
]

# Specific embedded derivative types
embedded_types_templates = [
    "The embedded derivatives consist primarily of {embedded_type} that are measured at fair value through earnings",
    "{company} has bifurcated {embedded_type} from the host {host_contract}",
    "Embedded {embedded_type} within {host_contract} are carried at fair value with changes recorded in {location}",
    "The {embedded_type} embedded in the {host_contract} requires separate recognition as a derivative liability",
]

embedded_types = [
    "conversion features",
    "redemption features",
    "reset provisions",
    "make-whole provisions",
    "contingent interest features",
    "price adjustment mechanisms",
    "indexed payment terms",
    "foreign currency-linked provisions",
    "commodity price escalation clauses",
]

# Convertible debt embedded derivative templates
convertible_debt_templates = [
    "{company} issued {currency_code}{principal} {money_unit} in convertible senior notes in {month} {year}. The conversion feature was determined to be an embedded derivative requiring bifurcation, with an initial fair value of {currency_code}{embedded_fv} {money_unit}",
    "In {month} {year}, {company} completed an offering of {currency_code}{principal} {money_unit} aggregate principal amount of convertible notes. The embedded conversion option was bifurcated and valued at {currency_code}{embedded_fv} {money_unit}",
    "The convertible notes include conversion features that are not clearly and closely related to the debt host. The embedded derivative was recorded at a fair value of {currency_code}{embedded_fv} {money_unit} at issuance",
    "Upon issuance of the {currency_code}{principal} {money_unit} convertible debt in {year}, {company} allocated {currency_code}{embedded_fv} {money_unit} to the embedded conversion derivative",
]

# Fair value measurement of embedded derivatives
embedded_fv_templates = [
    "The fair value of the embedded derivative was {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}, compared to {currency_code}{prev_amount} {money_unit} at {month} {end_day}, {prev_year}",
    "Embedded derivative liabilities totaled {currency_code}{amount} {money_unit} at year-end {year}, representing a {change_direction} from {currency_code}{prev_amount} {money_unit} in the prior year",
    "As of {month} {end_day}, {year}, {company} recorded embedded derivative liabilities of {currency_code}{amount} {money_unit} measured using Level 3 inputs",
    "The embedded derivatives had a fair value of {currency_code}{amount} {money_unit} at {month} {end_day}, {year}, with changes in value recorded in other expense",
]

# Valuation methodology templates
embedded_valuation_templates = [
    "The fair value of embedded derivatives is determined using a {model}, incorporating assumptions for {assumptions}",
    "{company} values embedded derivatives using {model} with key inputs including {assumptions}",
    "Fair value is estimated using {model}, which considers {assumptions}",
    "Embedded derivatives are valued using {model}, with significant unobservable inputs related to {assumptions}",
]

valuation_models = [
    "Monte Carlo simulation model",
    "binomial lattice model",
    "Black-Scholes option pricing model",
    "BSM model",
]

valuation_assumptions = [
    "stock price volatility, risk-free interest rates, and expected term",
    "credit spreads, conversion probability, and stock price volatility",
    "volatility, dividend yield, and time to maturity",
    "probability of conversion, discount rates, and market price of common stock",
    "expected volatility, probability of redemption, and time to maturity",
]

# Fair value change recognition templates
embedded_fv_change_templates = [
    "During {year}, {company} recognized a {gain_loss} of {currency_code}{amount} {money_unit} related to changes in the fair value of embedded derivatives",
    "Changes in fair value of embedded derivatives resulted in a {gain_loss} of {currency_code}{amount} {money_unit} for the year ended {month} {end_day}, {year}",
    "{company} recorded {gain_loss}s of {currency_code}{amount} {money_unit} from the remeasurement of embedded derivative liabilities during {year}",
    "Fair value adjustments on embedded derivatives contributed a {gain_loss} of {currency_code}{amount} {money_unit} to {location} in {year}",
]

# Closely and clearly related analysis templates
ccr_analysis_templates = [
    "{company} performed an assessment of whether the embedded features were clearly and closely related to the economic characteristics of the host contract and concluded bifurcation was required",
    "The embedded features are not clearly and closely related to the debt host instrument, as the conversion feature is indexed to {company}'s own stock and includes down round protection",
    "Management evaluated the economic characteristics and risks of the embedded features and determined they are not clearly and closely related to the host, requiring separate accounting",
    "The embedded derivative fails the clearly and closely related test due to its equity-linked characteristics and variable settlement provisions",
]

# Conversion/settlement templates
embedded_settlement_templates = [
    "Upon conversion or redemption of the host instrument, the embedded derivative is remeasured to fair value with any gain or loss recognized in earnings, and the liability is extinguished",
    "In {month} {year}, {currency_code}{principal} {money_unit} of convertible notes were converted, resulting in settlement of the associated embedded derivative liability and recognition of a {gain_loss} of {currency_code}{amount} {money_unit}",
    "{company} settled embedded derivative liabilities totaling {currency_code}{amount} {money_unit} during {year} in connection with debt extinguishment transactions",
    "During the {quarter} quarter of {year}, the conversion of notes resulted in derecognition of {currency_code}{amount} {money_unit} in embedded derivative liabilities",
]

# Embedded FX derivatives templates
embedded_fx_templates = [
    "Certain {host_contract} contain payments indexed to foreign currency exchange rates that represent embedded foreign currency derivatives",
    "{company} has identified embedded foreign currency derivatives in {host_contract} where payments are denominated in a currency other than the functional currency of either party",
    "Embedded foreign exchange derivatives arise from {host_contract} with payment terms linked to movements in the {currency_pair} exchange rate",
    "{company}'s {host_contract} include embedded FX derivatives requiring bifurcation due to currency mismatches between contract terms and functional currencies",
]

# Historical warrant templates (for label 5)
warrant_past_templates = [
    "During {year}, {company} had outstanding warrant liabilities to purchase {shares} shares at {currency_code}{price} per share, which expired unexercised in {month} {year}",
    "In {year}, all outstanding warrants were exercised or expired, and {company} has no derivative liabilities as of {month} {end_day}, {current_year}",
    "{company} previously issued warrants in connection with {event} during {year}. These derivative liabilities were fully exercised by {month} {expiry_year}",
    "Warrants issued in {year} with an exercise price of {currency_code}{price} per share were settled during {settlement_year}, eliminating all derivative warrant liabilities",
    "As of {month} {end_day}, {current_year}, {company} no longer has any outstanding derivative liabilities. All liability-classified warrants issued in {year} were exercised or expired by {expiry_year}",
]

warrant_liability_extinguishment_templates = [
    "The warrant liabilities of {currency_code}{amount} {money_unit} recorded in {year} were extinguished upon exercise and expiration during {settlement_year}",
    "All warrant liabilities were eliminated in {settlement_year} following the exercise of outstanding warrants by holders",
    "During {settlement_year}, {company} settled all outstanding warrant liabilities, recognizing a final fair value adjustment of {currency_code}{amount} {money_unit}",
    "The warrant liability balance of {currency_code}{amount} {money_unit} at {month} {end_day}, {year} was reduced to zero during {settlement_year} upon warrant exercises",
]

earnout_past_templates = [
    "The earnout liability related to the {target} acquisition, recorded in {year}, was settled in {settlement_year} upon achievement of the specified milestones",
    "Contingent consideration from the {year} acquisition of {target} was paid out in {settlement_year}, extinguishing the {currency_code}{amount} {money_unit} earnout liability",
    "{company}'s earnout obligations from prior acquisitions were fully satisfied by {settlement_year}, with no remaining contingent consideration liabilities",
    "During {settlement_year}, {company} paid {currency_code}{amount} {money_unit} to settle earnout liabilities related to business combinations completed in {year}",
]


# ========== SNIPPET 3: Add past-tense embedded derivative templates ==========
# Insert after embedded_fx_templates (around line 280)

# Historical embedded derivative templates (for label 7)
embedded_past_templates = [
    "{company} previously maintained embedded derivatives within {host_contract} issued in {year}. These instruments were fully converted or redeemed by {settlement_year}",
    "Embedded derivative liabilities related to convertible notes issued in {year} were extinguished upon conversion during {settlement_year}",
    "As of {month} {end_day}, {current_year}, {company} has no embedded derivative liabilities. All instruments containing embedded features were settled in {settlement_year}",
    "The embedded derivatives bifurcated from {host_contract} in {year} were eliminated following the redemption of the host instruments in {settlement_year}",
]

convertible_debt_redemption_templates = [
    "The {currency_code}{principal} {money_unit} convertible notes issued in {year} were fully converted to common stock during {settlement_year}, resulting in derecognition of the {currency_code}{embedded_fv} {money_unit} embedded derivative liability",
    "In {month} {settlement_year}, {company} redeemed all outstanding convertible debt originally issued in {year}, eliminating embedded derivative liabilities of {currency_code}{amount} {money_unit}",
    "The convertible debt instruments with embedded derivatives issued in {year} matured in {settlement_year}, with all notes converted to equity prior to maturity",
    "During {settlement_year}, {company} completed the conversion of all {currency_code}{principal} {money_unit} in convertible notes, extinguishing the related embedded derivative liability",
]

embedded_no_longer_outstanding_templates = [
    "{company} no longer has any embedded derivative liabilities as all instruments containing bifurcated features were settled, converted, or matured by {settlement_year}",
    "As of {month} {end_day}, {current_year}, there are no outstanding embedded derivatives. All such liabilities were extinguished in {settlement_year}",
    "The embedded derivative liabilities of {currency_code}{amount} {money_unit} recorded in prior years were fully eliminated by {settlement_year}",
    "No embedded derivatives remain outstanding as of year-end {current_year}. The last remaining instruments were settled in {settlement_year}",
]

```

# Hedging Activities
```{python}
derivative_keywords = {
    "IR": [
        "interest rate contract",
        "interest rate forward contract",
        "interest rate collar contract",
        "interest rate swap contract",
        "zero coupon swap contract",
        "single currency basis swap contract",
        "interest rate future contract",
        "pay-fixed, receive-floating interest rate swap contract",
        "pay-floating, receive-fixed interest rate swap contract",
        "interest rate hedge contract",
        "interest rate hedge agreement",
        "forward starting interest rate swap contract",
        "treasury rate lock agreement",
        "interest rate swap agreement",
    ],
    "FX": [
        "forward rate agreement",
        "forward rate contract",
        "forward rate option contract",
        "foreign exchange contract",
        "foreign exchange rate contract",
        "cross-currency swap contract",
        "cross-currency swap agreement",
        "cross-currency rate contract",
        "foreign exchange forward contract",
        "foreign exchange rate forward contract",
        "cross-currency forward contract",
        "cross-currency rate forward contract",
        "cross-currency option contract",
        "forward foreign exchange contract",
        "foreign exchange future contract",
        "foreign exchange rate future contract",
        "cross-currency future contract",
        "foreign exchange swap contract",
        "foreign exchange rate swap contract",
        "cross-currency swap contract",
        "foreign exchange option contract",
        "foreign exchange rate option contract",
        "cross-currency option contract",
        "foreign exchange cap contract",
        "foreign exchange rate cap contract",
        "cross-currency cap contract",
        "foreign exchange floor contract",
        "foreign exchange rate floor contract",
        "cross-currency floor contract",
        "foreign exchange collar contract",
        "foreign exchange rate collar contract",
        "cross-currency collar contract",
        "foreign currency forward contract",
        "foreign currency purchased put option contract",
    ],
    "CP": [
        "commodity contract",
        "commodity price contract",
        "commodity derivative contract",
        "commodity price derivative contract",
        "commodity instrument contract",
        "commodity price instrument contract",
        "commodity forward contract",
        "commodity price forward contract",
        "commodity future contract",
        "commodity price future contract",
        "commodity option contract",
        "commodity price option contract",
        "commodity cap contract",
        "commodity price cap contract",
        "commodity floor contract",
        "commodity price floor contract",
        "commodity collar contract",
        "commodity price collar contract",
        "commodity swap contract",
        "commodity price swap contract",
    ],
    "GENERIC": [
        "forward contract",
        "futures contract",
        "call option contract",
        "put option contract",
        "option contract",
        "swap contract",
        "swaption contract",
        "purchased put option contract",
        "purchased call option contract",
        "collar contract",
    ],
}
all_derivatives = list(
    dict.fromkeys(kw for kws in derivative_keywords.values() for kw in kws)
)
money_unit_list = ["thousand", "million", "billion"]
# Template arrays for event-based sentences (labels 0 and 1)
past_event_templates = [
    "During {month} {year}, {company} executed {swap_type} in anticipation of issuing fixed-rate notes, leaving {currency_code}{amount} {money_unit} of unrealized losses in OCI related to {swap_type} as of {month} {next_year}",
    "In {month} {year}, {company} entered into {swap_type} with a notional value of {currency_code}{amount} {money_unit} to hedge forecasted debt issuances, resulting in deferred losses recorded in accumulated OCI",
    "{company} designated {swap_type} in {month} {year} as {hedge_type} hedges against anticipated interest payments, with {currency_code}{amount} {money_unit} in fair value adjustments recorded in equity",
    "During {year}, {swap_type} were executed to lock in favorable rates prior to debt refinancing, with {currency_code}{amount} {money_unit} of accumulated losses deferred in other comprehensive income",
    "In {month} {year}, {company} entered into forward-starting {swap_type} in connection with planned debt offerings, recording {currency_code}{amount} {money_unit} of mark-to-market losses in OCI",
    "In {month} {year}, {company} utilized {swap_type} to manage interest rate risk, recognizing {currency_code}{amount} {money_unit} in unrealized gains in OCI as of {month} {next_year}",
    "During {year}, {company} executed {swap_type} to hedge against fluctuations in interest rates, with {currency_code}{amount} {money_unit} in deferred gains recorded in accumulated OCI",
    "In {month} {year}, {company} entered into {swap_type} agreements with a total notional amount of {currency_code}{amount} {money_unit}, resulting in fair value losses recorded in equity",
    "{company} implemented {swap_type} in {month} {year} to stabilize borrowing costs, deferring {currency_code}{amount} {money_unit} of losses in other comprehensive income",
    "in the {quarter} quarter of {year}, {company} executed forward-starting {swap_type} to secure rates for future debt issuances, with {currency_code}{amount} {money_unit} in mark-to-market adjustments in OCI",
    "During {month} {year}, {swap_type} were designated as {hedge_type} hedges, resulting in {currency_code}{amount} {money_unit} of unrealized losses recorded in accumulated OCI",
    "In {year}, {company} entered into {swap_type} to mitigate interest rate exposure, with {currency_code}{amount} {money_unit} in fair value changes deferred in equity",
    "In {month} {year}, {company} locked in rates using {swap_type}, recognizing {currency_code}{amount} {money_unit} in deferred losses within other comprehensive income",
    "during the {quarter} quarter of {year}, {company} executed {swap_type} to hedge planned bond issuances, with {currency_code}{amount} {money_unit} in unrealized losses recorded in OCI",
    "In {month} {year}, {swap_type} were used to manage exposure to interest rate volatility, resulting in {currency_code}{amount} {money_unit} of deferred gains in equity",
    "{company} entered into {swap_type} in {month} {year} to hedge forecasted interest payments, with {currency_code}{amount} {money_unit} in mark-to-market adjustments in OCI",
    "In {year}, {company} designated {swap_type} as hedges for anticipated debt, recording {currency_code}{amount} {money_unit} in fair value losses in accumulated OCI",
    "During {month} {year}, {company} implemented {swap_type} to secure favorable rates, with {currency_code}{amount} {money_unit} in unrealized gains deferred in OCI",
    "in the {quarter} quarter of {year}, {swap_type} were executed to manage interest rate risk on future borrowings, with {currency_code}{amount} {money_unit} in losses recorded in equity",
    "{company} used {swap_type} in {month} {year} to hedge against rising interest rates, deferring {currency_code}{amount} {money_unit} in mark-to-market losses in OCI",
    "In {month} {year}, {company} entered into {swap_type} with a notional value of {currency_code}{amount} {money_unit}, resulting in deferred gains recorded in accumulated OCI",
    "During {year}, {company} executed {swap_type} to lock in rates for planned financings, with {currency_code}{amount} {money_unit} in fair value adjustments in OCI",
    "In {month} {year}, {company} designated forward-starting {swap_type} as {hedge_type} hedges, recognizing {currency_code}{amount} {money_unit} in unrealized losses in equity",
    "{company} implemented {swap_type} in the {quarter} quarter of {year} to stabilize interest costs, with {currency_code}{amount} {money_unit} in deferred losses recorded in OCI",
    "In {month} {year}, {swap_type} were entered to hedge anticipated debt offerings, resulting in {currency_code}{amount} {money_unit} of mark-to-market gains in accumulated OCI",
]

swap_entry_templates = [
    "In {month} {year}, {swap_type} were entered into and designated as hedges of the notes with a notional amount of {currency_code}{notional} {money_unit}, effectively converting portions of fixed-rate debt to floating rates",
    "During {month} {year}, {company} executed {swap_type} with an aggregate notional value of {currency_code}{notional} {money_unit} to modify the interest rate characteristics of outstanding senior notes",
    "{company} entered into {swap_type} in {month} {year} with a total notional amount of {currency_code}{notional} {money_unit}, designated as fair value hedges of fixed-rate obligations",
    "In {month} {year}, {swap_type} totaling {currency_code}{notional} {money_unit} notional were designated as hedging instruments against changes in the fair value of fixed-rate debt",
    "{company} executed {swap_type} in {month} {year} with notional amounts aggregating {currency_code}{notional} {money_unit} to hedge interest rate exposure on a portion of its debt portfolio",
    "in the {quarter} quarter of {year}, {company} entered into {swap_type} with a notional value of {currency_code}{notional} {money_unit} to convert fixed-rate senior notes to variable rates",
    "During {month} {year}, {swap_type} were executed with a total notional amount of {currency_code}{notional} {money_unit} to manage interest rate risk on long-term debt",
    "In {month} {year}, {company} designated {swap_type} with a notional amount of {currency_code}{notional} {money_unit} as fair value hedges for its outstanding bonds",
    "{company} initiated {swap_type} in {month} {year} with a notional value of {currency_code}{notional} {money_unit} to adjust the interest rate profile of its debt",
    "in the {quarter} quarter of {year}, {swap_type} totaling {currency_code}{notional} {money_unit} were entered to hedge changes in the fair value of fixed-rate liabilities",
    "During {month} {year}, {company} executed {swap_type} with a notional amount of {currency_code}{notional} {money_unit} to manage exposure to interest rate fluctuations",
    "In {month} {year}, {swap_type} with an aggregate notional value of {currency_code}{notional} {money_unit} were designated to hedge fixed-rate debt obligations",
    "{company} entered into {swap_type} in the {quarter} quarter of {year} with a notional amount of {currency_code}{notional} {money_unit} to modify the interest rate structure of its senior notes",
    "In {month} {year}, {swap_type} were implemented with a total notional value of {currency_code}{notional} {money_unit} to hedge the fair value of outstanding debt",
    "During {year}, {company} executed {swap_type} with a notional amount of {currency_code}{notional} {money_unit} to convert portions of its fixed-rate debt to floating rates",
    "In {month} {year}, {swap_type} with a notional value of {currency_code}{notional} {money_unit} were designated as fair value hedges against changes in debt valuation",
    "{company} entered into {swap_type} during the {quarter} quarter of {year} with a notional amount of {currency_code}{notional} {money_unit} to manage interest rate exposure on bonds",
    "In {month} {year}, {swap_type} totaling {currency_code}{notional} {money_unit} were executed to adjust the interest rate characteristics of long-term liabilities",
    "during the {quarter} quarter of {year}, {company} designated {swap_type} with a notional value of {currency_code}{notional} {money_unit} as hedges of fixed-rate note obligations",
    "In {month} {year}, {swap_type} were entered with a total notional amount of {currency_code}{notional} {money_unit} to mitigate interest rate risk on debt issuances",
]

active_position_templates = [
    "Outstanding swaps at year-end {year} effectively convert the hedged portion of debt to floating rates",
    "As of {month} {end_day}, {year}, {company} maintains {swap_type} with notional amounts totaling {currency_code}{notional} {money_unit}",
    "At year-end {year}, {company} had {swap_type} outstanding with aggregate notional values of {currency_code}{notional} {money_unit} designated as hedges",
    "As of {month} {year}, outstanding {swap_type} with notional amounts of {currency_code}{notional} {money_unit} remain in effect to hedge interest rate risk",
    "{company}'s derivative portfolio at {month} {end_day}, {year} consists of {swap_type} with combined notional values of {currency_code}{notional} {money_unit}",
    "As of {month} {end_day}, {year}, {swap_type} with a notional amount of {currency_code}{notional} {money_unit} are designated as fair value hedges",
    "At year-end {year}, {company} holds {swap_type} with a total notional value of {currency_code}{notional} {money_unit} to manage debt-related interest rate risk",
    "As of {month} {year}, {company}’s outstanding {swap_type} have a notional value of {currency_code}{notional} {money_unit}, hedging fixed-rate obligations",
    "{company} maintains {swap_type} with a notional amount of {currency_code}{notional} {money_unit} as of {month} {end_day}, {year}, designated as hedges",
    "At the end of {year}, {swap_type} with an aggregate notional value of {currency_code}{notional} {money_unit} remain active in {company}’s derivative portfolio",
    "As of {month} {end_day}, {year}, {company} has {swap_type} outstanding with a notional amount of {currency_code}{notional} {money_unit} to hedge interest rate exposure",
    "{company}’s active {swap_type} at year-end {year} have a total notional value of {currency_code}{notional} {money_unit}, designated as fair value hedges",
    "As of {month} {year}, {swap_type} with a notional amount of {currency_code}{notional} {money_unit} are in place to convert fixed-rate debt to floating rates",
    "At year-end {year}, {company}’s derivative portfolio includes {swap_type} with a notional value of {currency_code}{notional} {money_unit}",
    "As of {month} {end_day}, {year}, outstanding {swap_type} totaling {currency_code}{notional} {money_unit} are used to manage interest rate risk",
    "{company} holds {swap_type} with a notional amount of {currency_code}{notional} {money_unit} at {month} {end_day}, {year}, as part of its hedging strategy",
    "At the close of {year}, {swap_type} with an aggregate notional value of {currency_code}{notional} {money_unit} remain designated as hedges",
    "As of {month} {year}, {company}’s {swap_type} portfolio includes notional amounts totaling {currency_code}{notional} {money_unit}",
    "At year-end {year}, {swap_type} with a notional value of {currency_code}{notional} {money_unit} are active to hedge fixed-rate debt obligations",
    "{company}’s derivative instruments as of {month} {end_day}, {year}, include {swap_type} with a total notional amount of {currency_code}{notional} {money_unit}",
]

termination_templates = [
    "In the {quarter} quarter of {year}, {company} terminated all remaining {swap_type} agreements. {company} has no outstanding derivative positions as of year-end {year}",
    "During the {quarter} quarter of {year}, all previously designated {swap_type} were settled or expired, resulting in no outstanding hedge positions as of {month} {end_day}, {year}",
    "{company} closed out all {swap_type} positions during the {quarter} quarter of {year}, with no derivative instruments remaining at period end",
    "All outstanding {swap_type} matured or were terminated in the {quarter} quarter of {year}, leaving no active derivative positions at year-end",
    "In {month} {year}, {company} settled all {swap_type} agreements, resulting in no active hedges as of {month} {end_day}, {year}",
    "During the {quarter} quarter of {year}, {company} closed out {swap_type} positions, leaving no derivative instruments outstanding",
    "In the {quarter} quarter of {year}, all {swap_type} were terminated, with no remaining hedge positions at year-end {year}",
    "{company} settled all outstanding {swap_type} in {month} {year}, resulting in no active derivative contracts at period end",
    "during the {quarter} quarter of {year}, {company} terminated its {swap_type} portfolio, leaving no outstanding hedges as of {month} {end_day}, {year}",
    "In {month} {year}, all {swap_type} agreements were closed out, with no derivative positions remaining at year-end",
    "{company} ended all {swap_type} contracts in the {quarter} quarter of {year}, resulting in no active hedges at period end",
    "During {year}, all outstanding {swap_type} were settled, leaving {company} with no derivative instruments at {month} {end_day}, {year}",
    "In the {quarter} quarter of {year}, {company} terminated {swap_type} agreements, with no hedges remaining at year-end",
    "All {swap_type} positions were closed out in {month} {year}, resulting in no outstanding derivative instruments",
    "During the {quarter} quarter of {year}, {company} settled all {swap_type}, leaving no active derivative positions",
    "In {month} {year}, {company} terminated all {swap_type} contracts, with no hedges in place at {month} {end_day}, {year}",
    "{company} closed out its {swap_type} portfolio in the {quarter} quarter of {year}, with no derivatives outstanding at year-end",
    "During {month} {year}, all {swap_type} were settled or expired, resulting in no active hedge positions",
    "In the {quarter} quarter of {year}, {company} ended all {swap_type} agreements, leaving no derivative contracts at period end",
    "All {swap_type} were terminated in {month} {year}, with no outstanding hedges as of {month} {end_day}, {year}",
]

expiration_templates = [
    "All previously outstanding derivatives expired or were settled during {month} {year}, with no new positions entered into during the year",
    "{company}'s derivative portfolio was fully liquidated in {month} {year} with no replacement hedges executed during the remainder of the fiscal year",
    "Outstanding hedge positions matured throughout {year}, and {company} elected not to enter into new derivative contracts during the period",
    "During {month} {year}, all existing {swap_type} reached maturity, and no new hedging instruments were established for the fiscal year",
    "in the {quarter} quarter of {year}, all {swap_type} contracts matured, with no new derivative positions initiated",
    "{company}’s {swap_type} portfolio fully expired in {month} {year}, with no new hedges entered during the year",
    "During {year}, all outstanding {swap_type} reached maturity, and {company} did not execute new derivative contracts",
    "In {month} {year}, {company}’s {swap_type} positions expired, with no replacement hedges established",
    "All {swap_type} matured in the {quarter} quarter of {year}, and no new derivative instruments were entered into during the fiscal year",
    "During {month} {year}, {company}’s derivative portfolio of {swap_type} was fully settled, with no new positions taken",
    "In {year}, all {swap_type} contracts reached maturity, and {company} chose not to initiate new hedges",
    "{company}’s {swap_type} portfolio expired in {month} {year}, with no new derivative contracts executed",
    "during the {quarter} quarter of {year}, all outstanding {swap_type} matured, leaving no active hedges for the remainder of the year",
    "In {month} {year}, all {swap_type} reached their expiration date, with no new hedges established",
    "{company}’s derivative instruments, including {swap_type}, fully matured in {year}, with no new positions entered",
    "During {month} {year}, all {swap_type} contracts expired, and {company} did not replace them with new hedges",
    "in the {quarter} quarter of {year}, {company}’s {swap_type} portfolio reached maturity, with no new derivative contracts initiated",
    "All outstanding {swap_type} expired in {month} {year}, and no further hedging instruments were established",
    "During {year}, {company}’s {swap_type} contracts fully matured, with no new hedges entered into",
    "In {month} {year}, all derivative positions, including {swap_type}, expired, with no new contracts executed",
]

quarterly_event_templates = [
    "In the {quarter} quarter of {year}, {company} settled {currency_code}{notional} {money_unit} in {swap_type} agreements, resulting in cash proceeds of {currency_code}{settlement} {money_unit}",
    "During the {quarter} quarter of {year}, {swap_type} with notional amounts of {currency_code}{notional} {money_unit} were terminated, generating {currency_code}{settlement} {money_unit} in settlement payments to {company}",
    "{company} unwound {currency_code}{notional} {money_unit} notional of {swap_type} in the {quarter} quarter of {year}, recognizing {currency_code}{settlement} {money_unit} in cash settlements",
    "In the {quarter} quarter of {year}, {company} terminated {swap_type} totaling {currency_code}{notional} {money_unit} notional value, with net settlement receipts of {currency_code}{settlement} {money_unit}",
    "During {month} {year}, {company} settled {currency_code}{notional} {money_unit} in {swap_type}, resulting in {currency_code}{settlement} {money_unit} in cash proceeds",
    "In the {quarter} quarter of {year}, {swap_type} with a notional value of {currency_code}{notional} {money_unit} were unwound, generating {currency_code}{settlement} {money_unit} in settlement payments",
    "{company} terminated {currency_code}{notional} {money_unit} of {swap_type} in {month} {year}, with cash settlements of {currency_code}{settlement} {money_unit}",
    "During the {quarter} quarter of {year}, {company} closed out {currency_code}{notional} {money_unit} in {swap_type}, receiving {currency_code}{settlement} {money_unit} in net proceeds",
    "In {month} {year}, {company} settled {swap_type} with a notional amount of {currency_code}{notional} {money_unit}, resulting in {currency_code}{settlement} {money_unit} in cash receipts",
    "{company} unwound {swap_type} totaling {currency_code}{notional} {money_unit} in the {quarter} quarter of {year}, with {currency_code}{settlement} {money_unit} in settlement proceeds",
    "during the {quarter} quarter of {year}, {company} terminated {currency_code}{notional} {money_unit} in {swap_type} agreements, recognizing {currency_code}{settlement} {money_unit} in cash settlements",
    "In the {quarter} quarter of {year}, {swap_type} with a notional value of {currency_code}{notional} {money_unit} were settled, generating {currency_code}{settlement} {money_unit} in proceeds",
    "{company} closed out {currency_code}{notional} {money_unit} of {swap_type} in {month} {year}, with net settlement payments of {currency_code}{settlement} {money_unit}",
    "during the {quarter} quarter of {year}, {company} unwound {swap_type} totaling {currency_code}{notional} {money_unit}, receiving {currency_code}{settlement} {money_unit} in cash",
    "In {month} {year}, {company} settled {currency_code}{notional} {money_unit} in {swap_type}, resulting in {currency_code}{settlement} {money_unit} in net settlement proceeds",
    "{company} terminated {swap_type} with a notional amount of {currency_code}{notional} {money_unit} in the {quarter} quarter of {year}, with {currency_code}{settlement} {money_unit} in cash proceeds",
    "During {month} {year}, {swap_type} totaling {currency_code}{notional} {money_unit} were unwound, generating {currency_code}{settlement} {money_unit} in settlement receipts",
    "In the {quarter} quarter of {year}, {company} settled {currency_code}{notional} {money_unit} of {swap_type}, recognizing {currency_code}{settlement} {money_unit} in cash payments",
    "{company} closed out {swap_type} with a notional value of {currency_code}{notional} {money_unit} in the {quarter} quarter of {year}, with {currency_code}{settlement} {money_unit} in proceeds",
    "During {month} {year}, {company} terminated {currency_code}{notional} {money_unit} in {swap_type}, resulting in {currency_code}{settlement} {money_unit} in cash settlements",
]

option_contract_templates = [
    "{company} also have entered into {swap_type} to hedge forecasted revenue which were not part of a collar strategy. Such {swap_type} had a notional value of {currency_code}{notional1} {money_unit} and {currency_code}{notional2} {money_unit} as of {month} {end_day}, {year} and {month} {end_day}, {prev_year}, respectively",
    "{company} entered into {swap_type} with notional values of {currency_code}{notional1} {money_unit} as of {month} {end_day}, {year} compared to {currency_code}{notional2} {money_unit} as of {month} {end_day}, {prev_year}",
    "As of {month} {end_day}, {year}, {company} maintained {swap_type} with a notional value of {currency_code}{notional1} {money_unit}, compared to {currency_code}{notional2} {money_unit} in the prior year",
    "{company} utilized {swap_type} to hedge forecasted transactions, with notional amounts decreasing from {currency_code}{notional2} {money_unit} as of {month} {end_day}, {prev_year} to {currency_code}{notional1} {money_unit} as of {month} {end_day}, {year}",
    "As of {month} {end_day}, {year}, {swap_type} with a notional value of {currency_code}{notional1} {money_unit} were in place, down from {currency_code}{notional2} {money_unit} as of {month} {end_day}, {prev_year}",
    "{company} maintained {swap_type} to hedge revenue streams, with notional amounts of {currency_code}{notional1} {money_unit} at {month} {end_day}, {year} compared to {currency_code}{notional2} {money_unit} at {month} {end_day}, {prev_year}",
    "In {year}, {swap_type} with a notional value of {currency_code}{notional1} {money_unit} were active, compared to {currency_code}{notional2} {money_unit} in {prev_year}",
    "As of {month} {end_day}, {year}, {company}’s {swap_type} portfolio had a notional value of {currency_code}{notional1} {money_unit}, reduced from {currency_code}{notional2} {money_unit} in {prev_year}",
    "{company}’s {swap_type} for hedging forecasted revenue had notional values of {currency_code}{notional1} {money_unit} and {currency_code}{notional2} {money_unit} as of {month} {end_day}, {year} and {prev_year}, respectively",
    "At year-end {year}, {swap_type} with a notional amount of {currency_code}{notional1} {money_unit} were used to hedge transactions, compared to {currency_code}{notional2} {money_unit} in {prev_year}",
    "{company} employed {swap_type} with a notional value of {currency_code}{notional1} {money_unit} as of {month} {end_day}, {year}, down from {currency_code}{notional2} {money_unit} as of {month} {end_day}, {prev_year}",
    "As of {month} {end_day}, {year}, {swap_type} to hedge forecasted revenue totaled {currency_code}{notional1} {money_unit}, compared to {currency_code}{notional2} {money_unit} in the prior year",
    "{company}’s {swap_type} portfolio for revenue hedging had a notional value of {currency_code}{notional1} {money_unit} at {month} {end_day}, {year}, versus {currency_code}{notional2} {money_unit} at {month} {end_day}, {prev_year}",
    "In {year}, {company} maintained {swap_type} with a notional amount of {currency_code}{notional1} {money_unit}, reduced from {currency_code}{notional2} {money_unit} in {prev_year}",
    "As of {month} {end_day}, {year}, {swap_type} used for hedging had a notional value of {currency_code}{notional1} {money_unit}, compared to {currency_code}{notional2} {money_unit} as of {month} {end_day}, {prev_year}",
    "{company}’s {swap_type} for transaction hedging totaled {currency_code}{notional1} {money_unit} at {month} {end_day}, {year}, down from {currency_code}{notional2} {money_unit} in {prev_year}",
    "At year-end {year}, {swap_type} with a notional value of {currency_code}{notional1} {money_unit} were active, compared to {currency_code}{notional2} {money_unit} at {month} {end_day}, {prev_year}",
    "{company} utilized {swap_type} with notional amounts of {currency_code}{notional1} {money_unit} as of {month} {end_day}, {year}, versus {currency_code}{notional2} {money_unit} in the prior year",
    "As of {month} {end_day}, {year}, {company}’s {swap_type} for revenue hedging had a notional value of {currency_code}{notional1} {money_unit}, down from {currency_code}{notional2} {money_unit} in {prev_year}",
    "{company} maintained {swap_type} with a notional amount of {currency_code}{notional1} {money_unit} at {month} {end_day}, {year}, compared to {currency_code}{notional2} {money_unit} at {month} {end_day}, {prev_year}",
]

dedesignation_templates = [
    "{company} de-designated all of our {swap_type} prior to {month} {end_day}, {year}",
    "{company} de-designated {swap_type} during {year}, removing hedge accounting treatment for these instruments",
    "All {swap_type} were de-designated as hedging instruments prior to year-end {year}",
    "During {year}, {company} discontinued hedge accounting for all outstanding {swap_type}",
    "{company} removed hedge designation from {swap_type} in the {quarter} quarter of {year}",
    "In {month} {year}, {company} de-designated all {swap_type}, discontinuing hedge accounting",
    "During the {quarter} quarter of {year}, all {swap_type} were removed from hedge accounting treatment",
    "{company} ceased hedge accounting for {swap_type} in {month} {year}",
    "In {year}, all {swap_type} were de-designated, with no hedge accounting applied at year-end",
    "{company} discontinued hedge designation for {swap_type} during the {quarter} quarter of {year}",
    "All {swap_type} were de-designated in {month} {year}, removing their hedge accounting status",
    "During {year}, {company} ended hedge accounting for its {swap_type} portfolio",
    "In the {quarter} quarter of {year}, {company} de-designated its {swap_type} contracts",
    "{company} removed hedge accounting from {swap_type} in {month} {year}",
    "during the {quarter} quarter of {year}, all {swap_type} lost their hedge designation status",
    "In {year}, {company} de-designated all {swap_type}, discontinuing hedge accounting treatment",
    "{company} ceased applying hedge accounting to {swap_type} in the {quarter} quarter of {year}",
    "All {swap_type} were de-designated prior to {month} {year}, ending their hedge accounting status",
    "During the {quarter} quarter of {year}, {company} removed hedge designation from all {swap_type}",
    "In {month} {year}, {company} discontinued hedge accounting for its {swap_type} portfolio",
]

forward_starting_templates = [
    "In anticipation of issuing fixed-rate debt, {company} may use {swap_type} that are designated as {hedge_type} hedges to hedge against changes in interest rates that could impact expected future issuances of debt",
    "{company} utilizes {swap_type} designated as {hedge_type} hedges to lock in favorable interest rates prior to anticipated debt issuances",
    "To hedge interest rate exposure on forecasted debt offerings, {company} may enter into {swap_type} designated as {hedge_type} hedges",
    "{swap_type} are employed to mitigate the risk of rising interest rates on planned fixed-rate debt issuances",
    "{company} uses {swap_type} as {hedge_type} hedges to secure interest rates for future debt issuances",
    "In preparation for debt offerings, {company} may designate {swap_type} as {hedge_type} hedges to manage interest rate risk",
    "To protect against interest rate volatility, {company} employs {swap_type} for planned fixed-rate debt issuances",
    "{swap_type} are utilized as {hedge_type} hedges to lock in rates for anticipated debt financings",
    "{company} may enter into {swap_type} to hedge interest rate risk on forecasted debt issuances",
    "In anticipation of bond issuances, {swap_type} are designated as {hedge_type} hedges to stabilize future interest costs",
    "{company} uses {swap_type} to mitigate interest rate fluctuations on planned debt offerings",
    "{swap_type} are designated as {hedge_type} hedges to secure rates for future fixed-rate debt",
    "To manage interest rate exposure, {company} employs {swap_type} for anticipated debt issuances",
    "{company} may utilize {swap_type} as {hedge_type} hedges to lock in rates prior to debt financings",
    "{swap_type} are used to hedge against rising interest rates for planned debt issuances",
    "In preparation for fixed-rate debt, {company} designates {swap_type} as {hedge_type} hedges",
    "{company} employs {swap_type} to stabilize interest rates for forecasted bond issuances",
    "{swap_type} are implemented as {hedge_type} hedges to manage risk on future debt offerings",
    "To secure favorable rates, {company} may use {swap_type} for anticipated fixed-rate debt",
    "{company} designates {swap_type} as {hedge_type} hedges to mitigate interest rate risk on planned financings",
    "{company} manages its cash flow interest rate risk by using {swap_type}, where at quarterly intervals the difference between fixed contract rates and floating rate interest amounts calculated by reference to the agreed notional principal amounts are exchanged",
    "{company} utilizes {swap_type} to manage cash flow interest rate exposure, with quarterly settlements based on the differential between fixed and floating rates on notional amounts",
    "Cash flow interest rate risk is managed through {swap_type} with quarterly net settlements calculated on agreed notional principal amounts",
    "{company} employs {swap_type} converting floating rate exposure to fixed rates, with quarterly exchange of payment differentials based on notional values",
]

collar_strategy_templates = [
    "{company} entered into {swap_type} as part of a collar strategy to limit exposure to foreign currency fluctuations within a defined range",
    "Collar strategies utilizing {swap_type} were implemented to provide downside protection while capping upside exposure to currency movements",
    "{company} established collar positions through {swap_type} to manage foreign exchange risk on forecasted transactions",
    "As part of its risk management program, {company} uses collar strategies combining {swap_type} to hedge currency exposure",
    "In {month} {year}, {company} implemented {swap_type} within a collar strategy to limit foreign currency risk",
    "{company} utilized {swap_type} in a collar structure to manage exposure to currency fluctuations",
    "Collar strategies with {swap_type} were employed to hedge foreign exchange risk on international transactions",
    "{company} entered into {swap_type} as part of a collar to cap currency exposure while retaining some upside potential",
    "in the {quarter} quarter of {year}, {swap_type} were used in a collar strategy to mitigate foreign currency volatility",
    "{company} implemented collar positions with {swap_type} to stabilize foreign exchange impacts",
    "{swap_type} were utilized in a collar strategy to limit currency risk on forecasted revenue",
    "{company} established {swap_type} within a collar framework to manage foreign exchange exposure",
    "Collar strategies involving {swap_type} were used to hedge currency fluctuations in {year}",
    "{company} employed {swap_type} in a collar structure to protect against adverse currency movements",
    "In {month} {year}, {swap_type} were implemented as part of a collar to manage currency risk",
    "{swap_type} within a collar strategy were used to limit exposure to foreign exchange volatility",
    "{company} utilized collar positions with {swap_type} to hedge currency risk on international contracts",
    "in the {quarter} quarter of {year}, {company} entered into {swap_type} as part of a collar to manage forex exposure",
    "Collar strategies with {swap_type} were implemented to stabilize currency impacts on forecasted transactions",
    "{company} used {swap_type} in a collar framework to cap foreign exchange risk while retaining flexibility",
]

context_templates = [
    "Our international operations are subject to government-imposed constraints, including laws on pricing, reimbursement, and access to our products",
    "{company}'s global operations expose it to various market risks, including fluctuations in foreign currency exchange rates and interest rates",
    "As a multinational corporation, {company} face exposure to changes in foreign currency values that can affect our financial position and operating results",
    "Our business operations in multiple countries result in exposure to foreign currency exchange rate movements and interest rate volatility",
    "{company} operates in numerous international markets, which subjects us to risks from changes in currency exchange rates and interest rates",
    "Our global presence exposes {company} to foreign exchange rate volatility and regulatory risks across multiple jurisdictions",
    "Operating internationally, {company} face risks from currency exchange rate fluctuations and changes in local economic conditions",
    "{company}’s multinational operations are impacted by foreign currency movements and interest rate changes in various markets",
    "Our business is subject to risks from foreign currency fluctuations due to operations in diverse international markets",
    "As a global entity, {company} faces exposure to exchange rate volatility and interest rate risks in its operations",
    "{company}’s international activities result in exposure to currency exchange risks and government regulations",
    "Our operations across multiple countries expose us to foreign exchange rate changes and interest rate variability",
    "{company}’s global footprint subjects it to currency exchange risks and market-specific regulatory challenges",
    "Operating in various jurisdictions, {company} are exposed to fluctuations in foreign currencies and interest rate movements",
    "{company}’s international operations face risks from currency exchange rate volatility and local market conditions",
    "Our global business model results in exposure to foreign exchange rate changes and interest rate fluctuations",
    "As a multinational company, {company} are subject to risks from currency movements and interest rate volatility across regions",
    "{company}’s operations in international markets expose it to foreign currency risks and regulatory constraints",
    "Our global operations are impacted by changes in foreign exchange rates and varying interest rate environments",
    "{company} faces currency exchange and interest rate risks due to its operations in multiple international markets",
    "Foreign currency transaction exposures arising on external and internal trade flows are selectively hedged",
]

impact_templates = [
    "Depending on the direction of change relative to {major_currency}, foreign currency values can {verb} the reported dollar value of our net assets and results of operations",
    "Fluctuations in exchange rates {verb} our reported revenues, expenses, assets, and liabilities when translated into {major_currency}",
    "Changes in foreign currency exchange rates relative to {major_currency} {verb} both our financial position and operating performance",
    "Currency movements {verb} the dollar value of our international cash flows and balance sheet items denominated in foreign currencies",
    "Foreign exchange rate fluctuations {verb} the reported value of our international assets and liabilities in {major_currency}",
    "Changes in currency exchange rates {verb} the financial results and net asset values reported in {major_currency}",
    "Movements in foreign currency values {verb} our consolidated financial statements when translated into {major_currency}",
    "Exchange rate volatility {verb} the reported dollar value of our international revenues and expenses",
    "Foreign currency fluctuations {verb} the translated value of our assets, liabilities, and operating results",
    "Changes in exchange rates relative to {major_currency} {verb} our financial position and reported earnings",
    "Currency exchange rate movements {verb} the dollar value of our international operations and balance sheet",
    "Fluctuations in foreign currencies {verb} our reported financial performance and net asset values",
    "Exchange rate changes {verb} {major_currency} value of our international cash flows and financial position",
    "Foreign currency movements {verb} the reported value of our global revenues and balance sheet items",
    "Changes in foreign exchange rates {verb} the dollar-denominated value of our international operations",
    "Currency fluctuations {verb} our consolidated financial results and net asset positions",
    "Movements in exchange rates {verb} the reported value of our international assets and operating results",
    "Foreign currency changes {verb} {major_currency} value of our global financial statements",
    "Exchange rate volatility {verb} the translated financial results of our international subsidiaries",
    "Changes in currency values {verb} the reported dollar value of our global operations and financial position",
]

impact_verbs = [
    "increase or decrease",
    "affect",
    "impact",
    "influence",
    "alter",
    "modify",
    "change",
    "adjust",
    "impact positively or negatively",
    "shift",
]

mitigation_templates = [
    "While {company} cannot predict with certainty future changes in foreign exchange rates or the effect they will have, {company} {verb} to mitigate their impact through operational means and by using foreign currency derivative instruments",
    "{company} {verb} to manage these exposures through a combination of operational strategies and derivative financial instruments",
    "{company} selectively hedges foreign exchange exposures resulting from cross-border trade flows and intercompany transactions",
    "Transaction exposures from external trade and internal group transactions are managed through selective hedging programs",
    "{company} hedges foreign currency transaction risk arising from both third-party and intercompany commercial activities",
    "{company} {verb} to reduce the impact of currency and interest rate movements through natural hedging strategies and the use of derivative contracts",
    "To mitigate these risks, {company} {verb} various hedging strategies including the use of derivative instruments",
    "{company} {verb} to minimize exposure to adverse movements in exchange rates and interest rates through both operational measures and financial derivatives",
    "{company} {verb} to limit currency and interest rate risks through operational adjustments and derivative contracts",
    "{company} {verb} to offset the impact of foreign exchange volatility using derivatives and operational hedging strategies",
    "To manage currency and interest rate risks, {company} {verb} a combination of financial instruments and operational tactics",
    "{company} {verb} to reduce exposure to exchange rate fluctuations through derivative instruments and natural hedges",
    "{company} {verb} to protect against adverse currency and interest rate movements with derivatives and strategic operations",
    "{company} {verb} to mitigate foreign exchange risk through the use of derivative contracts and operational strategies",
    "{company} {verb} to manage currency volatility by employing derivative instruments and operational risk management",
    "To address exchange rate and interest rate risks, {company} {verb} hedging strategies and financial derivatives",
    "{company} {verb} to minimize the impact of currency fluctuations through derivatives and operational measures",
    "{company} {verb} to limit the effects of foreign exchange and interest rate volatility using derivative instruments",
    "{company} {verb} to stabilize financial results by using derivatives and operational hedging techniques",
    "{company} {verb} to reduce currency and interest rate exposure through strategic operations and derivative contracts",
    "To mitigate market risks, {company} {verb} a combination of derivatives and operational risk management",
    "{company} {verb} to manage foreign currency and interest rate risks through hedging and operational strategies",
    "{company} {verb} to offset currency and interest rate volatility with derivative instruments and operational adjustments",
    "{company}'s objective is to minimise the exposure of overseas operating subsidiaries to transaction risk by matching local currency income with local currency costs where possible",
    "{company}'s objective is to minimize transaction risk exposure by aligning local currency revenues with local currency expenses in its foreign operations",
    "{company} {verb} to reduce foreign currency transaction exposure by matching currency inflows and outflows at the subsidiary level",
    "To mitigate transaction risk, {company} {verb} natural hedging strategies by matching local currency revenues with local currency costs",
    "{company}'s internal trading transactions are matched centrally and inter-company payment terms are managed to reduce foreign currency risk",
    "Intercompany transactions are centrally netted and payment terms are optimized to minimize foreign exchange exposure",
    "{company} operates a central matching system for internal trade flows to reduce gross foreign currency exposures",
    "{company} centrally manages intercompany trading positions and payment schedules to mitigate currency risk",
    "Where possible, {company} manages the cash surpluses or borrowing requirements of subsidiary companies centrally using {swap_type} to hedge future repayments back into the originating currency",
    "{company} centrally manages subsidiary liquidity and uses {swap_type} to hedge foreign exchange exposure on intercompany funding arrangements",
    "Subsidiary cash positions are managed centrally with {swap_type} hedging the repatriation of funds to originating currencies",
    "{company} employs {swap_type} to hedge foreign currency risk on centrally managed subsidiary funding and cash movements",
    "Borrowings can be swapped into other currencies as required",
    "{company} may use currency swaps to adjust the currency profile of its debt portfolio as needed",
    "{company} employs cross-currency swaps to modify the currency composition of borrowings based on operational needs",
    "Currency swaps are utilized to convert borrowings into {major_currency} when strategically beneficial",
    "{swap_type} not designated as hedges, failing to be hedges or failing to continue as effective hedges are included in operations as {swap_type} gains or losses",
    "Discounts or premiums on {swap_type} designated and effective as hedges are amortized or accreted to expense using the straight-line method over the term of the related contract",
    "Discounts or premiums on {swap_type} not designated or effective as hedges are included in the mark to market adjustment and recognized in income as {swap_type} gains or losses",
]

mitigation_verbs = [
    "attempt",
    "seek",
    "endeavor",
    "strive",
    "work",
    "aim",
    "pursue",
    "undertake",
    "engage",
    "commit",
    "implement",
]

accounting_policy_templates = [
    "Changes in the fair value of derivative instruments are recorded each period in current earnings or other comprehensive income (loss), depending on whether a derivative instrument is designated as part of a hedging transaction and, if it is, the type of hedging transaction",
    "Derivative instruments are measured at fair value with gains and losses recorded in earnings or accumulated other comprehensive income based on hedge designation",
    "{company} accounts for derivatives at fair value, with changes in fair value recognized in either net income or other comprehensive income depending on the nature of the hedging relationship",
    "Fair value changes in derivatives are reflected in the financial statements through either the income statement or other comprehensive income, based on whether hedge accounting is applied",
    "{company} records derivative instruments at fair value, with changes recognized in earnings or OCI depending on hedge designation",
    "Changes in derivative fair values are recorded in net income or accumulated OCI, based on the type of hedge and its designation",
    "Derivatives are accounted for at fair value, with gains or losses recorded in earnings or other comprehensive income per hedge accounting rules",
    "{company} recognizes fair value changes of derivatives in either current earnings or OCI, depending on the hedging relationship",
    "Derivative instruments are measured at fair value, with changes reflected in net income or accumulated OCI based on hedge designation",
    "Fair value adjustments for derivatives are recorded in earnings or OCI, depending on whether the instrument qualifies for hedge accounting",
    "{company} accounts for derivatives at fair value, recognizing changes in either the income statement or other comprehensive income",
    "Changes in the fair value of derivatives are recorded in earnings or OCI, based on the nature of the hedging relationship",
    "Derivatives are valued at fair value, with gains and losses recognized in net income or OCI depending on hedge accounting treatment",
    "{company} records fair value changes in derivatives in either earnings or accumulated OCI, based on hedge designation",
    "Derivative fair value changes are recognized in the income statement or OCI, depending on the type of hedging relationship",
    "{company} accounts for derivatives at fair value, with changes recorded in earnings or OCI per applicable accounting standards",
    "Fair value changes in derivative instruments are reflected in net income or OCI, based on their hedge designation",
    "Derivatives are measured at fair value, with changes recorded in earnings or other comprehensive income depending on hedge accounting",
    "{company} recognizes derivative fair value changes in either net income or OCI, based on the hedging relationship",
    "Changes in derivative fair values are recorded in current earnings or OCI, depending on the hedge type and accounting treatment",
    "All derivative instruments, other than those that satisfy specific exceptions, are recorded at fair value. {company} record changes in the fair value of our derivative positions based on the value for which the derivative instrument could be exchanged between willing parties"
    "If market quotes are not available to estimate fair value, management’s best estimate of fair value is based on the quoted market price of derivatives with similar characteristics or determined through industry-standard valuation techniques",
    "{company} value our {swap_type} using observable inputs including interest rate curves, risk adjusted discount rates, credit spreads and other relevant data",
    "Gains and losses on derivative instruments are recognized currently in earnings",
    "The ultimate fair value of our derivative instruments is uncertain, and {company} believe that it is reasonably possible that a change in the estimated fair value could occur in the near future",
    "The accounting for the changes in the fair value of the derivative depends on the intended use of the derivative and the resulting designation",
    "For a derivative that does not qualify as a {hedge_type} hedge, the change in {hedge_type} is recognized currently in net income",
]

documentation_templates = [
    "For a derivative to qualify as a hedge at inception and throughout the hedged period, {company} formally document the nature and relationships between the hedging instruments and hedged item",
    "For a derivative designated as a {hedge_type} hedge, the gain or loss is recognized in earnings in the period of change together with the offsetting loss or gain on the risk being hedged",
    "{company} maintains formal documentation of all hedging relationships, including the risk management objective and strategy for undertaking the hedge",
    "Hedge accounting requires formal documentation at inception describing the hedging relationship and {company}'s risk management objectives",
    "{company} document our hedging relationships and risk management strategies at inception in accordance with applicable accounting standards",
    "{company} prepares formal documentation for all hedges, detailing the hedging instrument, hedged item, and risk management strategy",
    "At hedge inception, {company} document the relationship between the derivative and the hedged item, including the risk management objective",
    "{company} maintains detailed documentation of hedging relationships to comply with hedge accounting requirements",
    "{company} formally document all hedging relationships at inception, including the strategy and objectives for risk management",
    "Hedge documentation includes the risk management objective, hedging instrument, and hedged item, prepared at inception",
    "{company} records formal documentation for hedges, outlining the relationship and risk management strategy",
    "{company} document the hedging relationship and risk management objectives at the start of each hedge in line with accounting standards",
    "{company} maintains documentation for all derivative hedges, including the hedged item and risk management strategy",
    "Formal documentation of hedging relationships is prepared at inception to support hedge accounting treatment",
    "{company} document the nature of hedging relationships and risk management objectives at the outset of each hedge",
    "{company} ensures formal documentation of all hedges, including the hedged item and risk management strategy",
    "Hedge accounting documentation includes the hedging instrument, hedged item, and risk management objectives at inception",
    "{company} prepare formal documentation for all hedging relationships to meet accounting standard requirements",
    "{company} documents the risk management strategy and hedging relationships at the start of each hedge",
    "Formal hedge documentation is maintained, detailing the hedged item, hedging instrument, and risk management objectives",
    "{company} document all hedging relationships at inception, including the risk management strategy and hedge objectives",
]

effectiveness_templates = [
    "{company} assess, both at inception and on an on-going basis, whether the derivative instruments that are used in {hedge_type} hedging transactions are highly effective in offsetting the {metric} of hedged items",
    "{company} evaluates hedge effectiveness {frequency} to ensure derivatives continue to meet the criteria for hedge accounting",
    "Hedge effectiveness is {verb} {frequency} using {method} in accordance with {standard}",
    "{company} perform {frequency} assessments of hedge effectiveness to determine whether hedging relationships remain highly effective",
    "{company} {verb} hedge effectiveness {frequency} in accordance with {standard}",
    "Hedge effectiveness is evaluated {frequency} to confirm that {swap_type} remain highly effective in offsetting {metric}",
    "{company} assess hedge effectiveness {frequency} using {method} to ensure compliance with {standard}",
    "{company} performs {frequency} tests of hedge effectiveness for {swap_type} to offset changes in {metric}",
    "Hedge effectiveness is {verb} {frequency} to verify that derivatives qualify for hedge accounting under {standard}",
    "{company} evaluate {swap_type} effectiveness {frequency} to ensure they offset {metric} as intended",
    "{company} {verb} effectiveness of {swap_type} {frequency} using {method} per {standard}",
    "Hedge effectiveness for {swap_type} is assessed {frequency} to confirm alignment with {metric}",
    "{company} perform {frequency} hedge effectiveness tests using {method} to comply with {standard}",
    "{company} evaluates {swap_type} {frequency} to ensure they effectively hedge {metric}",
    "Hedge effectiveness is {verb} {frequency} for {swap_type} to meet {standard} requirements",
    "{company} assess the effectiveness of {swap_type} {frequency} to offset changes in {metric} per {standard}",
    "{company} conducts {frequency} assessments of {swap_type} effectiveness using {method}",
    "Hedge effectiveness is evaluated {frequency} to ensure {swap_type} offset {metric} as required",
    "{company} {verb} hedge effectiveness {frequency} for {swap_type} in accordance with {standard}",
    "{company} assesses {swap_type} effectiveness {frequency} to confirm compliance with {standard}",
]

hedge_types = [
    "cash flow",
    "fair value",
    "net investment",
]
metrics = ["changes in cash flows", "changes in fair value", "variability", "exposure"]
frequencies = [
    "quarterly",
    "on a regular basis",
    "at least quarterly",
    "monthly",
    "periodically",
]
assessment_verbs = ["assessed", "evaluated", "tested", "measured", "analyzed"]
methods = [
    "regression analysis and dollar-offset methods",
    "quantitative analysis",
    "statistical methods",
    "the dollar-offset method",
    "prospective and retrospective testing",
]
standards = [
    "ASC 815",
    "applicable accounting guidance",
    "U.S. GAAP",
    "accounting standards",
]

ineffectiveness_templates = [
    "{company} assess hedge ineffectiveness {frequency} and record the gain or loss related to the ineffective portion of derivative instruments, if any, to current earnings",
    "Any hedge ineffectiveness is recognized immediately in earnings in the period identified",
    "Ineffectiveness, if present, is measured {frequency} and recorded in the consolidated statements of operations",
    "{company} recognizes any ineffective portion of hedging instruments in current period earnings",
]

discontinuation_templates = [
    "If {company} determine that a forecasted transaction is no longer probable of occurring, {company} discontinue hedge accounting and any related unrealized gain or loss on the derivative instrument is recognized in current earnings",
    "Hedge accounting is discontinued if the hedged forecasted transaction is no longer expected to occur, with accumulated gains or losses reclassified to earnings",
    "When a hedged forecasted transaction becomes improbable, {company} dedesignates the hedging relationship and recognizes deferred gains or losses immediately",
    "If a forecasted transaction fails to occur, amounts previously deferred in other comprehensive income are reclassified to current period earnings",
]

currency_templates = [
    "The currency hedged items are usually denominated in the following main currencies: {currencies}",
    "{company}'s primary currency exposures include {currencies}",
    "Foreign currency risk primarily relates to exposures in {currencies}",
    "Our most significant currency exposures are to {currencies}",
    "{company} faces foreign exchange risk primarily from {currencies}",
    "In order to reduce foreign currency translation exposure from {currencies}, {company} seeks to denominate borrowings in the currencies of our principal assets and cash flows. These are primarily denominated in {currencies}",
    "To minimize translation exposure, {company} aligns the currency composition of its debt with the currencies of its operating assets, primarily {currencies}",
    "{company} reduces foreign currency translation risk by borrowing in the same currencies as its principal assets and cash flows, which are mainly {currencies}",
    "{company} matches debt currency denomination to the currencies of its key operating assets to mitigate translation exposure, focusing on {currencies}",
]

alternative_management_templates = [
    "Depending on market conditions, foreign currency risk is also managed through the use of foreign currency debt",
    "{company} may use foreign currency-denominated debt as a natural hedge against foreign currency exposure",
    "In certain circumstances, {company} utilize foreign currency borrowings to offset translation exposure",
    "Foreign currency debt may be used strategically to create natural hedging relationships",
]

net_investment_templates = [
    '{company} may choose to hedge against possible fluctuations in foreign subsidiaries net assets ("{hedge_type} hedge") and {verb} {swap_type} and forward contracts in the past in order to hedge such an exposure',
    "From time to time, {company} {verb} {swap_type} to hedge {hedge_type} in foreign operations",
    "{hedge_type} hedges {verb} to protect the value of {company}'s investments in foreign subsidiaries from adverse currency movements",
    "{company} {verb} derivative instruments designated as {hedge_type} hedges to mitigate currency translation risk on foreign operations",
]

net_investment_verbs = [
    "entered into",
    "executed",
    "utilized",
    "employed",
    "has used",
    "may enter into",
    "may utilize",
    "may employ",
]

counterparty_templates = [
    "Most of the counterparties to the derivatives are major banks and {company} is monitoring the associated inherent credit risks",
    "{company} enters into derivative contracts with major financial institutions and monitors counterparty credit risk on an ongoing basis",
    "Derivative counterparties are limited to major banking institutions with strong credit ratings to minimize counterparty risk",
    "Credit risk from derivatives is mitigated by transacting only with highly-rated financial institution counterparties",
    "{company} manages counterparty credit exposure by diversifying its derivative contracts among multiple major banks",
]

no_trading_templates = [
    "{company} does not enter into derivative transactions for trading purposes",
    "{company}'s policy prohibits the use of derivatives for speculative or trading purposes",
    "Derivatives are used solely for hedging and risk management, not for speculative trading",
    "{company} does not engage in derivative transactions for speculative purposes",
    "All derivative transactions are entered into for hedging purposes and not for trading or speculation",
]
fair_value_position_templates = [
    'As of {month} {end_day}, {year}, the fair value of the swaps was a {position_type} of {currency_code}{amount} {money_unit}, the opposite entry for {currency_code}{oci_amount} {money_unit} of which was {oci_action} to "Other comprehensive income" under the cost of hedging accounting treatment',
    'As of {month} {end_day}, {year}, the fair value of these {swap_type} represented a {position_type} of {currency_code}{amount} {money_unit}; the opposite entry was recognized in "Other comprehensive income", with the impact on financial income and expense being immaterial',
    "The fair value of {swap_type} as of {month} {end_day}, {year} was a {position_type} of {currency_code}{amount} {money_unit}, with {currency_code}{oci_amount} {money_unit} {oci_action} to other comprehensive income",
    "As of year-end {year}, outstanding {swap_type} had a fair value {position_type} of {currency_code}{amount} {money_unit}, the offsetting entry being recorded in accumulated other comprehensive income",
]

# Specific hedge designation templates with currency pairs
specific_hedge_templates = [
    "Includes forward purchases with a notional amount of {notional_currency} {notional_amount} {money_unit} expiring in {expiry_year}, designated as a fair value hedge of the exposure of an equivalent amount of {hedged_item} to fluctuations in the {currency_pair} spot rate",
    "{company} designated {swap_type} with a notional value of {notional_currency} {notional_amount} {money_unit} expiring in {expiry_year} as fair value hedges against exposure to {currency_pair} exchange rate movements on {hedged_item}",
    "Forward contracts totaling {notional_currency} {notional_amount} {money_unit} and expiring in {expiry_year} were designated as hedges of {notional_currency} {notional_amount} {money_unit} of {hedged_item} against {currency_pair} fluctuations",
    "{swap_type} with notional amounts of {notional_currency} {notional_amount} {money_unit} maturing in {expiry_year} hedge the {currency_pair} exposure on {hedged_item}",
]

# Cash pooling and debt management templates
cash_pooling_templates = [
    "{company} also operates cash pooling arrangements to manage the surplus cash and short-term liquidity needs of foreign subsidiaries located outside {major_currency} zone",
    "{company} operates cash pooling arrangements to optimize liquidity management across foreign subsidiaries and reduce external borrowing costs",
    "Cash pooling structures are utilized to centralize cash management and provide efficient funding to international operations",
    "{company} maintains centralized cash pooling facilities to manage working capital needs of subsidiaries in various currencies",
]

debt_optimization_templates = [
    "To optimize the cost of debt or reduce the volatility of debt and manage its exposure to financial foreign exchange risk, {company} uses derivative instruments ({instrument_list}) that alter the fixed/floating rate split and the currency split of its net debt",
    "{company} utilizes {instrument_list} to modify the interest rate and currency composition of its debt portfolio, thereby optimizing borrowing costs and managing foreign exchange exposure",
    "{company} employs derivative instruments including {instrument_list} to adjust the effective interest rate profile and currency mix of outstanding borrowings",
    "To manage the cost and risk profile of its debt, {company} uses {instrument_list} to transform the characteristics of its borrowings",
]

# Position types and OCI actions
position_types = ["asset", "liability"]
oci_actions = ["credited", "debited"]

# Hedged items
hedged_items = [
    "intragroup current accounts",
    "bond issues",
    "outstanding debt",
    "intercompany loans",
    "senior notes",
    "commercial paper",
]

# Derivative instrument lists for debt management
instrument_lists = [
    "interest rate swaps, currency swaps, foreign exchange swaps and forward contracts",
    "cross-currency swaps and interest rate swaps",
    "foreign exchange forwards and interest rate derivatives",
    "currency derivatives and interest rate hedges",
]
```

# Random Noise
```{python}
# ============ LITIGATION AND LEGAL MATTERS ============

litigation_templates = [
    "{company} is involved in various legal proceedings and claims arising in the ordinary course of business, including {case_types}",
    "As of {month} {end_day}, {year}, {company} is a defendant in several lawsuits related to {case_types}",
    "{company} is subject to litigation and regulatory inquiries concerning {case_types} in the normal course of operations",
    "Various legal actions, proceedings, and claims are pending or may be instituted against {company}, including {case_types}",
    "As of {month} {end_day}, {year}, {company} is a defending against several derivative lawsuits related to {case_types}",
    'All securities holders of {company} are hereby notified that a settlement (the "Settlement") has been reached as to claims asserted in the above-captioned consolidated shareholder derivative action pending in a {court} (the "Derivative Action") on behalf of {company} against certain of its current or former directors and officers',
    'On {month} {end_day}, {year}, a shareholder derivative suit was filed in the {court} for the against {company}',
]

case_types = [
    "product liability, employment matters, and commercial disputes",
    "intellectual property infringement, contract disputes, and employment claims",
    "environmental matters, product warranty claims, and regulatory compliance",
    "patent litigation, customer disputes, and employment-related matters",
    "breach of contract claims, employment discrimination, and tax disputes",
]

litigation_assessment_templates = [
    "Management believes that the ultimate resolution of these matters will not have a material adverse effect on {company}'s financial position, results of operations, or cash flows",
    "While the outcome of these proceedings cannot be predicted with certainty, management does not believe they will materially impact the consolidated financial statements",
    "{company} believes it has meritorious defenses and intends to vigorously defend against these claims",
    "{company} intend to vigorously defend against these claims. At this time, {company} cannot predict the outcome, or provide a reasonable estimate or range of estimates of the possible outcome or loss, if any, in this matter"
    "Based on currently available information, management does not expect these matters to result in a material loss",
    "{company} has assessed the likelihood of loss as remote and has not recorded any provisions related to these contingencies",
]

specific_lawsuit_templates = [
    "In {month} {year}, a lawsuit was filed against {company} in the {court} alleging {allegation}. {company} filed a motion to dismiss in {month} {dismiss_year}",
    "{company} is defending a class action lawsuit filed in {year} claiming {allegation}, with damages sought of approximately {currency_code}{amount} {money_unit}",
    "During {year}, {company} reached a settlement in a lawsuit related to {allegation} for {currency_code}{amount} {money_unit}, which was accrued in prior periods",
    "A complaint was filed against {company} in the {court} during {quarter} quarter {year} alleging {allegation}",
]

courts = [
    "United States District Court for the District of Delaware",
    "Superior Court of California",
    "United States District Court for the Southern District of New York",
    "Court of Chancery of the State of Delaware",
    "United States District Court for the Northern District of California",
    "Federal Court of Conneticut"
]

allegations = [
    "breach of contract and misappropriation of trade secrets",
    "violations of federal securities laws",
    "employment discrimination and wrongful termination",
    "patent infringement related to product technology",
    "breach of fiduciary duty and corporate waste",
    "antitrust violations and unfair competition",
    "failure to adequately warn of product risks",
]

# ============ EQUITY WARRANTS (NON-DERIVATIVE) ============

equity_warrant_templates = [
    "{company} has {shares} equity-classified warrants outstanding with an exercise price of {currency_code}{price} per share, exercisable until {expiry_year}",
    "Outstanding equity warrants for {shares} shares at {currency_code}{price} per share are classified in stockholders' equity and are not remeasured",
    "As of {month} {end_day}, {year}, there were {shares} warrants outstanding classified as equity instruments",
    "{company} issued {shares} warrants to purchase common stock at {currency_code}{price} per share, which are indexed to {company}'s own stock and classified in equity",
    "In {month} {year}, {shares} warrants issued to investors in connection with a {event} in {prev_month} {prev_year} were reset to {currency_code}{price}",
    "In connection with the {event}, {company} issued warrants to purchase up to {shares} shares of common stock at an exercise price of {currency_code}{price} per share",
    "During {month} {year}, {company} issued {shares} warrants exercisable at {currency_code}{price} per share in conjunction with {event}",
    "As part of {event}, {company} granted warrants for {shares} shares with a strike price of {currency_code}{price}, expiring in {expiry_year}",
    "{company} issued {shares} common stock warrants at an exercise price of {currency_code}{price} per share as consideration for {event}",
    "In {month} {year}, warrants to acquire {shares} shares at {currency_code}{price} per share were issued in connection with {event}",
    'In connection with the {event}, {company} issued warrants to purchase up to {shares} shares of common stock at an exercise price of {currency_code}{price} per share, provision states the warrants meet the criteria for equity treatment',
    "{company} issued {shares} shares of common stock valued at {currency_code}{value} in connection with {event} during {year}",
    "During {year}, {company} issued {shares} shares of common stock (valued at {currency_code}{value}) as part of {event}",
]


equity_warrant_activity_templates = [
    "During {year}, warrant holders exercised {shares} warrants, resulting in proceeds of {currency_code}{amount} {money_unit}",
    "In {month} {year}, {shares} equity warrants expired unexercised, with no impact on earnings",
    "{company} received {currency_code}{amount} {money_unit} from the exercise of {shares} warrants during {year}",
    "{shares} warrants were exercised on a cashless basis during {year}, resulting in the issuance of {net_shares} net shares",
    "During {year}, warrants to purchase {shares} shares were exercised on a cashless basis, resulting in the issuance of {net_shares} net shares",
    "In the {quarter} quarter of {year}, {company} modified the terms of outstanding warrants, extending the expiration date to {expiry_year} and adjusting the exercise price to {currency_code}{price}",
    "Warrants representing {shares} shares expired unexercised during {year}",
    "{company} repurchased and cancelled warrants for {shares} shares during {month} {year} for cash consideration of {currency_code}{amount} {money_unit}",
    "In {month} {year}, warrant holders exercised their rights to acquire {shares} shares, resulting in gross proceeds of {currency_code}{amount} {money_unit}",
    "The additional cost of the warrants of {currency_code}{amount} was recorded as a debit and a credit to additional paid in capital",
    "Any issuance of common stock by {company} may result in a reduction in the book value per share" 
    "The reduction on market price per share of {company}'s outstanding shares of common stock will reduce the proportionate ownership and voting power of such shares",
    "In addition, {company} has reserved {shares} shares of the common stock for issuance upon the exercise of outstanding warrants"
]
# Warrant events/reasons
warrant_events = [
    "a debt financing transaction",
    "the series B preferred stock offering",
    "a credit facility agreement",
    "consulting services agreements",
    "a strategic partnership agreement",
    "the convertible note issuance",
    "a private placement",
    "the acquisition financing",
    "vendor financing arrangements",
    "financing",
]

# ============ REVENUE RECOGNITION ============

revenue_recognition_templates = [
    "{company} recognizes revenue when control of promised goods or services is transferred to customers in an amount that reflects the consideration expected to be received",
    "Revenue from product sales is recognized at a point in time when the customer obtains control, typically upon shipment or delivery",
    "{company} applies the five-step model under ASC 606 to determine when and how revenue is recognized",
    "Performance obligations are satisfied over time for service contracts and at a point in time for product sales",
]

deferred_revenue_templates = [
    "Deferred revenue as of {month} {end_day}, {year} was {currency_code}{amount} {money_unit}, compared to {currency_code}{prev_amount} {money_unit} in the prior year",
    "{company} recorded deferred revenue of {currency_code}{amount} {money_unit} related to advance payments from customers for future deliverables",
    "Contract liabilities increased to {currency_code}{amount} {money_unit} at year-end {year} due to timing of customer payments and performance obligations",
    "As of {month} {end_day}, {year}, {company} had {currency_code}{amount} {money_unit} in deferred revenue related to service and maintenance contracts",
]

# ============ INVENTORY ============

inventory_templates = [
    "Inventories are stated at the lower of cost or net realizable value, with cost determined using the {method} method",
    "{company} values inventory using the {method} cost method and regularly reviews for obsolescence",
    "Inventory consists of raw materials, work in process, and finished goods, valued at the lower of cost (determined by {method}) or net realizable value",
    "As of {month} {end_day}, {year}, inventory totaled {currency_code}{amount} {money_unit}, net of obsolescence reserves of {currency_code}{reserve} {money_unit}",
]

inventory_methods = [
    "first-in, first-out (FIFO)",
    "weighted-average cost",
    "last-in, first-out (LIFO)",
    "straight-line method",
    "specific identification",
]

inventory_writedown_templates = [
    "During {year}, {company} recorded inventory write-downs of {currency_code}{amount} {money_unit} due to obsolescence and excess quantities",
    "Inventory reserves increased by {currency_code}{amount} {money_unit} in {year} to reflect lower of cost or market adjustments",
    "{company} recognized {currency_code}{amount} {money_unit} in charges related to slow-moving and obsolete inventory during {year}",
    "Inventory obsolescence charges totaled {currency_code}{amount} {money_unit} for the year ended {month} {end_day}, {year}",
]

# ============ PROPERTY, PLANT & EQUIPMENT ============

ppe_templates = [
    "Property, plant and equipment are stated at cost less accumulated depreciation, which is computed using the straight-line method over estimated useful lives",
    "Depreciation expense was {currency_code}{amount} {money_unit} for the year ended {month} {end_day}, {year}",
    "{company} capitalizes costs related to construction in progress and commences depreciation when assets are placed in service",
    "As of {month} {end_day}, {year}, property, plant and equipment, net totaled {currency_code}{amount} {money_unit}",
]

capex_templates = [
    "Capital expenditures during {year} were {currency_code}{amount} {money_unit}, primarily related to {purpose}",
    "{company} invested {currency_code}{amount} {money_unit} in {purpose} during {year}",
    "Cash outlays for property, plant and equipment totaled {currency_code}{amount} {money_unit} in {year}, focused on {purpose}",
    "Capital investments of {currency_code}{amount} {money_unit} were made during {year} to support {purpose}",
]

capex_purposes = [
    "manufacturing capacity expansion",
    "information technology infrastructure",
    "facility improvements and equipment upgrades",
    "research and development laboratories",
    "distribution center automation",
]

impairment_templates = [
    "{company} recorded an impairment charge of {currency_code}{amount} {money_unit} during {year} related to {asset_type}",
    "An impairment loss of {currency_code}{amount} {money_unit} was recognized in {year} for {asset_type} due to changes in market conditions",
    "During {quarter} quarter {year}, {company} identified indicators of impairment and recorded a {currency_code}{amount} {money_unit} charge for {asset_type}",
    "{company} recognized {currency_code}{amount} {money_unit} in impairment charges related to {asset_type} during {year}",
]

asset_types = [
    "long-lived assets in underperforming facilities",
    "certain manufacturing equipment",
    "goodwill related to a reporting unit",
    "intangible assets with finite lives",
    "property held for sale",
    "oil and gas properties",
    "construction in progress",
    "software development costs",
    "property and equipment",
    "qualifying assets",
]

# ============ LEASES ============

lease_templates = [
    "{company} leases office space, manufacturing facilities, and equipment under operating and finance leases with terms ranging from {min_term} to {max_term} years",
    "As of {month} {end_day}, {year}, {company} had operating lease right-of-use assets of {currency_code}{amount} {money_unit} and lease liabilities of {currency_code}{liability} {money_unit}",
    "{company} adopted ASC 842 effective January 1, {adoption_year}, recognizing right-of-use assets and lease liabilities for operating leases",
    "Total lease expense for {year} was {currency_code}{amount} {money_unit}, including both operating and finance lease costs",
]

lease_commitment_templates = [
    "Future minimum lease payments under non-cancellable operating leases total {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}",
    "The weighted-average remaining lease term for operating leases is {years} years as of {month} {end_day}, {year}",
    "The weighted-average discount rate used to measure lease liabilities was {rate}% as of {month} {end_day}, {year}",
    "Operating lease payments are expected to total {currency_code}{amount} {money_unit} over the next five years",
]

# ============ GOODWILL AND INTANGIBLES ============

goodwill_templates = [
    "Goodwill totaled {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}, and is not amortized but tested for impairment annually",
    "{company} performs its annual goodwill impairment test in the {quarter} quarter of each year",
    "No goodwill impairment was recorded during {year} as the fair value of reporting units exceeded their carrying values",
    "Goodwill is allocated to reporting units and evaluated for impairment at least annually or when indicators of impairment exist",
]

intangible_templates = [
    "Intangible assets consist primarily of {intangible_types} and are amortized over their estimated useful lives",
    "Amortization expense for intangible assets was {currency_code}{amount} {money_unit} for the year ended {month} {end_day}, {year}",
    "As of {month} {end_day}, {year}, intangible assets, net of accumulated amortization, totaled {currency_code}{amount} {money_unit}",
    "The weighted-average remaining useful life of intangible assets is {years} years as of {month} {end_day}, {year}",
]

intangible_types = [
    "customer relationships, developed technology, and trade names",
    "patents, trademarks, and customer lists",
    "software, customer contracts, and non-compete agreements",
    "brand names, proprietary technology, and customer relationships",
]

# ============ DEBT AND CREDIT FACILITIES ============

debt_templates = [
    "{company} maintains a {currency_code}{amount} {money_unit} revolving credit facility that expires in {year}, with {currency_code}{outstanding} {money_unit} outstanding as of {month} {end_day}, {current_year}",
    "Long-term debt as of {month} {end_day}, {year} totaled {currency_code}{amount} {money_unit}, consisting of {debt_types}",
    "During {year}, {company} issued {currency_code}{amount} {money_unit} in {debt_type} with a maturity date of {maturity_year}",
    "{company} repaid {currency_code}{amount} {money_unit} of outstanding debt during {year} using cash from operations",
]

debt_types_list = [
    "senior unsecured notes and term loans",
    "convertible senior notes and revolving credit borrowings",
    "senior secured notes and equipment financing",
    "bonds and bank term loans",
]

debt_covenant_templates = [
    "The credit agreement contains customary affirmative and negative covenants, including financial covenants related to leverage ratios and interest coverage",
    "As of {month} {end_day}, {year}, {company} was in compliance with all debt covenants",
    "The revolving credit facility requires maintenance of a maximum leverage ratio of {ratio}:1 and minimum interest coverage ratio of {coverage}:1",
    "Debt agreements contain restrictions on dividends, additional indebtedness, and asset sales, subject to certain exceptions",
]

# ============ INCOME TAXES ============

tax_templates = [
    "The provision for income taxes was {currency_code}{amount} {money_unit} for {year}, resulting in an effective tax rate of {rate}%",
    "The effective tax rate for {year} was {rate}%, compared to {prev_rate}% in the prior year",
    "Deferred tax assets as of {month} {end_day}, {year} totaled {currency_code}{amount} {money_unit}, primarily related to {sources}",
    "{company} has net operating loss carryforwards of {currency_code}{amount} {money_unit} that expire between {start_year} and {end_year}",
]

tax_sources = [
    "net operating losses, tax credit carryforwards, and accrued expenses",
    "stock-based compensation, depreciation differences, and reserves",
    "employee benefits, loss carryforwards, and capitalized research costs",
    "bad debt reserves, inventory reserves, and accrued liabilities",
]

uncertain_tax_templates = [
    "{company} has {currency_code}{amount} {money_unit} in unrecognized tax benefits as of {month} {end_day}, {year}",
    "A reconciliation of the beginning and ending amount of unrecognized tax benefits showed an increase of {currency_code}{amount} {money_unit} during {year}",
    "{company} recognizes interest and penalties related to uncertain tax positions in income tax expense",
    "It is reasonably possible that {currency_code}{amount} {money_unit} of unrecognized tax benefits could be recognized within the next twelve months",
]

# ============ STOCK-BASED COMPENSATION ============

stock_comp_templates = [
    "Stock-based compensation expense was {currency_code}{amount} {money_unit} for the year ended {month} {end_day}, {year}",
    "{company} grants stock options, restricted stock units, and performance share units to employees and directors",
    "During {year}, {company} granted {shares} stock options with a weighted-average exercise price of {currency_code}{price} per share",
    "Total unrecognized compensation cost related to unvested awards was {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}",
]

stock_comp_valuation_templates = [
    "The fair value of stock options is estimated using the  with assumptions for volatility, risk-free interest rate, and expected term",
    "{company} uses a {model} to value performance share units with market conditions",
    "Restricted stock units are valued based on the closing stock price on the grant date",
    "The weighted-average grant-date fair value of options granted during {year} was {currency_code}{amount} per share",
]

# ============ PENSION AND POSTRETIREMENT BENEFITS ============

pension_templates = [
    "{company} sponsors defined benefit pension plans covering certain employees, with plan assets of {currency_code}{assets} {money_unit} and projected benefit obligations of {currency_code}{obligations} {money_unit} as of {month} {end_day}, {year}",
    "Pension expense for {year} was {currency_code}{amount} {money_unit}, including service cost, interest cost, and expected return on plan assets",
    "The funded status of {company}'s pension plans resulted in a net liability of {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}",
    "During {year}, {company} contributed {currency_code}{amount} {money_unit} to its defined benefit pension plans",
]

opeb_templates = [
    "{company} provides postretirement medical and life insurance benefits to eligible retirees",
    "The accumulated postretirement benefit obligation was {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}",
    "Net periodic postretirement benefit cost for {year} totaled {currency_code}{amount} {money_unit}",
    "{company}'s postretirement benefit plans are unfunded, with liabilities recorded in other long-term liabilities",
]

# ============ COMMITMENTS AND CONTINGENCIES ============

purchase_commitment_templates = [
    "{company} has purchase commitments with suppliers totaling approximately {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}",
    "Outstanding purchase orders and contractual obligations for inventory and capital expenditures totaled {currency_code}{amount} {money_unit} at year-end {year}",
    "{company} is obligated under various supply agreements to purchase minimum quantities totaling {currency_code}{amount} {money_unit} over the next {years} years",
    "As of {month} {end_day}, {year}, {company} had non-cancellable purchase commitments of {currency_code}{amount} {money_unit}",
]

guarantee_templates = [
    "{company} has provided guarantees and indemnifications related to {guarantee_type} with a maximum potential exposure of {currency_code}{amount} {money_unit}",
    "Product warranty obligations totaled {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}",
    "{company} accrues warranty costs based on historical claims experience and specific identified warranty issues",
    "Warranty expense for {year} was {currency_code}{amount} {money_unit}, with payments of {currency_code}{payments} {money_unit}",
]

guarantee_types = [
    "product performance, lease obligations, and customer financing",
    "residual value guarantees and performance bonds",
    "environmental remediation and divested business obligations",
    "intellectual property indemnifications and debt guarantees",
]

# ============ RESTRUCTURING ============

restructuring_templates = [
    "During {year}, {company} initiated a restructuring plan to {purpose}, resulting in charges of {currency_code}{amount} {money_unit}",
    "Restructuring charges of {currency_code}{amount} {money_unit} were recorded in {year}, primarily related to {expense_type}",
    "{company} announced a cost reduction initiative in {month} {year} expected to generate annual savings of {currency_code}{amount} {money_unit}",
    "As of {month} {end_day}, {year}, the remaining restructuring liability was {currency_code}{amount} {money_unit}",
]

restructuring_purposes = [
    "streamline operations and reduce costs",
    "consolidate manufacturing facilities",
    "optimize the organizational structure",
    "align resources with strategic priorities",
]

restructuring_expense_types = [
    "employee severance and benefits",
    "facility closure costs and asset impairments",
    "contract termination costs and severance",
    "workforce reductions and lease terminations",
]

# ============ ACQUISITIONS (NON-DERIVATIVE ASPECTS) ============

acquisition_templates = [
    "In {month} {year}, {company} acquired {target} for total consideration of {currency_code}{amount} {money_unit} in cash",
    "{company} completed the acquisition of {target} during {year} for {currency_code}{amount} {money_unit}, which was funded through {funding}",
    "During {year}, {company} acquired {target} to expand its {purpose}",
    "The acquisition of {target} in {year} resulted in {currency_code}{goodwill} {money_unit} of goodwill and {currency_code}{intangibles} {money_unit} of identifiable intangible assets",
]

acquisition_purposes = [
    "product portfolio and market presence",
    "technology capabilities and customer base",
    "geographic reach and distribution channels",
    "manufacturing capacity and operational efficiency",
]

acquisition_funding = [
    "cash on hand and borrowings under the credit facility",
    "available cash reserves",
    "a combination of cash and debt financing",
    "existing liquidity",
]
# ============ STOCK ==========================
# Stock issuance for debt costs
stock_debt_issuance_templates = [
    "In conjunction with its {month} {year} {financing_type}, {company} issued at closing {shares1} shares of common stock (valued at {currency_code}{value1}) and upon extension of the maturity date {shares2} shares of common stock (valued at {currency_code}{value2}), which were recorded as debt issuance costs",
    "{company} issued {shares} shares of common stock valued at {currency_code}{value} in connection with {financing_type} during {year}, recorded as debt issuance costs",
    "During {year}, {company} issued {shares} shares of common stock (valued at {currency_code}{value}) as part of {financing_type}, with the value recorded as a debt issue cost",
    "In {month} {year}, {company} completed {financing_type} and issued {shares} shares of common stock valued at {currency_code}{value} as consideration, which was capitalized as debt issuance costs",
    "Upon closing of the {financing_type} in {month} {year}, {shares} shares were issued as transaction costs and recorded in additional paid-in capital",
    "{company} capitalized {shares} shares of common stock valued at {currency_code}{value} as debt issuance costs related to the {financing_type}"
]

# Registration statement and resale concerns
registration_statement_templates = [
    "Such sales also may inhibit our ability to obtain future equity related financing on acceptable terms. In {month} {year}, {company} will file a registration statement to register the shares of common stock issuable upon conversion of the convertible notes and upon exercise of the warrants to permit the resale of these shares of common stock",
    "{company} filed a registration statement on Form S-3 in {month} {year} to register {shares} shares of common stock underlying convertible securities for resale by holders",
    "In {month} {year}, {company} registered {shares} shares of common stock issuable upon conversion of notes and exercise of warrants pursuant to registration rights agreements",
    "The registration statement filed in {year} covers {shares} shares issuable upon conversion and exercise of outstanding securities, permitting resale by security holders",
    "{company} is obligated to file a registration statement within {days} days following {month} {year} covering shares issuable upon conversion of notes and warrants"
]

# Market impact of registered shares
market_impact_templates = [
    "Upon the effective date of the registration statement, the holders of the convertible notes may sell all or a portion of the shares of common stock they receive by conversion of the notes and warrants directly in the market or through one or more underwriters, broker-dealers, or agents",
    "A large number of shares of common stock would be available for resale by the note holders upon effectiveness of the registration statement, which could depress the market price of {company}'s common stock",
    "The resale of {shares} shares registered under the registration statement could adversely affect the market price of {company}'s common stock",
    "Upon effectiveness of the registration statement, holders may resell {shares} shares, potentially causing downward pressure on the stock price",
    "The registration of {shares} shares for resale by holders could result in substantial dilution and negatively impact the trading price of the common stock",
    "Sales of substantial amounts of common stock in the public market following effectiveness of the registration statement could adversely affect prevailing market prices"
]

# Warrant and option adjustment templates
warrant_adjustment_templates = [
    "The original exercisable shares of {shares} and exercise price of {currency_code}{price} was adjusted to {shares1} and {currency_code}{price2}, respectively, to account for the {month} {year} Private Placement and the Amendment Agreement",
    "Anti-dilution provisions resulted in adjustment of warrant exercise price from {currency_code}{price} to {currency_code}{price2} and shares from {shares} to {shares1} following the {year} financing",
    "Pursuant to anti-dilution protection, {shares} warrants at {currency_code}{price} per share were adjusted to {shares1} warrants at {currency_code}{price2} per share effective {month} {year}",
    "The {month} {year} down-round financing triggered adjustments to outstanding warrants, changing the exercise price from {currency_code}{price} to {currency_code}{price2}",
    "Weighted-average anti-dilution adjustments modified warrant terms to {shares1} shares at {currency_code}{price2} from {shares} shares at {currency_code}{price}"
]

# Fair value measurement templates
fair_value_snapshot_templates = [
    "The fair value of the shares are {currency_code}{value1} and {currency_code}{value2}, in {month} {year}",
    "As of {month} {end_day}, {year}, the fair value of shares underlying convertible instruments was {currency_code}{value}",
    "Fair value of shares reserved for issuance totaled {currency_code}{value} at {month} {end_day}, {year}",
    "The {shares} shares reserved for conversion and exercise had an aggregate fair value of {currency_code}{value} as of {month} {year}",
    "{company} valued the {shares} shares underlying convertible securities at {currency_code}{value} based on the closing stock price on {month} {end_day}, {year}"
]

# Share reservation templates
share_reservation_templates = [
    "In addition, {company} has reserved {shares1} shares of the common stock for issuance upon the exercise of outstanding warrants and {shares2} shares of the common stock for issuance upon the exercise of stock options",
    "{company} has reserved a total of {shares} shares for issuance under equity incentive plans and upon exercise of warrants and convertible securities",
    "As of {month} {end_day}, {year}, {shares1} shares were reserved for warrant exercises and {shares2} shares for option exercises under equity plans",
    "The Company maintains a reserve of {shares} shares for potential issuance upon conversion, exercise, or settlement of outstanding equity instruments",
    "{shares} shares of authorized common stock are reserved for issuance pursuant to outstanding equity awards, warrants, and convertible instruments as of {year}"
]

# Outstanding options disclosure
outstanding_options_templates = [
    "As of {month} {end_day}, {year}, there are {shares} issued and outstanding options to purchase common stock. To the extent that outstanding warrants and options are exercised, the percentage ownership of common stock of {company}'s stockholders will be diluted",
    "Outstanding stock options totaled {shares} as of {month} {end_day}, {year}, with a weighted-average exercise price of {currency_code}{price}",
    "As of {year} year-end, {shares} stock options were outstanding and exercisable, representing potential dilution to existing shareholders",
    "{company} had {shares} options outstanding at {month} {end_day}, {year}, of which {shares1} were vested and exercisable",
    "Stock options to purchase {shares} shares were outstanding as of {month} {end_day}, {year}, with expiration dates ranging from {year} to {end_year}"
]

# Dilution concern templates
dilution_concern_templates = [
    "In the event of the exercise of a substantial number of warrants and options, within a reasonably short period of time after the right to exercise commences, the resulting increase in the amount of the common stock in the trading market could substantially adversely affect the market price of the common stock or {company}'s ability to raise money through the sale of equity securities",
    "Exercise of outstanding warrants and options representing {shares} shares could result in significant dilution to existing stockholders and negatively impact the stock price",
    "The potential issuance of {shares} shares upon exercise of warrants and conversion of notes could dilute current shareholders by approximately {pct}%",
    "Substantial dilution may occur if holders exercise warrants for {shares} shares and convert notes into {shares1} shares of common stock",
    "Current stockholders face potential dilution from {shares} shares underlying warrants, options, and convertible securities as of {month} {end_day}, {year}",
    "If all outstanding warrants and options were exercised, {shares} additional shares would be issued, representing {pct}% dilution to current shareholders"
]

# Capital raising impact templates
capital_raising_impact_templates = [
    "The overhang of {shares} shares underlying convertible securities may impair {company}'s ability to raise capital through future equity offerings",
    "Potential dilution from outstanding warrants and options could adversely affect the terms of future financings or {company}'s ability to access capital markets",
    "The existence of {shares} shares reserved for issuance may make it more difficult for {company} to obtain financing on favorable terms",
    "Future equity financings may be more difficult to complete due to the dilutive effect of {shares} shares underlying outstanding securities"
]

warrant_debt_issuance_templates = [
    "In the same financing, {company} issued warrants to purchase {shares1} shares of its common stock (valued at {currency_code}{value1}) and warrants to purchase {shares2} shares of its common stock (valued at {currency_code}{value2}) related to extensions of the maturity dates",
    "{company} issued warrants to purchase {shares} shares of common stock (valued at {currency_code}{value}) in conjunction with {financing_type} in {month} {year}",
    "Warrants to purchase {shares} shares of common stock were issued as part of the financing arrangement, valued at {currency_code}{value} and recorded as debt issuance costs",
    "In connection with {financing_type}, {company} granted warrants for {shares} shares valued at {currency_code}{value}, with the value recorded as debt issue costs",
    "Additional warrants to purchase {shares} shares of {company} common stock were issued on {month} {year} in consideration for the extension to that date"
    "In connection with the extension to {month} {year}, {company} offered two alternatives of consideration. Holders of {shares1} common stock of the notes elected to reduce the exercise price of their warrants, or to to receive additional warrants to purchase {shares2} shares of common stock",
    "{company} reduced the exercise price by {currency_code}{value1} per share for all warrants issued in connection with the issuance or extensions of the notes",
    "In consideration of this extension, {company} issued {shares} shares of common stock at a price of {value} per share and warrants to purchase {shares1} shares of common stock at a price to be determined in the future, between {currency_code}{value1} and {currency_code}{value2} per share, on or before {month} {year}",
    "Also in {month} {year}, {company} exchanged a {currency_code}{value} note payable for units of common stock and warrants to purchase common stock at a price of {currency_code}{value1} per unit",
    "In addition, the financial advisor on the debt offering received an additional {shares} warrants with the {month} offering for a total of approximately {value}",
    "If all of the warrants are exercised and the debt is fully converted to {company} stock, current stockholders will experience a significant dilution in their ownership of {company}",
    "Based on the terms of the debt offering both the notes and warrants are subject to anti-dilution provisions and can potentially become more dilutive to {company} stock. Further dilution may occur in the event of a default {currency_code}{value} payable",
]

warrant_amortization_templates = [
    "The value of the warrants related to these financings was recorded as debt issue costs and the amortization of such warrant costs was included in interest expense, which was capitalized as a cost of {asset_type}",
    "Warrant costs totaling {currency_code}{value} were recorded as debt issuance costs and amortized to interest expense over the term of the debt",
    "{company} amortizes debt issuance costs, including the value of warrants issued, to interest expense using the effective interest method",
    "Amortization of warrant-related debt issuance costs totaled {currency_code}{value} for the year ended {month} {end_day}, {year}",
    "The relative fair value of the warrants was recorded as a debt discount and is being amortized to non-cash interest expense over the life of the {debt_types_list} using the effective interest method",
    "The initial value of the warrants was recorded in Additional Paid-In Capital and, as they are classified as equity, they are not subsequently remeasured",
    "Amortization of the debt discount related to the warrants issued with the {debt_types_list} totaled {currency_code}{value} and {currency_code}{value2} for the years ended {year} and {prev_year}, respectively",
    "The warrants are exercisable for a term of five years at an exercise price of {currency_code}{price} per share, subject to anti-dilution provisions similar to the provisions set forth in the Notes and expire on {month} {year}",
]


non_cash_settlement_templates = [
    "In {year}, {company} issued {shares} shares of common stock (valued at {currency_code}{value}) in settlement of invoices for previously rendered {service_type}",
    "{company} settled outstanding {service_type} payables totaling {currency_code}{value} through the issuance of {shares} shares of common stock during {year}",
    "During {year}, {company} issued {shares} shares valued at {currency_code}{value} to settle {service_type} obligations",
    "{shares} shares of common stock were issued in {month} {year} to satisfy {currency_code}{value} in outstanding {service_type} fees",
]


financing_types = [
    "Bridge Financing",
    "short-term bridge financing",
    "mezzanine financing",
    "subordinated debt financing",
    "convertible debt financing",
    "senior secured financing",
]

service_types = [
    "legal services",
    "consulting services",
    "professional services",
    "advisory services",
    "accounting and audit services",
]

# Balance sheet changes templates
balance_sheet_change_templates = [
    "Accounts payable increased by {currency_code}{amount} {money_unit} to {currency_code}{ending} {money_unit} as of {month} {end_day}, {year}, primarily due to {reason}",
    "Accounts receivable decreased {currency_code}{amount} {money_unit} during {year}, reflecting {reason}",
    "Inventories increased {currency_code}{amount} {money_unit} from {month} {end_day}, {prev_year} to {month} {end_day}, {year} due to {reason}",
    "Accrued liabilities increased by {currency_code}{amount} {money_unit} year-over-year, primarily attributable to {reason}",
    "Prepaid expenses and other current assets decreased {currency_code}{amount} {money_unit} as of {month} {end_day}, {year} compared to the prior year",
]

working_capital_templates = [
    "Working capital was {currency_code}{amount} {money_unit} at {month} {end_day}, {year}, compared to {currency_code}{prev_amount} {money_unit} at {month} {end_day}, {prev_year}",
    "Changes in operating assets and liabilities resulted in a {currency_code}{direction} of {currency_code}{amount} {money_unit} in cash from operations during {year}",
    "{company}'s working capital increased by {currency_code}{amount} {money_unit} during {year}, driven primarily by {reason}",
    "Net changes in operating assets and liabilities used {currency_code}{amount} {money_unit} of cash during {year}",
]

ar_templates = [
    "Trade accounts receivable totaled {currency_code}{amount} {money_unit} at {month} {end_day}, {year}, representing {days} days sales outstanding",
    "The allowance for doubtful accounts was {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}, compared to {currency_code}{prev_amount} {money_unit} in the prior year",
    "Days sales outstanding decreased from {prev_days} days to {days} days during {year}",
    "{company} recorded bad debt expense of {currency_code}{amount} {money_unit} during {year}",
    "Accounts receivable, net of allowances, increased {currency_code}{amount} {money_unit} to {currency_code}{ending} {money_unit} at year-end {year}",
]

ap_templates = [
    "Accounts payable increased {currency_code}{amount} {money_unit} from the prior year, reflecting {reason}",
    "{company} extended payment terms with certain vendors during {year}, resulting in an increase in accounts payable of {currency_code}{amount} {money_unit}",
    "Accounts payable was {currency_code}{amount} {money_unit} at {month} {end_day}, {year}, down from {currency_code}{prev_amount} {money_unit} at {month} {end_day}, {prev_year}",
    "Days payable outstanding increased to {days} days at year-end {year} from {prev_days} days in the prior year",
    "Changes in accounts payable provided {currency_code}{amount} {money_unit} of cash during {year}",
]

accrued_liabilities_templates = [
    "Accrued compensation increased by {currency_code}{amount} {money_unit} at {month} {end_day}, {year} due to {reason}",
    "Accrued expenses totaled {currency_code}{amount} {money_unit} at year-end {year}, an increase of {currency_code}{change} {money_unit} from the prior year",
    "The increase in accrued liabilities of {currency_code}{amount} {money_unit} was primarily related to {reason}",
    "Other accrued liabilities decreased {currency_code}{amount} {money_unit} during {year}, mainly due to {reason}",
]

other_current_assets_templates = [
    "Other current assets increased {currency_code}{amount} {money_unit} to {currency_code}{ending} {money_unit} at {month} {end_day}, {year}, primarily due to {reason}",
    "Prepaid expenses decreased by {currency_code}{amount} {money_unit} during {year}",
    "Other receivables totaled {currency_code}{amount} {money_unit} at year-end {year}",
    "Current assets, excluding cash, increased {currency_code}{amount} {money_unit} year-over-year",
]

other_liabilities_templates = [
    "Other long-term liabilities increased by {currency_code}{amount} {money_unit} during {year}, primarily related to {reason}",
    "{company}'s current liabilities totaled {currency_code}{amount} {money_unit} at {month} {end_day}, {year}",
    "Total liabilities increased from {currency_code}{prev_amount} {money_unit} to {currency_code}{amount} {money_unit} during {year}",
    "Non-current liabilities decreased {currency_code}{amount} {money_unit} to {currency_code}{ending} {money_unit} at year-end {year}",
]

retained_earnings_templates = [
    "Retained earnings increased by {currency_code}{amount} {money_unit} during {year}, reflecting net income of {currency_code}{ni} {money_unit} less dividends of {currency_code}{div} {money_unit}",
    "Accumulated deficit was {currency_code}{amount} {money_unit} at {month} {end_day}, {year}",
    "{company} reported a net loss of {currency_code}{amount} {money_unit} for {year}, increasing accumulated deficit to {currency_code}{ending} {money_unit}",
    "Retained earnings totaled {currency_code}{amount} {money_unit} at year-end {year}",
]

stockholders_equity_templates = [
    "Total stockholders' equity increased {currency_code}{amount} {money_unit} to {currency_code}{ending} {money_unit} at {month} {end_day}, {year}",
    "Stockholders' equity was {currency_code}{amount} {money_unit} at {month} {end_day}, {year}, compared to {currency_code}{prev_amount} {money_unit} at {month} {end_day}, {prev_year}",
    "The increase in stockholders' equity of {currency_code}{amount} {money_unit} was primarily due to {reason}",
    "Total equity increased by {currency_code}{amount} {money_unit} during {year}",
]

cash_flow_statement_templates = [
    "Cash used in operating activities was {currency_code}{amount} {money_unit} for the year ended {month} {end_day}, {year}",
    "Net cash provided by operating activities totaled {currency_code}{amount} {money_unit} in {year}, compared to {currency_code}{prev_amount} {money_unit} in {prev_year}",
    "Cash flows from investing activities used {currency_code}{amount} {money_unit} during {year}, primarily for {reason}",
    "{company} generated {currency_code}{amount} {money_unit} in cash from operations during {year}",
    "Free cash flow was {currency_code}{amount} {money_unit} for {year}, defined as cash from operations less capital expenditures",
]

balance_sheet_reasons = [
    "timing of vendor payments",
    "increased sales volume",
    "seasonal working capital requirements",
    "timing of collections from customers",
    "inventory build-up to support growth",
    "payment of annual bonuses",
    "timing of payroll and tax payments",
    "increased business activity",
    "changes in payment terms",
]

accrued_reasons = [
    "annual incentive compensation accruals",
    "timing of payroll payments",
    "increased headcount",
    "accrual of performance bonuses",
    "timing of tax payments",
    "warranty accruals",
    "restructuring accruals",
]

other_asset_reasons = [
    "prepaid insurance and maintenance contracts",
    "deposits with vendors",
    "income tax refunds receivable",
    "prepaid software licenses",
    "advances to suppliers",
]

liability_reasons = [
    "deferred compensation arrangements",
    "uncertain tax positions",
    "environmental remediation obligations",
    "asset retirement obligations",
    "long-term incentive plan accruals",
]

equity_reasons = [
    "net income and stock issuances",
    "net income partially offset by dividends paid",
    "the public offering completed in {month} {year}",
    "net loss for the year",
    "retention of earnings",
]
# Add these template arrays after the stock_comp_valuation_templates (around line 240)

# CEO and executive compensation templates
ceo_compensation_templates = [
    "{company}'s Chief Executive Officer received total compensation of {currency_code}{amount} {money_unit} for {year}, consisting of {currency_code}{salary} {money_unit} in base salary, {currency_code}{bonus} {money_unit} in cash bonuses, and {currency_code}{equity} {money_unit} in equity awards",
    "For the year ended {month} {end_day}, {year}, the CEO's compensation package totaled {currency_code}{amount} {money_unit}, including base salary of {currency_code}{salary} {money_unit} and performance-based incentives of {currency_code}{bonus} {money_unit}",
    "Total compensation for the Chief Executive Officer was {currency_code}{amount} {money_unit} in {year}, compared to {currency_code}{prev_amount} {money_unit} in {prev_year}",
    "The CEO received {currency_code}{amount} {money_unit} in total compensation during {year}, comprised of salary, annual incentive compensation, and long-term equity grants",
]

executive_compensation_templates = [
    "Total compensation for {company}'s five highest-paid executives was {currency_code}{amount} {money_unit} for {year}",
    "The named executive officers received aggregate compensation of {currency_code}{amount} {money_unit} in {year}, including {currency_code}{equity} {money_unit} in stock-based awards",
    "Compensation for senior management totaled {currency_code}{amount} {money_unit} during {year}, representing {increase_decrease} of {change}% from the prior year",
    "Executive compensation expense, including salaries, bonuses, and equity awards, totaled {currency_code}{amount} {money_unit} for the year ended {month} {end_day}, {year}",
]

equity_grant_templates = [
    "In {month} {year}, the CEO was granted {shares} restricted stock units with a grant-date fair value of {currency_code}{amount} {money_unit}, vesting over {years} years",
    "{company} granted the Chief Executive Officer {shares} stock options in {year} with an exercise price of {currency_code}{price} per share and a ten-year term",
    "Performance share units representing {shares} shares at target were awarded to the CEO in {year}, with vesting contingent upon achievement of {metric}",
    "The CEO received a grant of {shares} restricted shares valued at {currency_code}{amount} {money_unit} during {year}, subject to {vesting_period} vesting",
]

performance_metrics = [
    "revenue growth and earnings per share targets",
    "total shareholder return relative to peer companies",
    "operating margin and return on invested capital goals",
    "strategic objectives and financial performance targets",
    "revenue, EBITDA, and market share milestones",
]

vesting_periods = [
    "three-year cliff",
    "four-year ratable",
    "three-year graded",
    "performance-based",
    "time-based annual",
]

severance_templates = [
    "{company} maintains change-in-control agreements with executive officers providing for severance payments equal to {multiple} times base salary and target bonus upon qualifying termination",
    "Under the CEO's employment agreement, the executive is entitled to severance of {currency_code}{amount} {money_unit} upon termination without cause",
    "Change-in-control provisions in executive employment agreements provide for accelerated vesting of equity awards and cash severance payments",
    "{company}'s severance arrangements with named executive officers could result in payments totaling {currency_code}{amount} {money_unit} upon a change in control",
]

employment_agreement_templates = [
    "{company} entered into an employment agreement with its Chief Executive Officer in {month} {year} providing for an annual base salary of {currency_code}{salary} {money_unit} and target annual bonus of {bonus_pct}% of salary",
    "The CEO's employment agreement, effective {month} {year}, includes a base salary of {currency_code}{salary} {money_unit} with annual merit increase eligibility and participation in long-term incentive programs",
    "Under the terms of the CEO employment agreement, the executive receives an annual base salary of {currency_code}{salary} {money_unit}, subject to annual review by the Board of Trustees",
    "The employment agreement with the Chief Executive Officer provides for base compensation of {currency_code}{salary} {money_unit} and eligibility for annual performance bonuses up to {bonus_pct}% of base salary",
]

compensation_committee_templates = [
    "The Compensation Committee of the Board of Directors reviews and approves all executive compensation, including salary, bonuses, and equity grants",
    "Executive compensation decisions are made by the Compensation Committee based on peer group benchmarking and company performance",
    "The Compensation Committee engaged {consultant} as its independent compensation consultant to advise on executive pay practices",
    "Annual executive compensation is determined by the Compensation Committee after considering financial performance, individual contributions, and market data",
]

say_on_pay_templates = [
    "At the {year} annual meeting, shareholders approved {company}'s executive compensation program with {pct}% support",
    "{company}'s say-on-pay proposal received {pct}% approval from shareholders at the annual meeting held in {month} {year}",
    "Shareholders voted to approve executive compensation on an advisory basis, with {pct}% of votes cast in favor",
    "The advisory vote on executive compensation was approved by {pct}% of shares voted at the {year} annual meeting",
]

deferred_comp_templates = [
    "Certain executives participate in a non-qualified deferred compensation plan allowing deferral of up to {pct}% of base salary and {bonus_pct}% of bonuses",
    "{company} maintains a deferred compensation plan for executives with a total liability of {currency_code}{amount} {money_unit} as of {month} {end_day}, {year}",
    "Executive officers may elect to defer receipt of cash bonuses and equity awards under {company}'s non-qualified deferred compensation plan",
    "Deferred compensation obligations to executives totaled {currency_code}{amount} {money_unit} at year-end {year}, primarily invested in mutual fund equivalents",
]

perquisites_templates = [
    "Perquisites provided to executive officers include car allowances, financial planning services, and executive health screenings, totaling {currency_code}{amount} for the CEO in {year}",
    "The CEO received perquisites valued at {currency_code}{amount} during {year}, consisting primarily of {perq_type}",
    "Executive perquisites are limited and totaled {currency_code}{amount} for all named executive officers in aggregate for {year}",
    "{company} provides minimal perquisites to executives, with the CEO receiving {currency_code}{amount} in {year} for {perq_type}",
]

perq_types = [
    "security services and travel expenses",
    "automobile allowance and financial planning",
    "club memberships and travel-related expenses",
    "tax preparation and financial advisory services",
    "company aircraft usage for business travel",
]

clawback_templates = [
    "{company} has adopted a clawback policy allowing recovery of incentive compensation in the event of a financial restatement",
    "Executive compensation is subject to recoupment under {company}'s clawback policy in cases of misconduct or financial restatement",
    "The Board may require reimbursement of performance-based compensation under the clawback policy if performance goals are not actually achieved",
    "Incentive compensation paid to executives is subject to clawback provisions as required by the Dodd-Frank Act and SEC regulations",
]   
```

# Main functions
```{python}
def generate_derivative_liability_paragraph(
    label_type,
    max_past_years=random.randint(1, 3),
    year_range=(1999, 2025),
    max_len=random.randint(4, 7),
    company_name=None,
):
    """
    Generate synthetic paragraphs for derivative liabilities/warrants (label 4)
    or embedded derivatives (label 6).

    Args:
        label_type (int): 4 for derivative liabilities/warrants, 6 for embedded derivatives
        year_range (tuple): (min_year, max_year) for reporting year
        max_len (int): Maximum number of sentences

    Returns:
        tuple: (paragraph_text, label)
    """

    current_year = random.randint(year_range[0], year_range[1])
    reporting_year = current_year

    all_sentences = []
    currency_code = random.choice(currency_codes)
    money_units = random.choice(money_unit_list)
    major_currency = random.choice(all_currencies)
    if company_name is None:
        # ~ 75% chance of company name
        if random.random() < 0.75:
            company_name = random.choice(company_names)
        else:
            company_name = random.choice(["The Company", "We"])
    target_companies = [name for name in company_names if name != company_name]

    # ============ LABELS 4 & 5: DERIVATIVE LIABILITIES AND WARRANTS ============
    if label_type in [4, 5]:

        is_past = label_type == 5  # True for label 5, False for label 4

        # For label 5 (past), use historical years
        if is_past:
            past_years = sorted(
                random.sample(
                    range(current_year - 5, current_year),
                    random.randint(1, max_past_years),
                )
            )
            settlement_year = random.choice([current_year - 1, current_year])

        if random.random() < 0.5:
            template = random.choice(warrant_issuance_templates)
            company = random.choice(company_names)
            shares = random.choice([50000, 100000, 250000, 500000, 750000, 1000000])
            price = round(random.uniform(1.50, 25.00), 2)
            month = random.choice(months)

            if is_past:
                # Use past years for label 5
                year = random.choice(past_years)
            else:
                # Use current or recent year for label 4
                year = random.choice([current_year, current_year - 1])

            event = random.choice(warrant_events)
            expiry_year = year + random.randint(3, 7)

            sentence = template.format(
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                shares=f"{shares:,}",
                price=price,
                month=month,
                year=year,
                event=event,
                expiry_year=expiry_year,
            )
            all_sentences.append(sentence)

        # Add fair value measurement (0-1) - only for label 4
        if not is_past and random.random() < 0.7:
            template = random.choice(warrant_fv_templates)
            amount = round(random.uniform(0.5, 15.0), 1)
            end_day = random.randint(28, 31)
            month=random.choice(months)
            date = f"{month} {end_day}, {current_year}"
            model=random.choice(valuation_models)
            verb=random.choice(assessment_verbs)
            sentence = template.format(
                amount=amount,
                date=date,
                year=current_year,
                company=company_name,
                model=model,
                verb=verb,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                month=random.choice(months),
                end_day=random.randint(28, 31),
            )
            all_sentences.append(sentence)

        # Add liability classification (0-1) - only for label 4
        if not is_past and random.random() < 0.6:
            template = random.choice(warrant_liability_templates)
            location = random.choice(fv_change_locations)
            event=random.choice(warrant_events)
            sentence = template.format(location=location, company=company_name, event=event)
            all_sentences.append(sentence)

        # Add fair value measurement (0-1)
        template = random.choice(warrant_fv_templates)
        amount = round(random.uniform(0.5, 15.0), 1)
        model=random.choice(valuation_models)
        verb=random.choice(assessment_verbs)
        sentence = template.format(
            amount=amount,
            date="{month} {end_day}, {current_year}".format(
                current_year=current_year,
                end_day=random.randint(28, 31),
                month=random.choice(months),
            ),
            year=current_year,
            company=company_name,
            currency_code=currency_code,
            major_currency=major_currency,
            money_unit=money_units,
            month=random.choice(months),
            end_day=random.randint(28, 31),
            model=model,
            verb=verb
        )
        all_sentences.append(sentence)

        # Add liability classification (0-1)
        template = random.choice(warrant_liability_templates)
        location = random.choice(fv_change_locations)
        event=random.choice(warrant_events)
        sentence = template.format(location=location, company=company_name,event=event)
        all_sentences.append(sentence)

        # Add general derivative liability (0-1) - only for label 4
        if not is_past:
            template = random.choice(deriv_liability_general_templates)
            amount = round(random.uniform(2.0, 20.0), 1)
            prev_amount = round(amount * random.uniform(0.7, 1.4), 1)
            gain_loss = random.choice(["gain", "loss"])
            model=random.choice(valuation_models)
            sentence = template.format(
                year=current_year,
                amount=amount,
                prev_amount=prev_amount,
                gain_loss=gain_loss,
                month=random.choice(months),
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                model=model,
                end_day=random.randint(28, 31),
            )
            all_sentences.append(sentence)

        # Add down round features (0-1) - only for label 4
        if not is_past and random.random() < 0.4:
            sentence = random.choice(down_round_templates)
            all_sentences.append(sentence.format(company=company_name))

        # Add earnout liability (0-1)
        if random.random() < 0.3:
            if is_past:
                # Use past earnout template for label 5
                template = random.choice(earnout_past_templates)
                target = random.choice(target_companies)
                amount = round(random.uniform(5.0, 50.0), 1)
                year = random.choice(past_years)

                sentence = template.format(
                    target=target,
                    amount=amount,
                    year=year,
                    settlement_year=settlement_year,
                    month=random.choice(months),
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                )
            else:
                # Use current earnout template for label 4
                template = random.choice(earnout_templates)
                target = random.choice(target_companies)
                amount = round(random.uniform(5.0, 50.0), 1)
                year = current_year + random.randint(1, 3)

                sentence = template.format(
                    target=target,
                    amount=amount,
                    year=year,
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    month=random.choice(months),
                    end_day=random.randint(28, 31),
                )
            all_sentences.append(sentence)

        # Add past-specific templates for label 5
        if is_past:
            for _ in range(0, max_len):
                # Add warrant liability extinguishment (0-1)
                if random.random() < 0.6:
                    template = random.choice(warrant_liability_extinguishment_templates)
                    amount = round(random.uniform(1.0, 10.0), 1)
                    year = random.choice(past_years)

                    sentence = template.format(
                        amount=amount,
                        year=year,
                        month=random.choice(months),
                        settlement_year=settlement_year,
                        company=company_name,
                        currency_code=currency_code,
                        major_currency=major_currency,
                        money_unit=money_units,
                        end_day=random.randint(28, 31),
                    )
                    all_sentences.append(sentence)
        label = label_type

    # ============ LABELS 6 & 7: EMBEDDED DERIVATIVES ============
    elif label_type in [6, 7]:

        is_past = label_type == 7  # True for label 7, False for label 6

        # For label 7 (past), use historical years
        if is_past:
            past_years = sorted(
                random.sample(
                    range(current_year - 5, current_year),
                    random.randint(1, max_past_years),
                )
            )
            settlement_year = random.choice([current_year - 1, current_year])

        # Add embedded derivative identification (1)
        template = random.choice(embedded_identification_templates)
        host_contract = random.choice(host_contracts)
        sentence = template.format(host_contract=host_contract, company=company_name)
        all_sentences.append(sentence)

        # Add embedded derivative types (0-1)
        if random.random() < 0.6:
            template = random.choice(embedded_types_templates)
            embedded_type = random.choice(embedded_types)
            host_contract = random.choice(host_contracts)
            location = random.choice(fv_change_locations)

            sentence = template.format(
                embedded_type=embedded_type,
                host_contract=host_contract,
                location=location,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
            all_sentences.append(sentence)

        # Add convertible debt scenario (0-1)
        if random.random() < 0.5:
            if is_past:
                # Use redemption template for label 7
                template = random.choice(convertible_debt_redemption_templates)
                principal = random.choice([50, 100, 150, 200, 250, 500])
                embedded_fv = round(principal * random.uniform(0.05, 0.15), 1)
                amount = embedded_fv
                month = random.choice(months)
                year = random.choice(past_years)

                sentence = template.format(
                    principal=principal,
                    embedded_fv=embedded_fv,
                    amount=amount,
                    month=month,
                    year=year,
                    settlement_year=settlement_year,
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                )
            else:
                # Use issuance template for label 6
                template = random.choice(convertible_debt_templates)
                principal = random.choice([50, 100, 150, 200, 250, 500])
                embedded_fv = round(principal * random.uniform(0.05, 0.15), 1)
                month = random.choice(months)
                year = random.choice([current_year, current_year - 1, current_year - 2])

                sentence = template.format(
                    principal=principal,
                    embedded_fv=embedded_fv,
                    month=month,
                    year=year,
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                )
            all_sentences.append(sentence)

        # Add fair value measurement (1) - only for label 6
        if not is_past:
            template = random.choice(embedded_fv_templates)
            amount = round(random.uniform(5.0, 50.0), 1)
            prev_amount = round(amount * random.uniform(0.7, 1.3), 1)
            change_direction = "increase" if amount > prev_amount else "decrease"

            sentence = template.format(
                amount=amount,
                year=current_year,
                month=random.choice(months),
                prev_amount=prev_amount,
                prev_year=current_year - 1,
                change_direction=change_direction,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
            all_sentences.append(sentence)

        # Add valuation methodology (0-1) - only for label 6
        if not is_past and random.random() < 0.6:
            template = random.choice(embedded_valuation_templates)
            model = random.choice(valuation_models)
            assumptions = random.choice(valuation_assumptions)

            sentence = template.format(
                model=model, assumptions=assumptions, company=company_name
            )
            all_sentences.append(sentence)

        # Add fair value change (0-1) - only for label 6
        if not is_past and random.random() < 0.5:
            template = random.choice(embedded_fv_change_templates)
            gain_loss = random.choice(["gain", "loss"])
            amount = round(random.uniform(1.0, 20.0), 1)
            location = random.choice(fv_change_locations)

            sentence = template.format(
                year=current_year,
                gain_loss=gain_loss,
                month=random.choice(months),
                amount=amount,
                location=location,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
            all_sentences.append(sentence)

        # Add clearly and closely related analysis (0-1) - only for label 6
        if not is_past and random.random() < 0.4:
            sentence = random.choice(ccr_analysis_templates)
            all_sentences.append(sentence.format(company=company_name))

        # Add settlement activity (0-1)
        if random.random() < 0.3:
            template = random.choice(embedded_settlement_templates)
            month = random.choice(months)
            quarter = random.choice(quarters)
            principal = random.choice([25, 50, 100, 150])
            amount = round(random.uniform(2.0, 15.0), 1)
            gain_loss = random.choice(["gain", "loss"])

            year_to_use = settlement_year if is_past else current_year

            sentence = template.format(
                month=month,
                year=year_to_use,
                quarter=quarter,
                principal=principal,
                amount=amount,
                gain_loss=gain_loss,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
            all_sentences.append(sentence)

        # Add embedded FX derivatives (0-1) - only for label 6
        if not is_past and random.random() < 0.3:
            template = random.choice(embedded_fx_templates)
            host_contract = random.choice(host_contracts)
            currency_pair = random.choice(currency_pairs)

            sentence = template.format(
                host_contract=host_contract,
                month=random.choice(months),
                currency_pair=currency_pair,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
            all_sentences.append(sentence)

        # Add past-specific templates for label 7
        if is_past:
            # Add embedded past templates (1-2)
            for _ in range(random.randint(1, 2)):
                template = random.choice(embedded_past_templates)
                host_contract = random.choice(host_contracts)
                year = random.choice(past_years)

                sentence = template.format(
                    host_contract=host_contract,
                    year=year,
                    settlement_year=settlement_year,
                    month=random.choice(months),
                    current_year=current_year,
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                )
                all_sentences.append(sentence)

            # Add no longer outstanding statement (0-1)
            if random.random() < 0.7:
                template = random.choice(embedded_no_longer_outstanding_templates)
                amount = round(random.uniform(5.0, 40.0), 1)

                sentence = template.format(
                    settlement_year=settlement_year,
                    current_year=current_year,
                    month=random.choice(months),
                    amount=amount,
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                )
                all_sentences.append(sentence)

        label = label_type

    elif label_type == 3:
        label = 3
        for _ in range(0, max_len): 
            template = random.choice(
                equity_warrant_templates + equity_warrant_activity_templates
            )
            shares = random.choice([50000, 100000, 250000, 500000, 1000000])
            net_shares = int(shares * 0.7)
            price = round(random.uniform(5.00, 50.00), 2)
            amount = round((shares * price) / 1000000, 1)
            expiry_year = current_year + random.randint(2, 5)
            year = current_year - random.randint(0, 5)
            month = random.choice(months)
            event = random.choice(warrant_events)
            prev_month = random.choice(months)
            value = round(shares * random.uniform(0.25, 0.75), 0)

            sentence = template.format(
                shares=f"{shares:,}",
                net_shares=f"{net_shares:,}",
                price=price,
                expiry_year=expiry_year,
                year=year,
                amount=amount,
                month=month,
                prev_month=prev_month,
                prev_year=year - random.randint(1, 2),
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                event=event,
                quarter=random.choice(quarters),
                value=value
            )
            all_sentences.append(sentence)
        # Non-cash transactions and equity dilution
        for _ in range(0, max_len):
            noncash_type = random.choice([
                'stock_debt', 'registration', 'market_impact', 'warrant_adjustment',
                'fair_value', 'share_reservation', 'outstanding_options', 
                'dilution_concern', 'capital_raising'
            ])
            company = random.choice(company_names)
            month = random.choice(months)
            year = random.choice([current_year, current_year - 1])
            end_day = random.randint(28, 31)
            
            if noncash_type == 'stock_debt':
                template = random.choice(stock_debt_issuance_templates)
                shares = random.choice([10000, 15000, 20000, 25000, 50000])
                shares1 = random.choice([10000, 15000, 20000, 25000])
                shares2 = int(shares1 * random.uniform(0.4, 0.6))
                value = round(shares * random.uniform(8, 15) / 1000, 0)
                value1 = round(shares1 * random.uniform(8, 15) / 1000, 0)
                value2 = round(shares2 * random.uniform(2, 8) / 1000, 0)
                financing_type = random.choice(financing_types)
                
                sentence = template.format(
                    company=company_name, month=month, year=year,
                    financing_type=financing_type,
                    shares=f"{shares:,}", shares1=f"{shares1:,}", shares2=f"{shares2:,}",
                    value=f"{value:,}", value1=f"{value1:,}", value2=f"{value2:,}",
                    currency_code=currency_code
                )
                
            elif noncash_type == 'registration':
                template = random.choice(registration_statement_templates)
                shares = random.choice([500000, 1000000, 1500000, 2000000, 3000000])
                days = random.choice([30, 60, 90, 120])
                
                sentence = template.format(
                    company=company_name, month=month, year=year,
                    shares=f"{shares:,}", days=days
                )
                
            elif noncash_type == 'market_impact':
                template = random.choice(market_impact_templates)
                shares = random.choice([500000, 1000000, 2000000, 3000000])
                
                sentence = template.format(
                    company=company_name, shares=f"{shares:,}"
                )
                
            elif noncash_type == 'warrant_adjustment':
                template = random.choice(warrant_adjustment_templates)
                shares = random.choice([100000, 200000, 333334, 500000])
                shares1 = int(shares * random.uniform(1.2, 1.8))
                price = round(random.uniform(2.00, 10.00), 2)
                price2 = round(price * random.uniform(0.5, 0.8), 2)
                
                sentence = template.format(
                    month=month, year=year,
                    shares=f"{shares:,}", shares1=f"{shares1:,}",
                    price=f"{price:.2f}", price2=f"{price2:.2f}",
                    currency_code=currency_code
                )
                
            elif noncash_type == 'fair_value':
                template = random.choice(fair_value_snapshot_templates)
                shares = random.choice([500000, 1000000, 1500000])
                value = round(shares * random.uniform(3, 12) / 1000000, 1)
                value1 = round(random.uniform(2, 10), 1)
                value2 = round(random.uniform(2, 10), 1)
                
                sentence = template.format(
                    company=company_name, month=month, year=year, end_day=end_day,
                    shares=f"{shares:,}",
                    value=f"{value:.1f}", value1=f"{value1:.1f}", value2=f"{value2:.1f}",
                    currency_code=currency_code
                )
                
            elif noncash_type == 'share_reservation':
                template = random.choice(share_reservation_templates)
                shares = random.choice([1000000, 2000000, 3000000, 5000000])
                shares1 = random.choice([500000, 750000, 1000000])
                shares2 = random.choice([250000, 500000, 750000])
                
                sentence = template.format(
                    company=company_name, month=month, year=year, end_day=end_day,
                    shares=f"{shares:,}", shares1=f"{shares1:,}", shares2=f"{shares2:,}"
                )
                
            elif noncash_type == 'outstanding_options':
                template = random.choice(outstanding_options_templates)
                shares = random.choice([500000, 750000, 1000000, 1500000])
                shares1 = int(shares * random.uniform(0.4, 0.7))
                price = round(random.uniform(5.00, 25.00), 2)
                end_year = year + random.randint(5, 10)
                
                sentence = template.format(
                    company=company_name, month=month, year=year, end_day=end_day,
                    end_year=end_year,
                    shares=f"{shares:,}", shares1=f"{shares1:,}",
                    price=f"{price:.2f}", currency_code=currency_code
                )
                
            elif noncash_type == 'dilution_concern':
                template = random.choice(dilution_concern_templates)
                shares = random.choice([1000000, 2000000, 3000000, 5000000])
                shares1 = int(shares * random.uniform(0.5, 0.8))
                pct = round(random.uniform(10, 35), 1)
                
                sentence = template.format(
                    company=company_name, month=month, year=year, end_day=end_day,
                    shares=f"{shares:,}", shares1=f"{shares1:,}",
                    pct=pct
                )
                
            elif noncash_type == 'capital_raising':
                template = random.choice(capital_raising_impact_templates)
                shares = random.choice([1000000, 2000000, 3000000])
                
                sentence = template.format(
                    company=company_name, shares=f"{shares:,}"
                )
            
            all_sentences.append(sentence)

    else:
        raise ValueError("Must be 3 4 5 6 7")

    # Shuffle and select
    random.shuffle(all_sentences)
    selected_sentences = all_sentences[:max_len]
    selected_sentences = [s[0].upper() + s[1:] if s else "" for s in all_sentences]
    # Create paragraph
    paragraph = (
        f"<reportingYear>{reporting_year}</reportingYear> "
        + ". ".join(selected_sentences)
        + "."
    )
    paragraph = re.sub("We's", "Our", paragraph)

    if paragraph.find("{") != -1 or paragraph.find("}") != -1:
        print("Error in format", paragraph)
    return paragraph, label


def generate_labeled_hedge_paragraph(
    has_active_derivative,
    swap_type=None,
    year_range=(1999, 2025),
    max_past_years=random.randint(1, 3),
    max_len=random.randint(4, 7),
    include_policy=None,
    company_name=None,
):  
    """
    Generate a synthetic hedge paragraph with known label.

    Args:
        has_active_derivative (bool or None):
            - True: firm has active derivative in reporting year (label=0)
            - False: firm does not have active derivative (label=1)
            - None: policy/disclosure only, no specific positions (label=2)
        year_range (tuple): (min_year, max_year) for the reporting year
        max_past_years (int): Max number of prior years to include
        max_len (int): Maximum number of sentences
        include_policy (bool): Whether to include policy sentences with labels 0/1
                              If None, randomly decides (70% chance)

    Returns:
        tuple: (paragraph_text, label) where label is 0, 1, or 2
    """

    # Decide whether to include policy statements for labels 0 and 1
    if include_policy is None:
        include_policy = random.random() < 0.7

    # If label 2 (policy only), override to ensure policy is included
    if has_active_derivative is None:
        include_policy = True

    if company_name is None:
        # ~ 75% chance of company name
        if random.random() < 0.75:
            company_name = random.choice(company_names)
        else:
            company_name = random.choice(["The Company", "We"])
    if swap_type is None:
        swap_types = all_derivatives
    else:
        swap_types = derivative_keywords[swap_type]
    money_units = random.choice(money_unit_list)
    currency_code = random.choice(currency_codes)
    major_currency = random.choice(all_currencies)
    # Set up years
    current_year = random.randint(year_range[0], year_range[1])
    reporting_year = current_year
    num_past_years = random.randint(1, max_past_years)
    past_years = sorted(
        random.sample(range(current_year - 5, current_year), num_past_years)
    )

    all_sentences = []

    # Label 2: Policy/disclosure only (no specific positions)
    if has_active_derivative is None:
        # Context (0-1)
        if random.random() < 0.6:
            template = random.choice(context_templates)
            all_sentences.append(
                template.format(
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                )
            )

        # Impact (0-1)
        if random.random() < 0.7:
            template = random.choice(impact_templates)
            verb = random.choice(impact_verbs)
            all_sentences.append(
                template.format(
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                    month=random.choice(months),
                    verb=verb,
                )
            )

        # Mitigation (0-1)
        if random.random() < 0.8:
            template = random.choice(mitigation_templates)
            verb = random.choice(mitigation_verbs)
            all_sentences.append(
                template.format(
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                    month=random.choice(months),
                    verb=verb,
                    swap_type=random.choice(swap_types),
                )
            )

        # Accounting policy (always)
        act_template = random.choice(accounting_policy_templates)
        all_sentences.append(
            act_template.format(
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                swap_type=random.choice(swap_types),
                hedge_type=random.choice(hedge_types),
            )
        )

        # Documentation (0-1)
        if random.random() < 0.6:
            template = random.choice(documentation_templates)
            all_sentences.append(
                template.format(
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                    hedge_type=random.choice(hedge_types),
                )
            )

        # Effectiveness (0-1)
        if random.random() < 0.7:
            template = random.choice(effectiveness_templates)
            sentence = template.format(
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                month=random.choice(months),
                hedge_type=random.choice(hedge_types),
                swap_type=random.choice(swap_types),
                metric=random.choice(metrics),
                frequency=random.choice(frequencies),
                verb=random.choice(assessment_verbs),
                method=random.choice(methods),
                standard=random.choice(standards),
            )
            all_sentences.append(sentence)

        # Ineffectiveness (0-1)
        if random.random() < 0.5:
            template = random.choice(ineffectiveness_templates)
            all_sentences.append(
                template.format(
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                    month=random.choice(months),
                    frequency=random.choice(frequencies),
                )
            )

        # Discontinuation (0-1)
        if random.random() < 0.5:
            template = random.choice(discontinuation_templates)
            all_sentences.append(
                template.format(
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                )
            )

        # Currency description (0-1)
        if random.random() < 0.6:
            selected_currencies = []
            selected_currencies.extend(
                random.sample(major_currencies, random.randint(2, 4))
            )
            if random.random() < 0.5:
                selected_currencies.extend(
                    random.sample(european_currencies, random.randint(1, 2))
                )
            if random.random() < 0.4:
                selected_currencies.extend(
                    random.sample(asian_currencies, random.randint(1, 2))
                )
            if random.random() < 0.3:
                selected_currencies.extend(
                    random.sample(americas_currencies, random.randint(1, 2))
                )

            selected_currencies = list(dict.fromkeys(selected_currencies))
            currency_list = (
                ", ".join(selected_currencies[:-1]) + " and " + selected_currencies[-1]
            )
            if random.random() < 0.3:
                currency_list += " and other European and Latin American currencies"
            template = random.choice(currency_templates)
            all_sentences.append(
                template.format(
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                    month=random.choice(months),
                    currencies=currency_list,
                )
            )

        # Alternative management (0-1)
        if random.random() < 0.4:
            template = random.choice(alternative_management_templates)
            all_sentences.append(
                template.format(
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                )
            )

        # {hedge_type} hedge (0-1)
        if random.random() < 0.5:
            template = random.choice(net_investment_templates)
            verb = random.choice(net_investment_verbs)
            all_sentences.append(
                template.format(
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                    month=random.choice(months),
                    verb=verb,
                    hedge_type=random.choice(hedge_types),
                    swap_type=random.choice(swap_types),
                )
            )

        # Counterparty risk (0-1)
        if random.random() < 0.6:
            template = random.choice(counterparty_templates)
            all_sentences.append(
                template.format(
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                )
            )

        # No trading policy (always)
        nt_template = random.choice(no_trading_templates)
        all_sentences.append(
            nt_template.format(
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                month=random.choice(months),
                swap_type=random.choice(swap_types),
            )
        )

        label = 2

    # Labels 0 and 1: Event-based with optional policy statements
    else:
        # Generate past year sentences
        past_sentences = []
        for y in past_years:
            template = random.choice(past_event_templates)
            loss_amt = round(random.uniform(20, 35), 1)
            swap_type = random.choice(swap_types)
            month = random.choice(months)
            sentence = template.format(
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                month=month,
                year=y,
                next_year=y + 1,
                hedge_type=random.choice(hedge_types),
                amount=loss_amt,
                swap_type=swap_type,
                quarter=random.choice(quarters),
            )
            past_sentences.append(sentence)

        # Sentences about entering swaps
        swap_entry_sentences = []

        if has_active_derivative:
            # Label 0: Active derivatives
            for _ in range(random.randint(1, 2)):
                template = random.choice(swap_entry_templates)
                notional = round(random.uniform(200, 550), 0)
                swap_type = random.choice(swap_types)
                month = random.choice(months)
                sentence = template.format(
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                    month=month,
                    year=current_year,
                    swap_type=swap_type,
                    notional=notional,
                    quarter=random.choice(quarters),
                )
                swap_entry_sentences.append(sentence)

            # Add ongoing position indicators
            for _ in range(random.randint(1, 2)):
                template = random.choice(active_position_templates)
                notional = round(random.uniform(300, 800), 0)
                swap_type = random.choice(swap_types)
                sentence = template.format(
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                    month=month,
                    year=current_year,
                    swap_type=swap_type,
                    notional=notional,
                )
                swap_entry_sentences.append(sentence)
        else:
            # Label 1: No active derivatives
            for y in past_years:
                if random.random() < 0.6:
                    template = random.choice(swap_entry_templates)
                    notional = round(random.uniform(200, 550), 0)
                    swap_type = random.choice(swap_types)
                    month = random.choice(months)
                    sentence = template.format(
                        company=company_name,
                        currency_code=currency_code,
                        major_currency=major_currency,
                        money_unit=money_units,
                        end_day=random.randint(28, 31),
                        month=month,
                        year=y,
                        quarter=random.choice(quarters),
                        swap_type=swap_type,
                        notional=notional,
                    )
                    swap_entry_sentences.append(sentence)

            # Add termination sentences
            if random.random() < 0.7:
                template = random.choice(termination_templates)
                q = random.choice(quarters)
                swap_type = random.choice(swap_types)
                sentence = template.format(
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                    quarter=q,
                    month=random.choice(months),
                    year=current_year,
                    swap_type=swap_type,
                )
                swap_entry_sentences.append(sentence)

            if random.random() < 0.5:
                template = random.choice(expiration_templates)
                month = random.choice(months)
                swap_type = random.choice(swap_types)
                quarter = random.choice(quarters)
                sentence = template.format(
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                    month=month,
                    year=current_year,
                    swap_type=swap_type,
                    quarter=quarter,
                )
                swap_entry_sentences.append(sentence)

        # Quarterly events
        quarter_sentences = []
        num_events = random.randint(0, 2)

        for _ in range(num_events):
            template = random.choice(quarterly_event_templates)
            q = random.choice(quarters)

            if has_active_derivative:
                year_event = random.choice(past_years + [current_year])
            else:
                year_event = random.choice(past_years)

            notional = round(random.uniform(200, 800), 0)
            settlement = round(random.uniform(50, 200), 0)
            swap_type = random.choice(swap_types)

            sentence = template.format(
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                quarter=q,
                year=year_event,
                notional=notional,
                settlement=settlement,
                swap_type=swap_type,
                month=random.choice(months),
            )
            quarter_sentences.append(sentence)

        # Add event-based sentences
        all_sentences.extend(past_sentences)
        all_sentences.extend(swap_entry_sentences)
        all_sentences.extend(quarter_sentences)

        # Option contract sentences (0-1)
        if random.random() < 0.3:
            template = random.choice(option_contract_templates)
            swap_type = random.choice(
                [
                    "foreign currency purchased put option contracts",
                    "purchased put option contracts",
                    "purchased call option contracts",
                ]
            )

            notional1 = round(random.uniform(0, 300), 0)  # Can be 0 for current year
            notional2 = round(random.uniform(100, 400), 0)
            sentence = template.format(
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                month=random.choice(months),
                swap_type=swap_type,
                notional1=notional1,
                notional2=notional2,
                year=current_year,
                prev_year=current_year - 1,
            )
            all_sentences.append(sentence)

        # Dedesignation sentences (0-1) - more common for Label 1
        dedesignation_chance = 0.2 if has_active_derivative else 0.5
        if random.random() < dedesignation_chance:
            template = random.choice(dedesignation_templates)
            swap_type = random.choice(swap_types)
            q = random.choice(quarters)
            sentence = template.format(
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                swap_type=swap_type,
                year=current_year,
                quarter=q,
                month=random.choice(months),
            )
            all_sentences.append(sentence)

        # Forward starting/treasury lock sentences (0-1)
        if random.random() < 0.3:
            template = random.choice(forward_starting_templates)
            swap_type = random.choice(
                [
                    "forward starting interest rate swaps",
                    "treasury rate lock agreements",
                    "forward starting swaps or treasury rate lock agreements",
                ]
            )
            sentence = template.format(
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                month=random.choice(months),
                swap_type=swap_type,
                hedge_type=random.choice(hedge_types),
            )
            all_sentences.append(sentence)

        # Collar strategy sentences (0-1)
        if random.random() < 0.2:
            template = random.choice(collar_strategy_templates)
            swap_type = random.choice(
                [
                    "purchased put and call options",
                    "foreign currency options",
                    "option contracts",
                ]
            )
            collar_year = random.choice(past_years)
            if has_active_derivative:
                collar_year = current_year
            sentence = template.format(
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                swap_type=swap_type,
                quarter=random.choice(quarters),
                month=random.choice(months),
                year=collar_year,
            )
            all_sentences.append(sentence)
        # Fair value position statements (0-1) - mainly for Label 0 (active derivatives)

        if has_active_derivative is True or has_active_derivative is None:
            if random.random() < 0.3:
                template = random.choice(fair_value_position_templates)
                swap_type = random.choice(swap_types)
                amount = round(random.uniform(2, 50), 1)
                oci_amount = round(
                    amount * random.uniform(0.05, 0.15), 1
                )  # OCI is typically smaller
                position_type = random.choice(position_types)
                oci_action = random.choice(oci_actions)

                sentence = template.format(
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                    month=random.choice(months),
                    year=current_year,
                    swap_type=swap_type,
                    position_type=position_type,
                    amount=amount,
                    oci_amount=oci_amount,
                    oci_action=oci_action,
                )
                all_sentences.append(sentence)

        # Specific hedge designation with currency pairs (0-1) - mainly for Label 0

        if has_active_derivative is True:
            if random.random() < 0.25:
                template = random.choice(specific_hedge_templates)
                swap_type = random.choice(
                    [
                        "forward purchases",
                        "forward contracts",
                        "currency forwards",
                        "foreign exchange forwards",
                    ]
                )
                notional_currency = random.choice(currency_codes)
                notional_amount = random.randint(100, 500)
                expiry_year = current_year + 1
                currency_pair = random.choice(currency_pairs)
                hedged_item = random.choice(hedged_items)

                sentence = template.format(
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                    month=random.choice(months),
                    swap_type=swap_type,
                    notional_currency=notional_currency,
                    notional_amount=notional_amount,
                    expiry_year=expiry_year,
                    currency_pair=currency_pair,
                    hedged_item=hedged_item,
                )
                all_sentences.append(sentence)
            # Cash pooling arrangements (0-1) - can appear in any label
            if random.random() < 0.15:
                template = random.choice(cash_pooling_templates)
                all_sentences.append(
                    template.format(
                        company=company_name,
                        currency_code=currency_code,
                        major_currency=major_currency,
                        money_unit=money_units,
                        end_day=random.randint(28, 31),
                    )
                )

            # Debt optimization strategies (0-1) - can appear in any label
            if random.random() < 0.2:
                template = random.choice(debt_optimization_templates)
                instrument_list = random.choice(instrument_lists)
                sentence = template.format(
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                    month=random.choice(months),
                    instrument_list=instrument_list,
                )
                all_sentences.append(sentence)
        # Optionally add policy statements to prevent overfitting
        if include_policy:
            policy_sentences = []

            # Context (0-1)
            if random.random() < 0.3:
                template = random.choice(context_templates)
                policy_sentences.append(
                    template.format(
                        company=company_name,
                        currency_code=currency_code,
                        major_currency=major_currency,
                        money_unit=money_units,
                        end_day=random.randint(28, 31),
                    )
                )

            # Impact (0-1)
            if random.random() < 0.3:
                template = random.choice(impact_templates)
                verb = random.choice(impact_verbs)
                policy_sentences.append(
                    template.format(
                        company=company_name,
                        currency_code=currency_code,
                        major_currency=major_currency,
                        money_unit=money_units,
                        end_day=random.randint(28, 31),
                        month=random.choice(months),
                        verb=verb,
                    )
                )

            # Mitigation (0-1)
            if random.random() < 0.4:
                template = random.choice(mitigation_templates)
                verb = random.choice(mitigation_verbs)
                policy_sentences.append(
                    template.format(
                        company=company_name,
                        currency_code=currency_code,
                        major_currency=major_currency,
                        money_unit=money_units,
                        end_day=random.randint(28, 31),
                        month=random.choice(months),
                        verb=verb,
                        swap_type=random.choice(swap_types),
                    )
                )

            # Accounting policy (0-1)
            if random.random() < 0.5:
                template = random.choice(accounting_policy_templates)
                policy_sentences.append(
                    template.format(
                        company=company_name,
                        currency_code=currency_code,
                        major_currency=major_currency,
                        money_unit=money_units,
                        hedge_type=random.choice(hedge_types),
                        swap_type=random.choice(swap_types),
                    )
                )

            # Documentation (0-1)
            if random.random() < 0.3:
                template = random.choice(documentation_templates)
                policy_sentences.append(
                    template.format(
                        company=company_name,
                        currency_code=currency_code,
                        major_currency=major_currency,
                        money_unit=money_units,
                        hedge_type=random.choice(hedge_types),
                    )
                )

            # Effectiveness (0-1)
            if random.random() < 0.4:
                template = random.choice(effectiveness_templates)
                # Provide all possible placeholders
                sentence = template.format(
                    company=company_name,
                    currency_code=currency_code,
                    major_currency=major_currency,
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                    month=random.choice(months),
                    hedge_type=random.choice(hedge_types),
                    metric=random.choice(metrics),
                    frequency=random.choice(frequencies),
                    verb=random.choice(assessment_verbs),
                    method=random.choice(methods),
                    standard=random.choice(standards),
                    swap_type=random.choice(swap_types),
                )
                policy_sentences.append(sentence)

            # Currency description (0-1)
            if random.random() < 0.3:
                selected_currencies = []
                selected_currencies.extend(
                    random.sample(major_currencies, random.randint(2, 3))
                )
                if random.random() < 0.4:
                    selected_currencies.extend(
                        random.sample(european_currencies, random.randint(1, 2))
                    )

                selected_currencies = list(dict.fromkeys(selected_currencies))
                currency_list = (
                    ", ".join(selected_currencies[:-1])
                    + " and "
                    + selected_currencies[-1]
                )
                template = random.choice(currency_templates)
                policy_sentences.append(
                    template.format(
                        company=company_name,
                        currency_code=currency_code,
                        major_currency=major_currency,
                        money_unit=money_units,
                        end_day=random.randint(28, 31),
                        month=random.choice(months),
                        currencies=currency_list,
                    )
                )

            # Counterparty risk (0-1)
            if random.random() < 0.3:
                template = random.choice(counterparty_templates)
                policy_sentences.append(template.format(company=company_name))

            # No trading policy (0-1)
            if random.random() < 0.4:
                tempate = random.choice(no_trading_templates)
                policy_sentences.append(
                    template.format(
                        company=company_name,
                        currency_code=currency_code,
                        major_currency=major_currency,
                        money_unit=money_units,
                        end_day=random.randint(28, 31),
                        notional1=round(random.uniform(200, 550), 0),
                        notional2=round(random.uniform(200, 550), 0),
                        instrument_list=random.choice(instrument_lists),
                        position_type=random.choice(position_types),
                        metric=random.choice(metrics),
                        year=current_year,
                        hedge_type=random.choice(hedge_types),
                        standard=random.choice(standards),
                        verb=random.choice(impact_verbs),
                        method=random.choice(methods),
                        frequency=random.choice(frequencies),
                        currencies=random.choice(major_currencies),
                        swap_type=random.choice(swap_types),
                        quarter=random.choice(quarters),
                        month=random.choice(months),
                        prev_year=random.choice(past_years),
                        notional_currency=random.choice(currency_codes),
                        notional_amount=round(random.uniform(100, 400), 0),
                        notional=round(random.uniform(100, 400), 0),
                        expiry_year=random.choice(past_years),
                        currency_pair=random.choice(currency_pairs),
                        hedged_item=random.choice(hedged_items),
                        settlement=round(random.uniform(50, 200), 0),
                        amount=round(random.uniform(2, 50), 1),
                        oci_amount=round(random.uniform(0.05, 0.15)),
                        oci_action=random.choice(oci_actions),
                    )
                )

            all_sentences.extend(policy_sentences)

        label = 0 if has_active_derivative else 1

    # Shuffle and select
    random.shuffle(all_sentences)
    selected_sentences = all_sentences[:max_len]
    selected_sentences = [s[0].upper() + s[1:] if s else "" for s in all_sentences]
    # Create paragraph
    paragraph = (
        f"<reportingYear>{reporting_year}</reportingYear> "
        + ". ".join(selected_sentences)
        + "."
    )
    paragraph = re.sub("We's", "Our", paragraph)
    if paragraph.find("{") != -1 or paragraph.find("}") != -1:
        print("Error in format", paragraph)
    return paragraph, label


def generate_accounting_noise_paragraph(
    year_range=(1999, 2025), max_len=random.randint(4, 7), company_name=None
):
    """
    Generate synthetic accounting paragraphs that are pure noise - nothing to do with derivatives.
    This is Label 3: accounting discussions about lawsuits, equity warrants, balance sheet items,
    revenue recognition, inventory, PP&E, leases, etc. - but NO derivative instruments.

    Args:
        year_range (tuple): (min_year, max_year) for reporting year
        max_len (int): Maximum number of sentences

    Returns:
        tuple: (paragraph_text, label=3)
    """

    if company_name is None:
        if random.random() < 0.75:
            company_name = random.choice(company_names)
        else:
            company_name = random.choice(["The Company", "We"])

    acquisition_targets = [name for name in company_names if name != company_name]
    current_year = random.randint(year_range[0], year_range[1])
    reporting_year = current_year
    all_sentences = []
    money_units = random.choice(money_unit_list)
    currency_code = random.choice(currency_codes)
    major_currency = random.choice(all_currencies)
    # ================== SENTENCE GENERATION ==================

    # Litigation (0-2 sentences)
    num_litigation = random.randint(0, 2)
    for _ in range(num_litigation):
        if random.random() < 0.5:
            template = random.choice(litigation_templates)
            case_type = random.choice(case_types)
            court = random.choice(courts)
            sentence = template.format(
                year=current_year,
                case_types=case_type,
                company=company_name,
                court=court,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                month=random.choice(months),
                end_day=random.randint(28, 31),
            )
        elif random.random() < 0.6:
            template = random.choice(litigation_assessment_templates)
            sentence = template.format(company=company_name)
        else:
            template = random.choice(guarantee_templates)
            amount = round(random.uniform(10, 100), 1)
            payments = round(amount * random.uniform(0.1, 0.3), 1)
            guarantee_type = random.choice(guarantee_types)
            sentence = template.format(
                amount=amount,
                year=current_year,
                month=random.choice(months),
                payments=payments,
                guarantee_type=guarantee_type,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
        all_sentences.append(sentence)

    # Restructuring (0-1)
    if random.random() < 0.2:
        template = random.choice(restructuring_templates)
        amount = round(random.uniform(10, 80), 1)
        purpose = random.choice(restructuring_purposes)
        expense_type = random.choice(restructuring_expense_types)
        month = random.choice(months)
        sentence = template.format(
            year=current_year,
            amount=amount,
            purpose=purpose,
            expense_type=expense_type,
            month=month,
            company=company_name,
            currency_code=currency_code,
            major_currency=major_currency,
            money_unit=money_units,
            end_day=random.randint(28, 31),
        )
        all_sentences.append(sentence)

    # Non-cash transactions (0-1)
    if random.random() < 0.25:
        if random.random() < 0.6:
            # Warrant issuance as debt costs
            template = random.choice(warrant_debt_issuance_templates)
            month = random.choice(months)
            year = random.choice([current_year, current_year - 1])
            financing_type = random.choice(financing_types)
            shares1 = random.choice([100000, 200000, 333334, 400000, 496875])
            shares2 = random.choice([20834, 50000, 100000, 150000])
            value1 = round(shares1 * random.uniform(0.25, 0.75), 0)
            value2 = round(shares2 * random.uniform(0.15, 0.50), 0)
            shares = shares1
            value = value1

            sentence = template.format(
                month=month,
                year=year,
                end_day=random.randint(28, 31),
                financing_type=financing_type,
                shares1=f"{shares1:,}",
                shares2=f"{shares2:,}",
                value1=f"{value1:,}",
                value2=f"{value2:,}",
                shares=f"{shares:,}",
                value=f"{value:,}",
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
            )
            all_sentences.append(sentence)

        elif random.random() < 0.7:
            # Warrant amortization
            template = random.choice(warrant_amortization_templates)
            asset_type = random.choice(asset_types)
            value = round(random.uniform(50, 500), 0)
            value2 = round(random.uniform(50, 500), 0)
            sentence = template.format(
                asset_type=asset_type,
                value=f"{value:,}",
                value2=f"{value:,}",
                year=current_year,
                prev_year=current_year - 1,
                month=random.choice(months),
                end_day=random.randint(28, 31),
                debt_types_list=random.choice(debt_types_list),
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                price=random.choice([5000, 10000, 15000, 17500, 20000]),
            )
            all_sentences.append(sentence)

        else:
            # Non-cash settlements
            template = random.choice(non_cash_settlement_templates)
            shares = random.choice([5000, 10000, 15000, 17500, 20000])
            value = round(shares * random.uniform(4, 8), 0)
            service_type = random.choice(service_types)
            month = random.choice(months)
            year = random.choice([current_year, current_year - 1])

            sentence = template.format(
                shares=f"{shares:,}",
                value=f"{value:,}",
                service_type=service_type,
                month=month,
                end_day=random.randint(28, 31),
                year=year,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
            )
            all_sentences.append(sentence)
    # Acquisitions (0-1)
    if random.random() < 0.2:
        template = random.choice(acquisition_templates)
        target = random.choice(acquisition_targets)
        amount = round(random.uniform(50, 500), 1)
        goodwill = round(amount * random.uniform(0.3, 0.5), 1)
        intangibles = round(amount * random.uniform(0.2, 0.4), 1)
        month = random.choice(months)
        purpose = random.choice(acquisition_purposes)
        funding = random.choice(acquisition_funding)
        sentence = template.format(
            month=month,
            year=current_year,
            target=target,
            amount=amount,
            goodwill=goodwill,
            intangibles=intangibles,
            purpose=purpose,
            funding=funding,
            company=company_name,
            currency_code=currency_code,
            major_currency=major_currency,
            money_unit=money_units,
            end_day=random.randint(28, 31),
        )
        all_sentences.append(sentence)

    # Lawsuits (0-1)
    if random.random() < 0.2:
        template = random.choice(specific_lawsuit_templates)
        month = random.choice(months)
        year = random.choice([current_year, current_year - 1])
        dismiss_year = year + 1
        court = random.choice(courts)
        allegation = random.choice(allegations)
        amount = random.choice([10, 25, 50, 75, 100, 150, 200])
        quarter = random.choice(quarters)

        sentence = template.format(
            month=month,
            year=year,
            dismiss_year=dismiss_year,
            court=court,
            allegation=allegation,
            amount=amount,
            quarter=quarter,
            company=company_name,
            currency_code=currency_code,
            major_currency=major_currency,
            money_unit=money_units,
            end_day=random.randint(28, 31),
        )
        all_sentences.append(sentence)

    # Revenue recognition (0-1)
    if random.random() < 0.3:
        if random.random() < 0.5:
            sentence = random.choice(revenue_recognition_templates)
            sentence = sentence.format(company=company_name)
        else:
            template = random.choice(deferred_revenue_templates)
            amount = round(random.uniform(10, 100), 1)
            prev_amount = round(amount * random.uniform(0.8, 1.2), 1)
            sentence = template.format(
                year=current_year,
                month=random.choice(months),
                amount=amount,
                prev_amount=prev_amount,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
        all_sentences.append(sentence)

    # Inventory (0-1)
    if random.random() < 0.3:
        if random.random() < 0.5:
            template = random.choice(inventory_templates)
            method = random.choice(inventory_methods)
            amount = round(random.uniform(50, 300), 1)
            reserve = round(amount * random.uniform(0.05, 0.15), 1)
            sentence = template.format(
                method=method,
                year=current_year,
                month=random.choice(months),
                amount=amount,
                reserve=reserve,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
        else:
            template = random.choice(inventory_writedown_templates)
            amount = round(random.uniform(2, 20), 1)
            sentence = template.format(
                year=current_year,
                amount=amount,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                month=random.choice(months),
                end_day=random.randint(28, 31),
            )
        all_sentences.append(sentence)

    # PP&E (0-1)
    if random.random() < 0.3:
        if random.random() < 0.5:
            template = random.choice(ppe_templates)
            amount = round(random.uniform(100, 500), 1)
            sentence = template.format(
                month=random.choice(months),
                end_day=random.randint(28, 31),
                amount=amount,
                year=current_year,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
            )
        elif random.random() < 0.7:
            template = random.choice(capex_templates)
            amount = round(random.uniform(20, 150), 1)
            purpose = random.choice(capex_purposes)
            sentence = template.format(
                year=current_year,
                month=random.choice(months),
                amount=amount,
                purpose=purpose,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
            )
        else:
            template = random.choice(impairment_templates)
            amount = round(random.uniform(5, 50), 1)
            asset_type = random.choice(asset_types)
            quarter = random.choice(quarters)
            sentence = template.format(
                amount=amount,
                year=current_year,
                month=random.choice(months),
                quarter=quarter,
                asset_type=asset_type,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
        all_sentences.append(sentence)

    # Leases (0-1)
    if random.random() < 0.3:
        if random.random() < 0.5:
            template = random.choice(lease_templates)
            min_term = random.randint(1, 3)
            max_term = random.randint(5, 15)
            amount = round(random.uniform(50, 200), 1)
            liability = round(amount * random.uniform(1.0, 1.1), 1)
            adoption_year = random.randint(2019, 2020)
            sentence = template.format(
                min_term=min_term,
                max_term=max_term,
                year=current_year,
                month=random.choice(months),
                amount=amount,
                liability=liability,
                adoption_year=adoption_year,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
        else:
            template = random.choice(lease_commitment_templates)
            amount = round(random.uniform(100, 400), 1)
            years = round(random.uniform(3, 8), 1)
            rate = round(random.uniform(3.0, 7.0), 1)
            sentence = template.format(
                amount=amount,
                year=current_year,
                years=years,
                month=random.choice(months),
                rate=rate,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
        all_sentences.append(sentence)

    # Goodwill and Intangibles (0-1)
    if random.random() < 0.3:
        if random.random() < 0.5:
            template = random.choice(goodwill_templates)
            amount = round(random.uniform(200, 1000), 1)
            quarter = random.choice(quarters)
            sentence = template.format(
                amount=amount,
                year=current_year,
                quarter=quarter,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                month=random.choice(months),
                end_day=random.randint(28, 31),
            )
        else:
            template = random.choice(intangible_templates)
            amount = round(random.uniform(50, 300), 1)
            years = round(random.uniform(5, 12), 1)
            intangible_type = random.choice(intangible_types)
            sentence = template.format(
                intangible_types=intangible_type,
                amount=amount,
                year=current_year,
                month=random.choice(months),
                years=years,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
        all_sentences.append(sentence)

    # Debt (0-1)
    if random.random() < 0.3:
        if random.random() < 0.5:
            template = random.choice(debt_templates)
            amount = random.choice([250, 500, 750, 1000, 1500])
            outstanding = random.randint(0, amount // 2)
            debt_type_list = random.choice(debt_types_list)
            debt_type = random.choice(
                ["senior notes", "term loan", "convertible notes"]
            )
            maturity_year = current_year + random.randint(3, 10)
            sentence = template.format(
                amount=amount,
                year=maturity_year,
                month=random.choice(months),
                outstanding=outstanding,
                current_year=current_year,
                debt_types=debt_type_list,
                debt_type=debt_type,
                maturity_year=maturity_year,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
        else:
            template = random.choice(debt_covenant_templates)
            ratio = round(random.uniform(2.5, 4.0), 1)
            coverage = round(random.uniform(2.0, 4.0), 1)
            sentence = template.format(
                year=current_year,
                month=random.choice(months),
                end_day=random.randint(28, 31),
                ratio=ratio,
                coverage=coverage,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
            )
        all_sentences.append(sentence)

    # Income taxes (0-1)
    if random.random() < 0.3:
        if random.random() < 0.6:
            template = random.choice(tax_templates)
            amount = round(random.uniform(20, 150), 1)
            rate = round(random.uniform(15, 30), 1)
            prev_rate = round(rate * random.uniform(0.9, 1.1), 1)
            source = random.choice(tax_sources)
            start_year = current_year + 1
            end_year = current_year + random.randint(10, 20)
            sentence = template.format(
                amount=amount,
                year=current_year,
                rate=rate,
                month=random.choice(months),
                prev_rate=prev_rate,
                sources=source,
                start_year=start_year,
                end_year=end_year,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
        else:
            template = random.choice(uncertain_tax_templates)
            amount = round(random.uniform(5, 50), 1)
            sentence = template.format(
                amount=amount,
                year=current_year,
                month=random.choice(months),
                end_day=random.randint(28, 31),
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
            )
        all_sentences.append(sentence)

    # Stock-based compensation (0-1)
    if random.random() < 0.3:
        if random.random() < 0.5:
            template = random.choice(stock_comp_templates)
            amount = round(random.uniform(10, 80), 1)
            shares = random.choice([50000, 100000, 250000, 500000])
            price = round(random.uniform(20, 100), 2)
            sentence = template.format(
                amount=amount,
                year=current_year,
                month=random.choice(months),
                shares=f"{shares:,}",
                price=price,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
        else:
            template = random.choice(stock_comp_valuation_templates)
            amount = round(random.uniform(5, 25), 2)
            model=random.choice(valuation_models)
            sentence = template.format(
                year=current_year,
                month=random.choice(months),
                amount=amount,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                model=model
            )
        all_sentences.append(sentence)

    # Pension (0-1)
    if random.random() < 0.2:
        if random.random() < 0.5:
            template = random.choice(pension_templates)
            assets = round(random.uniform(200, 800), 1)
            obligations = round(assets * random.uniform(1.0, 1.2), 1)
            amount = round(random.uniform(20, 100), 1)
            sentence = template.format(
                assets=assets,
                obligations=obligations,
                year=current_year,
                month=random.choice(months),
                amount=amount,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
        else:
            template = random.choice(opeb_templates)
            amount = round(random.uniform(50, 200), 1)
            sentence = template.format(
                amount=amount,
                year=current_year,
                month=random.choice(months),
                end_day=random.randint(28, 31),
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
            )
        all_sentences.append(sentence)

    # Commitments (0-1)
    if random.random() < 0.3:
        if random.random() < 0.5:
            template = random.choice(purchase_commitment_templates)
            amount = round(random.uniform(50, 300), 1)
            years = random.randint(3, 7)
            sentence = template.format(
                amount=amount,
                year=current_year,
                years=years,
                month=random.choice(months),
                end_day=random.randint(28, 31),
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
            )
        else:
            template = random.choice(guarantee_templates)
            amount = round(random.uniform(10, 100), 1)
            payments = round(amount * random.uniform(0.1, 0.3), 1)
            guarantee_type = random.choice(guarantee_types)
            sentence = template.format(
                amount=amount,
                year=current_year,
                month=random.choice(months),
                payments=payments,
                guarantee_type=guarantee_type,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )
        all_sentences.append(sentence)

    # Restructuring (0-1)
    if random.random() < 0.2:
        template = random.choice(restructuring_templates)
        amount = round(random.uniform(10, 80), 1)
        purpose = random.choice(restructuring_purposes)
        expense_type = random.choice(restructuring_expense_types)
        month = random.choice(months)
        sentence = template.format(
            year=current_year,
            amount=amount,
            purpose=purpose,
            expense_type=expense_type,
            month=month,
            company=company_name,
            currency_code=currency_code,
            major_currency=major_currency,
            money_unit=money_units,
            end_day=random.randint(28, 31),
        )
        all_sentences.append(sentence)

    # Acquisitions (0-1)
    if random.random() < 0.2:
        template = random.choice(acquisition_templates)
        target = random.choice(acquisition_targets)
        amount = round(random.uniform(50, 500), 1)
        goodwill = round(amount * random.uniform(0.3, 0.5), 1)
        intangibles = round(amount * random.uniform(0.2, 0.4), 1)
        month = random.choice(months)
        purpose = random.choice(acquisition_purposes)
        funding = random.choice(acquisition_funding)
        sentence = template.format(
            month=month,
            year=current_year,
            target=target,
            amount=amount,
            goodwill=goodwill,
            intangibles=intangibles,
            purpose=purpose,
            funding=funding,
            company=company_name,
            currency_code=currency_code,
            major_currency=major_currency,
            money_unit=money_units,
            end_day=random.randint(28, 31),
        )
        all_sentences.append(sentence)

    # Balance sheet changes (0-2 sentences)
    num_bs_changes = random.randint(0, 2)
    for _ in range(num_bs_changes):
        category = random.choice(
            [
                "ar",
                "ap",
                "accrued",
                "working_capital",
                "other_assets",
                "other_liabilities",
                "equity",
                "cash_flow",
                "general",
            ]
        )

        if category == "ar":
            template = random.choice(ar_templates)
            amount = round(random.uniform(10, 150), 1)
            prev_amount = round(amount * random.uniform(0.8, 1.2), 1)
            ending = round(random.uniform(50, 300), 1)
            days = random.randint(35, 75)
            prev_days = random.randint(40, 80)

            sentence = template.format(
                money_unit=money_units,
                currency_code=currency_code,
                end_day=random.randint(28, 31),
                month=random.choice(months),
                company=company_name,
                amount=amount,
                prev_amount=prev_amount,
                ending=ending,
                year=current_year,
                prev_year=current_year - 1,
                days=days,
                prev_days=prev_days,
            )

        elif category == "ap":
            template = random.choice(ap_templates)
            amount = round(random.uniform(5, 100), 1)
            prev_amount = round(amount * random.uniform(0.7, 1.3), 1)
            days = random.randint(30, 60)
            prev_days = random.randint(25, 55)
            reason = random.choice(balance_sheet_reasons)

            sentence = template.format(
                money_unit=money_units,
                end_day=random.randint(28, 31),
                currency_code=currency_code,
                month=random.choice(months),
                company=company_name,
                amount=amount,
                prev_amount=prev_amount,
                year=current_year,
                prev_year=current_year - 1,
                days=days,
                prev_days=prev_days,
                reason=reason,
            )

        elif category == "accrued":
            template = random.choice(accrued_liabilities_templates)
            amount = round(random.uniform(5, 80), 1)
            change = round(random.uniform(2, 30), 1)
            reason = random.choice(accrued_reasons)

            sentence = template.format(
                amount=amount,
                change=change,
                year=current_year,
                currency_code=currency_code,
                reason=reason,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                month=random.choice(months),
                company=company_name,
            )

        elif category == "working_capital":
            template = random.choice(working_capital_templates)
            amount = round(random.uniform(50, 300), 1)
            prev_amount = round(amount * random.uniform(0.8, 1.2), 1)
            direction = random.choice(["use", "source"])
            reason = random.choice(balance_sheet_reasons)

            sentence = template.format(
                amount=amount,
                prev_amount=prev_amount,
                direction=direction,
                currency_code=currency_code,
                year=current_year,
                prev_year=current_year - 1,
                reason=reason,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                month=random.choice(months),
                company=company_name,
            )

        elif category == "other_assets":
            template = random.choice(other_current_assets_templates)
            amount = round(random.uniform(5, 50), 1)
            ending = round(random.uniform(20, 100), 1)
            reason = random.choice(other_asset_reasons)

            sentence = template.format(
                amount=amount,
                ending=ending,
                year=current_year,
                currency_code=currency_code,
                reason=reason,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                month=random.choice(months),
                company=company_name,
            )

        elif category == "other_liabilities":
            template = random.choice(other_liabilities_templates)
            amount = round(random.uniform(10, 100), 1)
            prev_amount = round(amount * random.uniform(0.8, 1.2), 1)
            ending = round(random.uniform(50, 200), 1)
            reason = random.choice(liability_reasons)

            sentence = template.format(
                amount=amount,
                prev_amount=prev_amount,
                currency_code=currency_code,
                ending=ending,
                year=current_year,
                reason=reason,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                month=random.choice(months),
                company=company_name,
            )

        elif category == "equity":
            if random.random() < 0.5:
                template = random.choice(stockholders_equity_templates)
                amount = round(random.uniform(20, 200), 1)
                prev_amount = round(amount * random.uniform(0.7, 1.3), 1)
                ending = round(random.uniform(100, 500), 1)
                reason = random.choice(equity_reasons)
                month = random.choice(months)

                sentence = template.format(
                    amount=amount,
                    prev_amount=prev_amount,
                    ending=ending,
                    year=current_year,
                    currency_code=currency_code,
                    prev_year=current_year - 1,
                    reason=reason.format(
                        month=month, year=current_year, end_day=random.randint(28, 31)
                    ),
                    money_unit=money_units,
                    end_day=random.randint(28, 31),
                    month=random.choice(months),
                    company=company_name,
                )
            else:
                template = random.choice(retained_earnings_templates)
                amount = round(random.uniform(50, 500), 1)
                ni = round(random.uniform(30, 200), 1)
                div = round(random.uniform(5, 50), 1)
                ending = round(random.uniform(100, 600), 1)

                sentence = template.format(
                    amount=amount,
                    ni=ni,
                    div=div,
                    ending=ending,
                    year=current_year,
                    money_unit=money_units,
                    currency_code=currency_code,
                    end_day=random.randint(28, 31),
                    month=random.choice(months),
                    company=company_name,
                )

        elif category == "cash_flow":
            template = random.choice(cash_flow_statement_templates)
            amount = round(random.uniform(20, 200), 1)
            prev_amount = round(amount * random.uniform(0.7, 1.3), 1)
            reason = random.choice(balance_sheet_reasons)

            sentence = template.format(
                amount=amount,
                prev_amount=prev_amount,
                year=current_year,
                prev_year=current_year - 1,
                currency_code=currency_code,
                reason=reason,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                month=random.choice(months),
                company=company_name,
            )

        else:  # general balance sheet changes
            template = random.choice(balance_sheet_change_templates)
            amount = round(random.uniform(5, 100), 1)
            ending = round(random.uniform(50, 200), 1)
            reason = random.choice(balance_sheet_reasons)

            sentence = template.format(
                amount=amount,
                ending=ending,
                year=current_year,
                prev_year=current_year - 1,
                currency_code=currency_code,
                reason=reason,
                money_unit=money_units,
                end_day=random.randint(28, 31),
                month=random.choice(months),
                company=company_name,
            )

        all_sentences.append(sentence)

    # CEO and executive compensation (0-2 sentences)
    num_exec_comp = random.randint(0, 2)
    for _ in range(num_exec_comp):
        comp_type = random.choice(
            [
                "ceo_total",
                "executive_total",
                "equity_grant",
                "severance",
                "employment_agreement",
                "committee",
                "say_on_pay",
                "deferred",
                "perquisites",
                "clawback",
            ]
        )

        if comp_type == "ceo_total":
            template = random.choice(ceo_compensation_templates)
            total_amount = round(random.uniform(8, 25), 1)
            salary = round(random.uniform(1, 2), 1)
            bonus = round(random.uniform(2, 6), 1)
            equity = round(total_amount - salary - bonus, 1)
            prev_amount = round(total_amount * random.uniform(0.8, 1.2), 1)

            sentence = template.format(
                amount=total_amount,
                salary=salary,
                bonus=bonus,
                equity=equity,
                prev_amount=prev_amount,
                prev_year=current_year - 1,
                year=current_year,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                month=random.choice(months),
                end_day=random.randint(28, 31),
            )

        elif comp_type == "executive_total":
            template = random.choice(executive_compensation_templates)
            amount = round(random.uniform(30, 80), 1)
            equity = round(amount * random.uniform(0.4, 0.6), 1)
            change = round(random.uniform(5, 20), 1)
            increase_decrease = random.choice(["an increase", "a decrease"])

            sentence = template.format(
                amount=amount,
                equity=equity,
                year=current_year,
                increase_decrease=increase_decrease,
                change=change,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                month=random.choice(months),
                end_day=random.randint(28, 31),
            )

        elif comp_type == "equity_grant":
            template = random.choice(equity_grant_templates)
            shares = random.choice([50000, 75000, 100000, 150000, 200000])
            amount = round(random.uniform(3, 12), 1)
            price = round(random.uniform(30, 150), 2)
            years = random.choice([3, 4, 5])
            month = random.choice(months)
            metric = random.choice(performance_metrics)
            vesting = random.choice(vesting_periods)

            sentence = template.format(
                month=month,
                year=current_year,
                shares=f"{shares:,}",
                amount=amount,
                price=price,
                years=years,
                metric=metric,
                vesting_period=vesting,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )

        elif comp_type == "severance":
            template = random.choice(severance_templates)
            multiple = random.choice([2, 2.5, 3])
            amount = round(random.uniform(5, 20), 1)

            sentence = template.format(
                multiple=multiple,
                amount=amount,
                year=current_year,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                month=random.choice(months),
                end_day=random.randint(28, 31),
            )

        elif comp_type == "employment_agreement":
            template = random.choice(employment_agreement_templates)
            salary = round(random.uniform(0.8, 2.0), 1)
            bonus_pct = random.choice([100, 125, 150, 200])
            month = random.choice(months)

            sentence = template.format(
                month=month,
                year=random.choice([current_year, current_year - 1, current_year - 2]),
                salary=salary,
                bonus_pct=bonus_pct,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )

        elif comp_type == "committee":
            template = random.choice(compensation_committee_templates)
            consultant = random.choice(acquisition_targets)

            sentence = template.format(consultant=consultant)

        elif comp_type == "say_on_pay":
            template = random.choice(say_on_pay_templates)
            pct = round(random.uniform(75, 95), 1)
            month = random.choice(["May", "June", "April"])

            sentence = template.format(
                year=current_year,
                pct=pct,
                month=month,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                end_day=random.randint(28, 31),
            )

        elif comp_type == "deferred":
            template = random.choice(deferred_comp_templates)
            pct = random.choice([50, 75, 100])
            bonus_pct = random.choice([50, 100])
            amount = round(random.uniform(10, 50), 1)

            sentence = template.format(
                pct=pct,
                bonus_pct=bonus_pct,
                amount=amount,
                year=current_year,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                month=random.choice(months),
                end_day=random.randint(28, 31),
            )

        elif comp_type == "perquisites":
            template = random.choice(perquisites_templates)
            amount = random.choice([50, 75, 100, 150, 200])
            perq_type = random.choice(perq_types)

            sentence = template.format(
                amount=f"{amount:,}",
                year=current_year,
                perq_type=perq_type,
                company=company_name,
                currency_code=currency_code,
                major_currency=major_currency,
                money_unit=money_units,
                month=random.choice(months),
                end_day=random.randint(28, 31),
            )

        elif comp_type == "clawback":
            template = random.choice(clawback_templates)
            sentence = template.format(company=company_name)
        all_sentences.append(sentence)
    # Shuffle and select
    random.shuffle(all_sentences)
    selected_sentences = all_sentences[:max_len]
    selected_sentences = [s[0].upper() + s[1:] if s else "" for s in all_sentences]
    # Create paragraph
    paragraph = (
        f"<reportingYear>{reporting_year}</reportingYear> "
        + ". ".join(selected_sentences)
        + "."
    )
    paragraph = re.sub("We's", "Our", paragraph)
    if paragraph.find("{") != -1 or paragraph.find("}") != -1:
        print("Error in format", paragraph)
    return paragraph, 3    
```

```{python}
company_name_df = pd.read_excel(company_name_file)
company_names = set(company_name_df["name"])

# Make each company name lowercase, then Capitlize on each word
company_names = [name.lower().title() for name in company_names]

```


```{python}
def generate(size_per_label=100):
    # Collect all generated samples
    all_samples = []
    swap_types = ["IR", "FX", "CP", "GENERIC"]
    for prefix in swap_types:
        for _ in range(size_per_label):
            paragraph, _ = generate_labeled_hedge_paragraph(
                has_active_derivative=True, swap_type=prefix
            )
            all_samples.append((paragraph, label))

        for _ in range(size_per_label):
            paragraph, _ = generate_labeled_hedge_paragraph(
                has_active_derivative=False, swap_type=prefix
            )
            all_samples.append((paragraph, label))
    for _ in range(size_per_label):
        paragraph, label = generate_labeled_hedge_paragraph(has_active_derivative=True)
        all_samples.append((paragraph, label))
    for _ in range(size_per_label):
        paragraph, label = generate_labeled_hedge_paragraph(has_active_derivative=False)
        all_samples.append((paragraph, label))

    for _ in range(size_per_label):
        paragraph, label = generate_labeled_hedge_paragraph(has_active_derivative=None)
        all_samples.append((paragraph, label))
    for _ in range(size_per_label):
        paragraph, label = generate_derivative_liability_paragraph(label_type=4)
        all_samples.append((paragraph, label))
    for _ in range(size_per_label):
        paragraph, label = generate_derivative_liability_paragraph(label_type=5)
        all_samples.append((paragraph, label))
    for _ in range(size_per_label):
        paragraph, label = generate_derivative_liability_paragraph(label_type=6)
        all_samples.append((paragraph, label))
    for _ in range(size_per_label):
        paragraph, label = generate_derivative_liability_paragraph(label_type=7)
        all_samples.append((paragraph, label))
    for _ in range(size_per_label):
        paragraph, label = generate_derivative_liability_paragraph(label_type=3)
        all_samples.append((paragraph, label))
    for _ in range(size_per_label):
        paragraph, label = generate_accounting_noise_paragraph()
        all_samples.append((paragraph, label))
    # Create a DataFrame
    df_new = pd.DataFrame(all_samples, columns=["sentence", "label"])

    # Write or append to Excel
    try:
        # If the file exists, append to it
        book = load_workbook(output_file)
        with pd.ExcelWriter(
            output_file, engine="openpyxl", mode="a", if_sheet_exists="overlay"
        ) as writer:
            # Write to a new sheet with a timestamp or name
            df_new.to_excel(writer, sheet_name="Generated_Data", index=False)
    except FileNotFoundError:
        # If file doesn't exist, create a new one
        df_new.to_excel(output_file, sheet_name="Generated_Data", index=False)

    print(f"\n{len(all_samples)} samples written/appended to {output_file}")
```

```{python}
generate(150)
```